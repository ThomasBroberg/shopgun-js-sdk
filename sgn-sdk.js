(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof rollupNeedsAnOptionToDisableAMDInUMD === 'function' && rollupNeedsAnOptionToDisableAMDInUMD.amd ? rollupNeedsAnOptionToDisableAMDInUMD(factory) :
  global.SGN = factory();
}(typeof self !== 'undefined' ? self : this, function () { 'use strict';

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  var REACT_ELEMENT_TYPE;

  function _jsx(type, props, key, children) {
    if (!REACT_ELEMENT_TYPE) {
      REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7;
    }

    var defaultProps = type && type.defaultProps;
    var childrenLength = arguments.length - 3;

    if (!props && childrenLength !== 0) {
      props = {
        children: void 0
      };
    }

    if (props && defaultProps) {
      for (var propName in defaultProps) {
        if (props[propName] === void 0) {
          props[propName] = defaultProps[propName];
        }
      }
    } else if (!props) {
      props = defaultProps || {};
    }

    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = new Array(childrenLength);

      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 3];
      }

      props.children = childArray;
    }

    return {
      $$typeof: REACT_ELEMENT_TYPE,
      type: type,
      key: key === undefined ? null : '' + key,
      ref: null,
      props: props,
      _owner: null
    };
  }

  function _asyncIterator(iterable) {
    var method;

    if (typeof Symbol === "function") {
      if (Symbol.asyncIterator) {
        method = iterable[Symbol.asyncIterator];
        if (method != null) return method.call(iterable);
      }

      if (Symbol.iterator) {
        method = iterable[Symbol.iterator];
        if (method != null) return method.call(iterable);
      }
    }

    throw new TypeError("Object is not async iterable");
  }

  function _AwaitValue(value) {
    this.wrapped = value;
  }

  function _AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;
        var wrappedAwait = value instanceof _AwaitValue;
        Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
          if (wrappedAwait) {
            resume("next", arg);
            return;
          }

          settle(result.done ? "return" : "normal", arg);
        }, function (err) {
          resume("throw", err);
        });
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  _AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  _AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  _AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  function _wrapAsyncGenerator(fn) {
    return function () {
      return new _AsyncGenerator(fn.apply(this, arguments));
    };
  }

  function _awaitAsyncGenerator(value) {
    return new _AwaitValue(value);
  }

  function _asyncGeneratorDelegate(inner, awaitWrap) {
    var iter = {},
        waiting = false;

    function pump(key, value) {
      waiting = true;
      value = new Promise(function (resolve) {
        resolve(inner[key](value));
      });
      return {
        done: false,
        value: awaitWrap(value)
      };
    }

    

    if (typeof Symbol === "function" && Symbol.iterator) {
      iter[Symbol.iterator] = function () {
        return this;
      };
    }

    iter.next = function (value) {
      if (waiting) {
        waiting = false;
        return value;
      }

      return pump("next", value);
    };

    if (typeof inner.throw === "function") {
      iter.throw = function (value) {
        if (waiting) {
          waiting = false;
          throw value;
        }

        return pump("throw", value);
      };
    }

    if (typeof inner.return === "function") {
      iter.return = function (value) {
        return pump("return", value);
      };
    }

    return iter;
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineEnumerableProperties(obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ("value" in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    if (Object.getOwnPropertySymbols) {
      var objectSymbols = Object.getOwnPropertySymbols(descs);

      for (var i = 0; i < objectSymbols.length; i++) {
        var sym = objectSymbols[i];
        var desc = descs[sym];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, sym, desc);
      }
    }

    return obj;
  }

  function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = Object.getOwnPropertyDescriptor(defaults, key);

      if (value && value.configurable && obj[key] === undefined) {
        Object.defineProperty(obj, key, value);
      }
    }

    return obj;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
      return right[Symbol.hasInstance](left);
    } else {
      return left instanceof right;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _newArrowCheck(innerThis, boundThis) {
    if (innerThis !== boundThis) {
      throw new TypeError("Cannot instantiate an arrow function");
    }
  }

  function _objectDestructuringEmpty(obj) {
    if (obj == null) throw new TypeError("Cannot destructure undefined");
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function set(target, property, value, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.set) {
      set = Reflect.set;
    } else {
      set = function set(target, property, value, receiver) {
        var base = _superPropBase(target, property);

        var desc;

        if (base) {
          desc = Object.getOwnPropertyDescriptor(base, property);

          if (desc.set) {
            desc.set.call(receiver, value);
            return true;
          } else if (!desc.writable) {
            return false;
          }
        }

        desc = Object.getOwnPropertyDescriptor(receiver, property);

        if (desc) {
          if (!desc.writable) {
            return false;
          }

          desc.value = value;
          Object.defineProperty(receiver, property, desc);
        } else {
          _defineProperty(receiver, property, value);
        }

        return true;
      };
    }

    return set(target, property, value, receiver);
  }

  function _set(target, property, value, receiver, isStrict) {
    var s = set(target, property, value, receiver || target);

    if (!s && isStrict) {
      throw new Error('failed to set property');
    }

    return value;
  }

  function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }

    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }

    strings.raw = raw;
    return strings;
  }

  function _temporalRef(val, name) {
    if (val === _temporalUndefined) {
      throw new ReferenceError(name + " is not defined - temporal dead zone");
    } else {
      return val;
    }
  }

  function _readOnlyError(name) {
    throw new Error("\"" + name + "\" is read-only");
  }

  function _classNameTDZError(name) {
    throw new Error("Class \"" + name + "\" cannot be referenced in computed property keys.");
  }

  var _temporalUndefined = {};

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _slicedToArrayLoose(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimitLoose(arr, i) || _nonIterableRest();
  }

  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _iterableToArrayLimitLoose(arr, i) {
    var _arr = [];

    for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
      _arr.push(_step.value);

      if (i && _arr.length === i) break;
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  function _skipFirstGeneratorNext(fn) {
    return function () {
      var it = fn.apply(this, arguments);
      it.next();
      return it;
    };
  }

  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];

    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }

    return (hint === "string" ? String : Number)(input);
  }

  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");

    return typeof key === "symbol" ? key : String(key);
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.');
  }

  function _initializerDefineProperty(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  var id = 0;

  function _classPrivateFieldLooseKey(name) {
    return "__private_" + id++ + "_" + name;
  }

  function _classPrivateFieldLooseBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }

    return receiver;
  }

  function _classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }

    return privateMap.get(receiver).value;
  }

  function _classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to set private field on non-instance");
    }

    var descriptor = privateMap.get(receiver);

    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }

    descriptor.value = value;
    return value;
  }

  function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
    if (receiver !== classConstructor) {
      throw new TypeError("Private static access of wrong provenance");
    }

    return descriptor.value;
  }

  function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
    if (receiver !== classConstructor) {
      throw new TypeError("Private static access of wrong provenance");
    }

    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }

    descriptor.value = value;
    return value;
  }

  function _decorate(decorators, factory, superClass) {
    var r = factory(function initialize(O) {
      _initializeInstanceElements(O, decorated.elements);
    }, superClass);

    var decorated = _decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators);

    _initializeClassElements(r.F, decorated.elements);

    return _runClassFinishers(r.F, decorated.finishers);
  }

  function _createElementDescriptor(def) {
    var key = _toPropertyKey(def.key);

    var descriptor;

    if (def.kind === "method") {
      descriptor = {
        value: def.value,
        writable: true,
        configurable: true,
        enumerable: false
      };
      Object.defineProperty(def.value, "name", {
        value: typeof key === "symbol" ? "" : key,
        configurable: true
      });
    } else if (def.kind === "get") {
      descriptor = {
        get: def.value,
        configurable: true,
        enumerable: false
      };
    } else if (def.kind === "set") {
      descriptor = {
        set: def.value,
        configurable: true,
        enumerable: false
      };
    } else if (def.kind === "field") {
      descriptor = {
        configurable: true,
        writable: true,
        enumerable: true
      };
    }

    var element = {
      kind: def.kind === "field" ? "field" : "method",
      key: key,
      placement: def.static ? "static" : def.kind === "field" ? "own" : "prototype",
      descriptor: descriptor
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === "field") element.initializer = def.value;
    return element;
  }

  function _coalesceGetterSetter(element, other) {
    if (element.descriptor.get !== undefined) {
      other.descriptor.get = element.descriptor.get;
    } else {
      other.descriptor.set = element.descriptor.set;
    }
  }

  function _coalesceClassElements(elements) {
    var newElements = [];

    var isSameElement = function (other) {
      return other.kind === "method" && other.key === element.key && other.placement === element.placement;
    };

    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      var other;

      if (element.kind === "method" && (other = newElements.find(isSameElement))) {
        if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) {
          if (_hasDecorators(element) || _hasDecorators(other)) {
            throw new ReferenceError("Duplicated methods (" + element.key + ") can't be decorated.");
          }

          other.descriptor = element.descriptor;
        } else {
          if (_hasDecorators(element)) {
            if (_hasDecorators(other)) {
              throw new ReferenceError("Decorators can't be placed on different accessors with for " + "the same property (" + element.key + ").");
            }

            other.decorators = element.decorators;
          }

          _coalesceGetterSetter(element, other);
        }
      } else {
        newElements.push(element);
      }
    }

    return newElements;
  }

  function _hasDecorators(element) {
    return element.decorators && element.decorators.length;
  }

  function _isDataDescriptor(desc) {
    return desc !== undefined && !(desc.value === undefined && desc.writable === undefined);
  }

  function _initializeClassElements(F, elements) {
    var proto = F.prototype;
    ["method", "field"].forEach(function (kind) {
      elements.forEach(function (element) {
        var placement = element.placement;

        if (element.kind === kind && (placement === "static" || placement === "prototype")) {
          var receiver = placement === "static" ? F : proto;

          _defineClassElement(receiver, element);
        }
      });
    });
  }

  function _initializeInstanceElements(O, elements) {
    ["method", "field"].forEach(function (kind) {
      elements.forEach(function (element) {
        if (element.kind === kind && element.placement === "own") {
          _defineClassElement(O, element);
        }
      });
    });
  }

  function _defineClassElement(receiver, element) {
    var descriptor = element.descriptor;

    if (element.kind === "field") {
      var initializer = element.initializer;
      descriptor = {
        enumerable: descriptor.enumerable,
        writable: descriptor.writable,
        configurable: descriptor.configurable,
        value: initializer === void 0 ? void 0 : initializer.call(receiver)
      };
    }

    Object.defineProperty(receiver, element.key, descriptor);
  }

  function _decorateClass(elements, decorators) {
    var newElements = [];
    var finishers = [];
    var placements = {
      static: [],
      prototype: [],
      own: []
    };
    elements.forEach(function (element) {
      _addElementPlacement(element, placements);
    });
    elements.forEach(function (element) {
      if (!_hasDecorators(element)) return newElements.push(element);

      var elementFinishersExtras = _decorateElement(element, placements);

      newElements.push(elementFinishersExtras.element);
      newElements.push.apply(newElements, elementFinishersExtras.extras);
      finishers.push.apply(finishers, elementFinishersExtras.finishers);
    });

    if (!decorators) {
      return {
        elements: newElements,
        finishers: finishers
      };
    }

    var result = _decorateConstructor(newElements, decorators);

    finishers.push.apply(finishers, result.finishers);
    result.finishers = finishers;
    return result;
  }

  function _addElementPlacement(element, placements, silent) {
    var keys = placements[element.placement];

    if (!silent && keys.indexOf(element.key) !== -1) {
      throw new TypeError("Duplicated element (" + element.key + ")");
    }

    keys.push(element.key);
  }

  function _decorateElement(element, placements) {
    var extras = [];
    var finishers = [];

    for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) {
      var keys = placements[element.placement];
      keys.splice(keys.indexOf(element.key), 1);

      var elementObject = _fromElementDescriptor(element);

      var elementFinisherExtras = _toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject);

      element = elementFinisherExtras.element;

      _addElementPlacement(element, placements);

      if (elementFinisherExtras.finisher) {
        finishers.push(elementFinisherExtras.finisher);
      }

      var newExtras = elementFinisherExtras.extras;

      if (newExtras) {
        for (var j = 0; j < newExtras.length; j++) {
          _addElementPlacement(newExtras[j], placements);
        }

        extras.push.apply(extras, newExtras);
      }
    }

    return {
      element: element,
      finishers: finishers,
      extras: extras
    };
  }

  function _decorateConstructor(elements, decorators) {
    var finishers = [];

    for (var i = decorators.length - 1; i >= 0; i--) {
      var obj = _fromClassDescriptor(elements);

      var elementsAndFinisher = _toClassDescriptor((0, decorators[i])(obj) || obj);

      if (elementsAndFinisher.finisher !== undefined) {
        finishers.push(elementsAndFinisher.finisher);
      }

      if (elementsAndFinisher.elements !== undefined) {
        elements = elementsAndFinisher.elements;

        for (var j = 0; j < elements.length - 1; j++) {
          for (var k = j + 1; k < elements.length; k++) {
            if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) {
              throw new TypeError("Duplicated element (" + elements[j].key + ")");
            }
          }
        }
      }
    }

    return {
      elements: elements,
      finishers: finishers
    };
  }

  function _fromElementDescriptor(element) {
    var obj = {
      kind: element.kind,
      key: element.key,
      placement: element.placement,
      descriptor: element.descriptor
    };
    var desc = {
      value: "Descriptor",
      configurable: true
    };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    if (element.kind === "field") obj.initializer = element.initializer;
    return obj;
  }

  function _toElementDescriptors(elementObjects) {
    if (elementObjects === undefined) return;
    return _toArray(elementObjects).map(function (elementObject) {
      var element = _toElementDescriptor(elementObject);

      _disallowProperty(elementObject, "finisher", "An element descriptor");

      _disallowProperty(elementObject, "extras", "An element descriptor");

      return element;
    });
  }

  function _toElementDescriptor(elementObject) {
    var kind = String(elementObject.kind);

    if (kind !== "method" && kind !== "field") {
      throw new TypeError('An element descriptor\'s .kind property must be either "method" or' + ' "field", but a decorator created an element descriptor with' + ' .kind "' + kind + '"');
    }

    var key = _toPropertyKey(elementObject.key);

    var placement = String(elementObject.placement);

    if (placement !== "static" && placement !== "prototype" && placement !== "own") {
      throw new TypeError('An element descriptor\'s .placement property must be one of "static",' + ' "prototype" or "own", but a decorator created an element descriptor' + ' with .placement "' + placement + '"');
    }

    var descriptor = elementObject.descriptor;

    _disallowProperty(elementObject, "elements", "An element descriptor");

    var element = {
      kind: kind,
      key: key,
      placement: placement,
      descriptor: Object.assign({}, descriptor)
    };

    if (kind !== "field") {
      _disallowProperty(elementObject, "initializer", "A method descriptor");
    } else {
      _disallowProperty(descriptor, "get", "The property descriptor of a field descriptor");

      _disallowProperty(descriptor, "set", "The property descriptor of a field descriptor");

      _disallowProperty(descriptor, "value", "The property descriptor of a field descriptor");

      element.initializer = elementObject.initializer;
    }

    return element;
  }

  function _toElementFinisherExtras(elementObject) {
    var element = _toElementDescriptor(elementObject);

    var finisher = _optionalCallableProperty(elementObject, "finisher");

    var extras = _toElementDescriptors(elementObject.extras);

    return {
      element: element,
      finisher: finisher,
      extras: extras
    };
  }

  function _fromClassDescriptor(elements) {
    var obj = {
      kind: "class",
      elements: elements.map(_fromElementDescriptor)
    };
    var desc = {
      value: "Descriptor",
      configurable: true
    };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    return obj;
  }

  function _toClassDescriptor(obj) {
    var kind = String(obj.kind);

    if (kind !== "class") {
      throw new TypeError('A class descriptor\'s .kind property must be "class", but a decorator' + ' created a class descriptor with .kind "' + kind + '"');
    }

    _disallowProperty(obj, "key", "A class descriptor");

    _disallowProperty(obj, "placement", "A class descriptor");

    _disallowProperty(obj, "descriptor", "A class descriptor");

    _disallowProperty(obj, "initializer", "A class descriptor");

    _disallowProperty(obj, "extras", "A class descriptor");

    var finisher = _optionalCallableProperty(obj, "finisher");

    var elements = _toElementDescriptors(obj.elements);

    return {
      elements: elements,
      finisher: finisher
    };
  }

  function _disallowProperty(obj, name, objectType) {
    if (obj[name] !== undefined) {
      throw new TypeError(objectType + " can't have a ." + name + " property.");
    }
  }

  function _optionalCallableProperty(obj, name) {
    var value = obj[name];

    if (value !== undefined && typeof value !== "function") {
      throw new TypeError("Expected '" + name + "' to be a function");
    }

    return value;
  }

  function _runClassFinishers(constructor, finishers) {
    for (var i = 0; i < finishers.length; i++) {
      var newConstructor = (0, finishers[i])(constructor);

      if (newConstructor !== undefined) {
        if (typeof newConstructor !== "function") {
          throw new TypeError("Finishers must return a constructor.");
        }

        constructor = newConstructor;
      }
    }

    return constructor;
  }

  function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }

    return fn;
  }

  function _classPrivateMethodSet() {
    throw new TypeError("attempted to reassign private method");
  }

  var _library = false;

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  function getCjsExportFromNamespace (n) {
  	return n && n.default || n;
  }

  var _global = createCommonjsModule(function (module) {
  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math
    ? window : typeof self != 'undefined' && self.Math == Math ? self
    // eslint-disable-next-line no-new-func
    : Function('return this')();
  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
  });

  var _aFunction = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };

  // optional / simple context binding

  var _ctx = function (fn, that, length) {
    _aFunction(fn);
    if (that === undefined) return fn;
    switch (length) {
      case 1: return function (a) {
        return fn.call(that, a);
      };
      case 2: return function (a, b) {
        return fn.call(that, a, b);
      };
      case 3: return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
    }
    return function (/* ...args */) {
      return fn.apply(that, arguments);
    };
  };

  var toString = {}.toString;

  var _cof = function (it) {
    return toString.call(it).slice(8, -1);
  };

  var _core = createCommonjsModule(function (module) {
  var core = module.exports = { version: '2.6.0' };
  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
  });
  var _core_1 = _core.version;

  var _shared = createCommonjsModule(function (module) {
  var SHARED = '__core-js_shared__';
  var store = _global[SHARED] || (_global[SHARED] = {});

  (module.exports = function (key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: _core.version,
    mode: _library ? 'pure' : 'global',
    copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
  });
  });

  var id$1 = 0;
  var px = Math.random();
  var _uid = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id$1 + px).toString(36));
  };

  var _wks = createCommonjsModule(function (module) {
  var store = _shared('wks');

  var Symbol = _global.Symbol;
  var USE_SYMBOL = typeof Symbol == 'function';

  var $exports = module.exports = function (name) {
    return store[name] || (store[name] =
      USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
  };

  $exports.store = store;
  });

  // getting tag from 19.1.3.6 Object.prototype.toString()

  var TAG = _wks('toStringTag');
  // ES3 wrong here
  var ARG = _cof(function () { return arguments; }()) == 'Arguments';

  // fallback for IE11 Script Access Denied error
  var tryGet = function (it, key) {
    try {
      return it[key];
    } catch (e) { /* empty */ }
  };

  var _classof = function (it) {
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null'
      // @@toStringTag case
      : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
      // builtinTag case
      : ARG ? _cof(O)
      // ES3 arguments fallback
      : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };

  var _isObject = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

  var _anObject = function (it) {
    if (!_isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };

  var _fails = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };

  // Thank's IE8 for his funny defineProperty
  var _descriptors = !_fails(function () {
    return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
  });

  var document$1 = _global.document;
  // typeof document.createElement is 'object' in old IE
  var is = _isObject(document$1) && _isObject(document$1.createElement);
  var _domCreate = function (it) {
    return is ? document$1.createElement(it) : {};
  };

  var _ie8DomDefine = !_descriptors && !_fails(function () {
    return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
  });

  // 7.1.1 ToPrimitive(input [, PreferredType])

  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  var _toPrimitive$1 = function (it, S) {
    if (!_isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var dP = Object.defineProperty;

  var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    _anObject(O);
    P = _toPrimitive$1(P, true);
    _anObject(Attributes);
    if (_ie8DomDefine) try {
      return dP(O, P, Attributes);
    } catch (e) { /* empty */ }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };

  var _objectDp = {
  	f: f
  };

  var _propertyDesc = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var _hide = _descriptors ? function (object, key, value) {
    return _objectDp.f(object, key, _propertyDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var hasOwnProperty = {}.hasOwnProperty;
  var _has = function (it, key) {
    return hasOwnProperty.call(it, key);
  };

  var _redefine = createCommonjsModule(function (module) {
  var SRC = _uid('src');
  var TO_STRING = 'toString';
  var $toString = Function[TO_STRING];
  var TPL = ('' + $toString).split(TO_STRING);

  _core.inspectSource = function (it) {
    return $toString.call(it);
  };

  (module.exports = function (O, key, val, safe) {
    var isFunction = typeof val == 'function';
    if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
    if (O[key] === val) return;
    if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
    if (O === _global) {
      O[key] = val;
    } else if (!safe) {
      delete O[key];
      _hide(O, key, val);
    } else if (O[key]) {
      O[key] = val;
    } else {
      _hide(O, key, val);
    }
  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  })(Function.prototype, TO_STRING, function toString() {
    return typeof this == 'function' && this[SRC] || $toString.call(this);
  });
  });

  var PROTOTYPE = 'prototype';

  var $export = function (type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
    var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
    var key, own, out, exp;
    if (IS_GLOBAL) source = name;
    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined;
      // export native or passed
      out = (own ? target : source)[key];
      // bind timers to global for call from export context
      exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
      // extend global
      if (target) _redefine(target, key, out, type & $export.U);
      // export
      if (exports[key] != out) _hide(exports, key, exp);
      if (IS_PROTO && expProto[key] != out) expProto[key] = out;
    }
  };
  _global.core = _core;
  // type bitmap
  $export.F = 1;   // forced
  $export.G = 2;   // global
  $export.S = 4;   // static
  $export.P = 8;   // proto
  $export.B = 16;  // bind
  $export.W = 32;  // wrap
  $export.U = 64;  // safe
  $export.R = 128; // real proto method for `library`
  var _export = $export;

  var _anInstance = function (it, Constructor, name, forbiddenField) {
    if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
      throw TypeError(name + ': incorrect invocation!');
    } return it;
  };

  // call something on iterator step with safe closing on error

  var _iterCall = function (iterator, fn, value, entries) {
    try {
      return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
    } catch (e) {
      var ret = iterator['return'];
      if (ret !== undefined) _anObject(ret.call(iterator));
      throw e;
    }
  };

  var _iterators = {};

  // check on default Array iterator

  var ITERATOR = _wks('iterator');
  var ArrayProto = Array.prototype;

  var _isArrayIter = function (it) {
    return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR] === it);
  };

  // 7.1.4 ToInteger
  var ceil = Math.ceil;
  var floor = Math.floor;
  var _toInteger = function (it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };

  // 7.1.15 ToLength

  var min = Math.min;
  var _toLength = function (it) {
    return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };

  var ITERATOR$1 = _wks('iterator');

  var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
    if (it != undefined) return it[ITERATOR$1]
      || it['@@iterator']
      || _iterators[_classof(it)];
  };

  var _forOf = createCommonjsModule(function (module) {
  var BREAK = {};
  var RETURN = {};
  var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
    var iterFn = ITERATOR ? function () { return iterable; } : core_getIteratorMethod(iterable);
    var f = _ctx(fn, that, entries ? 2 : 1);
    var index = 0;
    var length, step, iterator, result;
    if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
    // fast case for arrays with default iterator
    if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {
      result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
      if (result === BREAK || result === RETURN) return result;
    } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
      result = _iterCall(iterator, f, step.value, entries);
      if (result === BREAK || result === RETURN) return result;
    }
  };
  exports.BREAK = BREAK;
  exports.RETURN = RETURN;
  });

  // 7.3.20 SpeciesConstructor(O, defaultConstructor)


  var SPECIES = _wks('species');
  var _speciesConstructor = function (O, D) {
    var C = _anObject(O).constructor;
    var S;
    return C === undefined || (S = _anObject(C)[SPECIES]) == undefined ? D : _aFunction(S);
  };

  // fast apply, http://jsperf.lnkit.com/fast-apply/5
  var _invoke = function (fn, args, that) {
    var un = that === undefined;
    switch (args.length) {
      case 0: return un ? fn()
                        : fn.call(that);
      case 1: return un ? fn(args[0])
                        : fn.call(that, args[0]);
      case 2: return un ? fn(args[0], args[1])
                        : fn.call(that, args[0], args[1]);
      case 3: return un ? fn(args[0], args[1], args[2])
                        : fn.call(that, args[0], args[1], args[2]);
      case 4: return un ? fn(args[0], args[1], args[2], args[3])
                        : fn.call(that, args[0], args[1], args[2], args[3]);
    } return fn.apply(that, args);
  };

  var document$2 = _global.document;
  var _html = document$2 && document$2.documentElement;

  var process$1 = _global.process;
  var setTask = _global.setImmediate;
  var clearTask = _global.clearImmediate;
  var MessageChannel = _global.MessageChannel;
  var Dispatch = _global.Dispatch;
  var counter = 0;
  var queue = {};
  var ONREADYSTATECHANGE = 'onreadystatechange';
  var defer, channel, port;
  var run = function () {
    var id = +this;
    // eslint-disable-next-line no-prototype-builtins
    if (queue.hasOwnProperty(id)) {
      var fn = queue[id];
      delete queue[id];
      fn();
    }
  };
  var listener = function (event) {
    run.call(event.data);
  };
  // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
  if (!setTask || !clearTask) {
    setTask = function setImmediate(fn) {
      var args = [];
      var i = 1;
      while (arguments.length > i) args.push(arguments[i++]);
      queue[++counter] = function () {
        // eslint-disable-next-line no-new-func
        _invoke(typeof fn == 'function' ? fn : Function(fn), args);
      };
      defer(counter);
      return counter;
    };
    clearTask = function clearImmediate(id) {
      delete queue[id];
    };
    // Node.js 0.8-
    if (_cof(process$1) == 'process') {
      defer = function (id) {
        process$1.nextTick(_ctx(run, id, 1));
      };
    // Sphere (JS game engine) Dispatch API
    } else if (Dispatch && Dispatch.now) {
      defer = function (id) {
        Dispatch.now(_ctx(run, id, 1));
      };
    // Browsers with MessageChannel, includes WebWorkers
    } else if (MessageChannel) {
      channel = new MessageChannel();
      port = channel.port2;
      channel.port1.onmessage = listener;
      defer = _ctx(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if (_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts) {
      defer = function (id) {
        _global.postMessage(id + '', '*');
      };
      _global.addEventListener('message', listener, false);
    // IE8-
    } else if (ONREADYSTATECHANGE in _domCreate('script')) {
      defer = function (id) {
        _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function () {
          _html.removeChild(this);
          run.call(id);
        };
      };
    // Rest old browsers
    } else {
      defer = function (id) {
        setTimeout(_ctx(run, id, 1), 0);
      };
    }
  }
  var _task = {
    set: setTask,
    clear: clearTask
  };
  var _task_1 = _task.set;
  var _task_2 = _task.clear;

  var macrotask = _task.set;
  var Observer = _global.MutationObserver || _global.WebKitMutationObserver;
  var process$2 = _global.process;
  var Promise$1 = _global.Promise;
  var isNode = _cof(process$2) == 'process';

  var _microtask = function () {
    var head, last, notify;

    var flush = function () {
      var parent, fn;
      if (isNode && (parent = process$2.domain)) parent.exit();
      while (head) {
        fn = head.fn;
        head = head.next;
        try {
          fn();
        } catch (e) {
          if (head) notify();
          else last = undefined;
          throw e;
        }
      } last = undefined;
      if (parent) parent.enter();
    };

    // Node.js
    if (isNode) {
      notify = function () {
        process$2.nextTick(flush);
      };
    // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
    } else if (Observer && !(_global.navigator && _global.navigator.standalone)) {
      var toggle = true;
      var node = document.createTextNode('');
      new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
      notify = function () {
        node.data = toggle = !toggle;
      };
    // environments with maybe non-completely correct, but existent Promise
    } else if (Promise$1 && Promise$1.resolve) {
      // Promise.resolve without an argument throws an error in LG WebOS 2
      var promise = Promise$1.resolve(undefined);
      notify = function () {
        promise.then(flush);
      };
    // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout
    } else {
      notify = function () {
        // strange IE + webpack dev server bug - use .call(global)
        macrotask.call(_global, flush);
      };
    }

    return function (fn) {
      var task = { fn: fn, next: undefined };
      if (last) last.next = task;
      if (!head) {
        head = task;
        notify();
      } last = task;
    };
  };

  'use strict';
  // 25.4.1.5 NewPromiseCapability(C)


  function PromiseCapability(C) {
    var resolve, reject;
    this.promise = new C(function ($$resolve, $$reject) {
      if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
      resolve = $$resolve;
      reject = $$reject;
    });
    this.resolve = _aFunction(resolve);
    this.reject = _aFunction(reject);
  }

  var f$1 = function (C) {
    return new PromiseCapability(C);
  };

  var _newPromiseCapability = {
  	f: f$1
  };

  var _perform = function (exec) {
    try {
      return { e: false, v: exec() };
    } catch (e) {
      return { e: true, v: e };
    }
  };

  var navigator$1 = _global.navigator;

  var _userAgent = navigator$1 && navigator$1.userAgent || '';

  var _promiseResolve = function (C, x) {
    _anObject(C);
    if (_isObject(x) && x.constructor === C) return x;
    var promiseCapability = _newPromiseCapability.f(C);
    var resolve = promiseCapability.resolve;
    resolve(x);
    return promiseCapability.promise;
  };

  var _redefineAll = function (target, src, safe) {
    for (var key in src) _redefine(target, key, src[key], safe);
    return target;
  };

  var def = _objectDp.f;

  var TAG$1 = _wks('toStringTag');

  var _setToStringTag = function (it, tag, stat) {
    if (it && !_has(it = stat ? it : it.prototype, TAG$1)) def(it, TAG$1, { configurable: true, value: tag });
  };

  'use strict';



  var SPECIES$1 = _wks('species');

  var _setSpecies = function (KEY) {
    var C = _global[KEY];
    if (_descriptors && C && !C[SPECIES$1]) _objectDp.f(C, SPECIES$1, {
      configurable: true,
      get: function () { return this; }
    });
  };

  var ITERATOR$2 = _wks('iterator');
  var SAFE_CLOSING = false;

  try {
    var riter = [7][ITERATOR$2]();
    riter['return'] = function () { SAFE_CLOSING = true; };
    // eslint-disable-next-line no-throw-literal
    Array.from(riter, function () { throw 2; });
  } catch (e) { /* empty */ }

  var _iterDetect = function (exec, skipClosing) {
    if (!skipClosing && !SAFE_CLOSING) return false;
    var safe = false;
    try {
      var arr = [7];
      var iter = arr[ITERATOR$2]();
      iter.next = function () { return { done: safe = true }; };
      arr[ITERATOR$2] = function () { return iter; };
      exec(arr);
    } catch (e) { /* empty */ }
    return safe;
  };

  'use strict';










  var task = _task.set;
  var microtask = _microtask();




  var PROMISE = 'Promise';
  var TypeError$1 = _global.TypeError;
  var process$3 = _global.process;
  var versions = process$3 && process$3.versions;
  var v8 = versions && versions.v8 || '';
  var $Promise = _global[PROMISE];
  var isNode$1 = _classof(process$3) == 'process';
  var empty = function () { /* empty */ };
  var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
  var newPromiseCapability = newGenericPromiseCapability = _newPromiseCapability.f;

  var USE_NATIVE = !!function () {
    try {
      // correct subclassing with @@species support
      var promise = $Promise.resolve(1);
      var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {
        exec(empty, empty);
      };
      // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
      return (isNode$1 || typeof PromiseRejectionEvent == 'function')
        && promise.then(empty) instanceof FakePromise
        // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
        // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
        // we can't detect it synchronously, so just check versions
        && v8.indexOf('6.6') !== 0
        && _userAgent.indexOf('Chrome/66') === -1;
    } catch (e) { /* empty */ }
  }();

  // helpers
  var isThenable = function (it) {
    var then;
    return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;
  };
  var notify = function (promise, isReject) {
    if (promise._n) return;
    promise._n = true;
    var chain = promise._c;
    microtask(function () {
      var value = promise._v;
      var ok = promise._s == 1;
      var i = 0;
      var run = function (reaction) {
        var handler = ok ? reaction.ok : reaction.fail;
        var resolve = reaction.resolve;
        var reject = reaction.reject;
        var domain = reaction.domain;
        var result, then, exited;
        try {
          if (handler) {
            if (!ok) {
              if (promise._h == 2) onHandleUnhandled(promise);
              promise._h = 1;
            }
            if (handler === true) result = value;
            else {
              if (domain) domain.enter();
              result = handler(value); // may throw
              if (domain) {
                domain.exit();
                exited = true;
              }
            }
            if (result === reaction.promise) {
              reject(TypeError$1('Promise-chain cycle'));
            } else if (then = isThenable(result)) {
              then.call(result, resolve, reject);
            } else resolve(result);
          } else reject(value);
        } catch (e) {
          if (domain && !exited) domain.exit();
          reject(e);
        }
      };
      while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
      promise._c = [];
      promise._n = false;
      if (isReject && !promise._h) onUnhandled(promise);
    });
  };
  var onUnhandled = function (promise) {
    task.call(_global, function () {
      var value = promise._v;
      var unhandled = isUnhandled(promise);
      var result, handler, console;
      if (unhandled) {
        result = _perform(function () {
          if (isNode$1) {
            process$3.emit('unhandledRejection', value, promise);
          } else if (handler = _global.onunhandledrejection) {
            handler({ promise: promise, reason: value });
          } else if ((console = _global.console) && console.error) {
            console.error('Unhandled promise rejection', value);
          }
        });
        // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
        promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;
      } promise._a = undefined;
      if (unhandled && result.e) throw result.v;
    });
  };
  var isUnhandled = function (promise) {
    return promise._h !== 1 && (promise._a || promise._c).length === 0;
  };
  var onHandleUnhandled = function (promise) {
    task.call(_global, function () {
      var handler;
      if (isNode$1) {
        process$3.emit('rejectionHandled', promise);
      } else if (handler = _global.onrejectionhandled) {
        handler({ promise: promise, reason: promise._v });
      }
    });
  };
  var $reject = function (value) {
    var promise = this;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap
    promise._v = value;
    promise._s = 2;
    if (!promise._a) promise._a = promise._c.slice();
    notify(promise, true);
  };
  var $resolve = function (value) {
    var promise = this;
    var then;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap
    try {
      if (promise === value) throw TypeError$1("Promise can't be resolved itself");
      if (then = isThenable(value)) {
        microtask(function () {
          var wrapper = { _w: promise, _d: false }; // wrap
          try {
            then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));
          } catch (e) {
            $reject.call(wrapper, e);
          }
        });
      } else {
        promise._v = value;
        promise._s = 1;
        notify(promise, false);
      }
    } catch (e) {
      $reject.call({ _w: promise, _d: false }, e); // wrap
    }
  };

  // constructor polyfill
  if (!USE_NATIVE) {
    // 25.4.3.1 Promise(executor)
    $Promise = function Promise(executor) {
      _anInstance(this, $Promise, PROMISE, '_h');
      _aFunction(executor);
      Internal.call(this);
      try {
        executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));
      } catch (err) {
        $reject.call(this, err);
      }
    };
    // eslint-disable-next-line no-unused-vars
    Internal = function Promise(executor) {
      this._c = [];             // <- awaiting reactions
      this._a = undefined;      // <- checked in isUnhandled reactions
      this._s = 0;              // <- state
      this._d = false;          // <- done
      this._v = undefined;      // <- value
      this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
      this._n = false;          // <- notify
    };
    Internal.prototype = _redefineAll($Promise.prototype, {
      // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
      then: function then(onFulfilled, onRejected) {
        var reaction = newPromiseCapability(_speciesConstructor(this, $Promise));
        reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
        reaction.fail = typeof onRejected == 'function' && onRejected;
        reaction.domain = isNode$1 ? process$3.domain : undefined;
        this._c.push(reaction);
        if (this._a) this._a.push(reaction);
        if (this._s) notify(this, false);
        return reaction.promise;
      },
      // 25.4.5.1 Promise.prototype.catch(onRejected)
      'catch': function (onRejected) {
        return this.then(undefined, onRejected);
      }
    });
    OwnPromiseCapability = function () {
      var promise = new Internal();
      this.promise = promise;
      this.resolve = _ctx($resolve, promise, 1);
      this.reject = _ctx($reject, promise, 1);
    };
    _newPromiseCapability.f = newPromiseCapability = function (C) {
      return C === $Promise || C === Wrapper
        ? new OwnPromiseCapability(C)
        : newGenericPromiseCapability(C);
    };
  }

  _export(_export.G + _export.W + _export.F * !USE_NATIVE, { Promise: $Promise });
  _setToStringTag($Promise, PROMISE);
  _setSpecies(PROMISE);
  Wrapper = _core[PROMISE];

  // statics
  _export(_export.S + _export.F * !USE_NATIVE, PROMISE, {
    // 25.4.4.5 Promise.reject(r)
    reject: function reject(r) {
      var capability = newPromiseCapability(this);
      var $$reject = capability.reject;
      $$reject(r);
      return capability.promise;
    }
  });
  _export(_export.S + _export.F * (_library || !USE_NATIVE), PROMISE, {
    // 25.4.4.6 Promise.resolve(x)
    resolve: function resolve(x) {
      return _promiseResolve(_library && this === Wrapper ? $Promise : this, x);
    }
  });
  _export(_export.S + _export.F * !(USE_NATIVE && _iterDetect(function (iter) {
    $Promise.all(iter)['catch'](empty);
  })), PROMISE, {
    // 25.4.4.1 Promise.all(iterable)
    all: function all(iterable) {
      var C = this;
      var capability = newPromiseCapability(C);
      var resolve = capability.resolve;
      var reject = capability.reject;
      var result = _perform(function () {
        var values = [];
        var index = 0;
        var remaining = 1;
        _forOf(iterable, false, function (promise) {
          var $index = index++;
          var alreadyCalled = false;
          values.push(undefined);
          remaining++;
          C.resolve(promise).then(function (value) {
            if (alreadyCalled) return;
            alreadyCalled = true;
            values[$index] = value;
            --remaining || resolve(values);
          }, reject);
        });
        --remaining || resolve(values);
      });
      if (result.e) reject(result.v);
      return capability.promise;
    },
    // 25.4.4.4 Promise.race(iterable)
    race: function race(iterable) {
      var C = this;
      var capability = newPromiseCapability(C);
      var reject = capability.reject;
      var result = _perform(function () {
        _forOf(iterable, false, function (promise) {
          C.resolve(promise).then(capability.resolve, reject);
        });
      });
      if (result.e) reject(result.v);
      return capability.promise;
    }
  });

  var es6_promise = {

  };

  var f$2 = {}.propertyIsEnumerable;

  var _objectPie = {
  	f: f$2
  };

  // fallback for non-array-like ES3 and non-enumerable old V8 strings

  // eslint-disable-next-line no-prototype-builtins
  var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return _cof(it) == 'String' ? it.split('') : Object(it);
  };

  // 7.2.1 RequireObjectCoercible(argument)
  var _defined = function (it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };

  // to indexed object, toObject with fallback for non-array-like ES3 strings


  var _toIobject = function (it) {
    return _iobject(_defined(it));
  };

  var gOPD = Object.getOwnPropertyDescriptor;

  var f$3 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
    O = _toIobject(O);
    P = _toPrimitive$1(P, true);
    if (_ie8DomDefine) try {
      return gOPD(O, P);
    } catch (e) { /* empty */ }
    if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
  };

  var _objectGopd = {
  	f: f$3
  };

  // Works with __proto__ only. Old v8 can't work with null proto objects.
  /* eslint-disable no-proto */


  var check = function (O, proto) {
    _anObject(O);
    if (!_isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
  };
  var _setProto = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
      function (test, buggy, set) {
        try {
          set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
          set(test, []);
          buggy = !(test instanceof Array);
        } catch (e) { buggy = true; }
        return function setPrototypeOf(O, proto) {
          check(O, proto);
          if (buggy) O.__proto__ = proto;
          else set(O, proto);
          return O;
        };
      }({}, false) : undefined),
    check: check
  };
  var _setProto_1 = _setProto.set;
  var _setProto_2 = _setProto.check;

  var setPrototypeOf = _setProto.set;
  var _inheritIfRequired = function (that, target, C) {
    var S = target.constructor;
    var P;
    if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && _isObject(P) && setPrototypeOf) {
      setPrototypeOf(that, P);
    } return that;
  };

  var max = Math.max;
  var min$1 = Math.min;
  var _toAbsoluteIndex = function (index, length) {
    index = _toInteger(index);
    return index < 0 ? max(index + length, 0) : min$1(index, length);
  };

  // false -> Array#indexOf
  // true  -> Array#includes



  var _arrayIncludes = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = _toIobject($this);
      var length = _toLength(O.length);
      var index = _toAbsoluteIndex(fromIndex, length);
      var value;
      // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++];
        // eslint-disable-next-line no-self-compare
        if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
      } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      } return !IS_INCLUDES && -1;
    };
  };

  var shared = _shared('keys');

  var _sharedKey = function (key) {
    return shared[key] || (shared[key] = _uid(key));
  };

  var arrayIndexOf = _arrayIncludes(false);
  var IE_PROTO = _sharedKey('IE_PROTO');

  var _objectKeysInternal = function (object, names) {
    var O = _toIobject(object);
    var i = 0;
    var result = [];
    var key;
    for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while (names.length > i) if (_has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
    return result;
  };

  // IE 8- don't enum bug keys
  var _enumBugKeys = (
    'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
  ).split(',');

  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

  var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

  var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return _objectKeysInternal(O, hiddenKeys);
  };

  var _objectGopn = {
  	f: f$4
  };

  // 7.2.8 IsRegExp(argument)


  var MATCH = _wks('match');
  var _isRegexp = function (it) {
    var isRegExp;
    return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');
  };

  'use strict';
  // 21.2.5.3 get RegExp.prototype.flags

  var _flags = function () {
    var that = _anObject(this);
    var result = '';
    if (that.global) result += 'g';
    if (that.ignoreCase) result += 'i';
    if (that.multiline) result += 'm';
    if (that.unicode) result += 'u';
    if (that.sticky) result += 'y';
    return result;
  };

  var dP$1 = _objectDp.f;
  var gOPN = _objectGopn.f;


  var $RegExp = _global.RegExp;
  var Base = $RegExp;
  var proto = $RegExp.prototype;
  var re1 = /a/g;
  var re2 = /a/g;
  // "new" creates a new object, old webkit buggy here
  var CORRECT_NEW = new $RegExp(re1) !== re1;

  if (_descriptors && (!CORRECT_NEW || _fails(function () {
    re2[_wks('match')] = false;
    // RegExp constructor can alter flags and IsRegExp works correct with @@match
    return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
  }))) {
    $RegExp = function RegExp(p, f) {
      var tiRE = this instanceof $RegExp;
      var piRE = _isRegexp(p);
      var fiU = f === undefined;
      return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
        : _inheritIfRequired(CORRECT_NEW
          ? new Base(piRE && !fiU ? p.source : p, f)
          : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? _flags.call(p) : f)
        , tiRE ? this : proto, $RegExp);
    };
    var proxy = function (key) {
      key in $RegExp || dP$1($RegExp, key, {
        configurable: true,
        get: function () { return Base[key]; },
        set: function (it) { Base[key] = it; }
      });
    };
    for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
    proto.constructor = $RegExp;
    $RegExp.prototype = proto;
    _redefine(_global, 'RegExp', $RegExp);
  }

  _setSpecies('RegExp');

  var es6_regexp_constructor = {

  };

  // 21.2.5.3 get RegExp.prototype.flags()
  if (_descriptors && /./g.flags != 'g') _objectDp.f(RegExp.prototype, 'flags', {
    configurable: true,
    get: _flags
  });

  var es6_regexp_flags = {

  };

  'use strict';




  var TO_STRING = 'toString';
  var $toString = /./[TO_STRING];

  var define = function (fn) {
    _redefine(RegExp.prototype, TO_STRING, fn, true);
  };

  // 21.2.5.14 RegExp.prototype.toString()
  if (_fails(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
    define(function toString() {
      var R = _anObject(this);
      return '/'.concat(R.source, '/',
        'flags' in R ? R.flags : !_descriptors && R instanceof RegExp ? _flags.call(R) : undefined);
    });
  // FF44- RegExp#toString has a wrong name
  } else if ($toString.name != TO_STRING) {
    define(function toString() {
      return $toString.call(this);
    });
  }

  var es6_regexp_toString = {

  };

  // 7.1.13 ToObject(argument)

  var _toObject = function (it) {
    return Object(_defined(it));
  };

  // true  -> String#at
  // false -> String#codePointAt
  var _stringAt = function (TO_STRING) {
    return function (that, pos) {
      var s = String(_defined(that));
      var i = _toInteger(pos);
      var l = s.length;
      var a, b;
      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
        ? TO_STRING ? s.charAt(i) : a
        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };

  'use strict';
  var at = _stringAt(true);

   // `AdvanceStringIndex` abstract operation
  // https://tc39.github.io/ecma262/#sec-advancestringindex
  var _advanceStringIndex = function (S, index, unicode) {
    return index + (unicode ? at(S, index).length : 1);
  };

  'use strict';


  var builtinExec = RegExp.prototype.exec;

   // `RegExpExec` abstract operation
  // https://tc39.github.io/ecma262/#sec-regexpexec
  var _regexpExecAbstract = function (R, S) {
    var exec = R.exec;
    if (typeof exec === 'function') {
      var result = exec.call(R, S);
      if (typeof result !== 'object') {
        throw new TypeError('RegExp exec method returned something other than an Object or null');
      }
      return result;
    }
    if (_classof(R) !== 'RegExp') {
      throw new TypeError('RegExp#exec called on incompatible receiver');
    }
    return builtinExec.call(R, S);
  };

  'use strict';



  var nativeExec = RegExp.prototype.exec;
  // This always refers to the native implementation, because the
  // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
  // which loads this file before patching the method.
  var nativeReplace = String.prototype.replace;

  var patchedExec = nativeExec;

  var LAST_INDEX = 'lastIndex';

  var UPDATES_LAST_INDEX_WRONG = (function () {
    var re1 = /a/,
        re2 = /b*/g;
    nativeExec.call(re1, 'a');
    nativeExec.call(re2, 'a');
    return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
  })();

  // nonparticipating capturing group, copied from es5-shim's String#split patch.
  var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

  if (PATCH) {
    patchedExec = function exec(str) {
      var re = this;
      var lastIndex, reCopy, match, i;

      if (NPCG_INCLUDED) {
        reCopy = new RegExp('^' + re.source + '$(?!\\s)', _flags.call(re));
      }
      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

      match = nativeExec.call(re, str);

      if (UPDATES_LAST_INDEX_WRONG && match) {
        re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
      }
      if (NPCG_INCLUDED && match && match.length > 1) {
        // Fix browsers whose `exec` methods don't consistently return `undefined`
        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
        // eslint-disable-next-line no-loop-func
        nativeReplace.call(match[0], reCopy, function () {
          for (i = 1; i < arguments.length - 2; i++) {
            if (arguments[i] === undefined) match[i] = undefined;
          }
        });
      }

      return match;
    };
  }

  var _regexpExec = patchedExec;

  'use strict';

  _export({
    target: 'RegExp',
    proto: true,
    forced: _regexpExec !== /./.exec
  }, {
    exec: _regexpExec
  });

  var es6_regexp_exec = {

  };

  'use strict';








  var SPECIES$2 = _wks('species');

  var REPLACE_SUPPORTS_NAMED_GROUPS = !_fails(function () {
    // #replace needs built-in support for named groups.
    // #match works fine because it just return the exec results, even if it has
    // a "grops" property.
    var re = /./;
    re.exec = function () {
      var result = [];
      result.groups = { a: '7' };
      return result;
    };
    return ''.replace(re, '$<a>') !== '7';
  });

  var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
    // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
    var re = /(?:)/;
    var originalExec = re.exec;
    re.exec = function () { return originalExec.apply(this, arguments); };
    var result = 'ab'.split(re);
    return result.length === 2 && result[0] === 'a' && result[1] === 'b';
  })();

  var _fixReWks = function (KEY, length, exec) {
    var SYMBOL = _wks(KEY);

    var DELEGATES_TO_SYMBOL = !_fails(function () {
      // String methods call symbol-named RegEp methods
      var O = {};
      O[SYMBOL] = function () { return 7; };
      return ''[KEY](O) != 7;
    });

    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !_fails(function () {
      // Symbol-named RegExp methods call .exec
      var execCalled = false;
      var re = /a/;
      re.exec = function () { execCalled = true; return null; };
      if (KEY === 'split') {
        // RegExp[@@split] doesn't call the regex's exec method, but first creates
        // a new one. We need to return the patched regex when creating the new one.
        re.constructor = {};
        re.constructor[SPECIES$2] = function () { return re; };
      }
      re[SYMBOL]('');
      return !execCalled;
    }) : undefined;

    if (
      !DELEGATES_TO_SYMBOL ||
      !DELEGATES_TO_EXEC ||
      (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
      (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
    ) {
      var nativeRegExpMethod = /./[SYMBOL];
      var fns = exec(
        _defined,
        SYMBOL,
        ''[KEY],
        function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
          if (regexp.exec === _regexpExec) {
            if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
              // The native String method already delegates to @@method (this
              // polyfilled function), leasing to infinite recursion.
              // We avoid it by directly calling the native @@method method.
              return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
            }
            return { done: true, value: nativeMethod.call(str, regexp, arg2) };
          }
          return { done: false };
        }
      );
      var strfn = fns[0];
      var rxfn = fns[1];

      _redefine(String.prototype, KEY, strfn);
      _hide(RegExp.prototype, SYMBOL, length == 2
        // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
        // 21.2.5.11 RegExp.prototype[@@split](string, limit)
        ? function (string, arg) { return rxfn.call(string, this, arg); }
        // 21.2.5.6 RegExp.prototype[@@match](string)
        // 21.2.5.9 RegExp.prototype[@@search](string)
        : function (string) { return rxfn.call(string, this); }
      );
    }
  };

  'use strict';







  var max$1 = Math.max;
  var min$2 = Math.min;
  var floor$1 = Math.floor;
  var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

  var maybeToString = function (it) {
    return it === undefined ? it : String(it);
  };

  // @@replace logic
  _fixReWks('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
    return [
      // `String.prototype.replace` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.replace
      function replace(searchValue, replaceValue) {
        var O = defined(this);
        var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
        return fn !== undefined
          ? fn.call(searchValue, O, replaceValue)
          : $replace.call(String(O), searchValue, replaceValue);
      },
      // `RegExp.prototype[@@replace]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
      function (regexp, replaceValue) {
        var res = maybeCallNative($replace, regexp, this, replaceValue);
        if (res.done) return res.value;

        var rx = _anObject(regexp);
        var S = String(this);
        var functionalReplace = typeof replaceValue === 'function';
        if (!functionalReplace) replaceValue = String(replaceValue);
        var global = rx.global;
        if (global) {
          var fullUnicode = rx.unicode;
          rx.lastIndex = 0;
        }
        var results = [];
        while (true) {
          var result = _regexpExecAbstract(rx, S);
          if (result === null) break;
          results.push(result);
          if (!global) break;
          var matchStr = String(result[0]);
          if (matchStr === '') rx.lastIndex = _advanceStringIndex(S, _toLength(rx.lastIndex), fullUnicode);
        }
        var accumulatedResult = '';
        var nextSourcePosition = 0;
        for (var i = 0; i < results.length; i++) {
          result = results[i];
          var matched = String(result[0]);
          var position = max$1(min$2(_toInteger(result.index), S.length), 0);
          var captures = [];
          // NOTE: This is equivalent to
          //   captures = result.slice(1).map(maybeToString)
          // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
          // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
          // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
          for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
          var namedCaptures = result.groups;
          if (functionalReplace) {
            var replacerArgs = [matched].concat(captures, position, S);
            if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
            var replacement = String(replaceValue.apply(undefined, replacerArgs));
          } else {
            replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
          }
          if (position >= nextSourcePosition) {
            accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
            nextSourcePosition = position + matched.length;
          }
        }
        return accumulatedResult + S.slice(nextSourcePosition);
      }
    ];

      // https://tc39.github.io/ecma262/#sec-getsubstitution
    function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
      var tailPos = position + matched.length;
      var m = captures.length;
      var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
      if (namedCaptures !== undefined) {
        namedCaptures = _toObject(namedCaptures);
        symbols = SUBSTITUTION_SYMBOLS;
      }
      return $replace.call(replacement, symbols, function (match, ch) {
        var capture;
        switch (ch.charAt(0)) {
          case '$': return '$';
          case '&': return matched;
          case '`': return str.slice(0, position);
          case "'": return str.slice(tailPos);
          case '<':
            capture = namedCaptures[ch.slice(1, -1)];
            break;
          default: // \d\d?
            var n = +ch;
            if (n === 0) return ch;
            if (n > m) {
              var f = floor$1(n / 10);
              if (f === 0) return ch;
              if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
              return ch;
            }
            capture = captures[n - 1];
        }
        return capture === undefined ? '' : capture;
      });
    }
  });

  var es6_regexp_replace = {

  };

  var dP$2 = _objectDp.f;
  var FProto = Function.prototype;
  var nameRE = /^\s*function ([^ (]*)/;
  var NAME = 'name';

  // 19.2.4.2 name
  NAME in FProto || _descriptors && dP$2(FProto, NAME, {
    configurable: true,
    get: function () {
      try {
        return ('' + this).match(nameRE)[1];
      } catch (e) {
        return '';
      }
    }
  });

  var es6_function_name = {

  };

  var util;
  util = {
    isBrowser: function isBrowser() {
      return (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' && (typeof document === "undefined" ? "undefined" : _typeof(document)) === 'object';
    },
    isNode: function isNode() {
      return (typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object';
    },
    error: function error(err, options) {
      var key, value;
      err.message = err.message || null;

      if (typeof options === 'string') {
        err.message = options;
      } else if (_typeof(options) === 'object' && options != null) {
        for (key in options) {
          value = options[key];
          err[key] = value;
        }

        if (options.message != null) {
          err.message = options.message;
        }

        if (options.code != null || options.message != null) {
          err.code = options.code || options.name;
        }

        if (options.stack != null) {
          err.stack = options.stack;
        }
      }

      err.name = options && options.name || err.name || err.code || 'Error';
      err.time = new Date();
      return err;
    },
    uuid: function uuid() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r, v;
        r = Math.random() * 16 | 0;
        v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    },
    getQueryParam: function getQueryParam(field, url) {
      var href, reg, string;
      href = url ? url : window.location.href;
      reg = new RegExp('[?&]' + field + '=([^&#]*)', 'i');
      string = reg.exec(href);

      if (string) {
        return string[1];
      } else {
        return void 0;
      }
    },
    getRandomNumberBetween: function getRandomNumberBetween(from, to) {
      return Math.floor(Math.random() * to) + from;
    },
    getOS: function getOS() {
      var name, ua;
      name = null;
      ua = window.navigator.userAgent;

      if (ua.indexOf('Windows') > -1) {
        name = 'Windows';
      } else if (ua.indexOf('Mac') > -1) {
        name = 'macOS';
      } else if (ua.indexOf('X11') > -1) {
        name = 'unix';
      } else if (ua.indexOf('Linux') > -1) {
        name = 'Linux';
      } else if (ua.indexOf('iOS') > -1) {
        name = 'iOS';
      } else if (ua.indexOf('Android') > -1) {
        name = 'Android';
      }

      return name;
    },
    getDeviceCategory: function getDeviceCategory() {
      var deviceCategory;
      deviceCategory = 'desktop';

      if (navigator.platform === 'iPod' || navigator.platform === 'iPhone') {
        deviceCategory = 'mobile';
      } else if (navigator.platform === 'iPad') {
        deviceCategory = 'tablet';
      } else if (navigator.platform === 'Android' || /android/gi.test(navigator.userAgent)) {
        if (/tablet/gi.test(navigator.userAgent)) {
          deviceCategory = 'tablet';
        } else {
          deviceCategory = 'mobile';
        }
      }

      return deviceCategory;
    },
    getPointer: function getPointer() {
      var pointer;
      pointer = 'fine';

      if (matchMedia('(pointer:coarse)').matches) {
        pointer = 'coarse';
      }

      return pointer;
    },
    getOrientation: function getOrientation(width, height) {
      if (width === height) {
        return 'quadratic';
      } else if (width > height) {
        return 'horizontal';
      } else {
        return 'vertical';
      }
    },
    getScreenDimensions: function getScreenDimensions() {
      var density, logical, physical, ref;
      density = (ref = window.devicePixelRatio) != null ? ref : 1;
      logical = {
        width: window.screen.width,
        height: window.screen.height
      };
      physical = {
        width: Math.round(logical.width * density),
        height: Math.round(logical.height * density)
      };
      return {
        density: density,
        logical: logical,
        physical: physical
      };
    },
    getUtcOffsetSeconds: function getUtcOffsetSeconds() {
      var jan1, jan2, now, stdTimeOffset, tmp;
      now = new Date();
      jan1 = new Date(now.getFullYear(), 0, 1, 0, 0, 0, 0);
      tmp = jan1.toGMTString();
      jan2 = new Date(tmp.substring(0, tmp.lastIndexOf(' ') - 1));
      stdTimeOffset = (jan1 - jan2) / 1000;
      return stdTimeOffset;
    },
    getUtcDstOffsetSeconds: function getUtcDstOffsetSeconds() {
      return new Date().getTimezoneOffset() * 60 * -1;
    },
    getColorBrightness: function getColorBrightness(color) {
      var hex, rgb, s, sum, x;
      color = color.replace('#', '');
      hex = parseInt((hex + '').replace(/[^a-f0-9]/gi, ''), 16);
      rgb = [];
      sum = 0;
      x = 0;

      while (x < 3) {
        s = parseInt(color.substring(2 * x, 2), 16);
        rgb[x] = s;

        if (s > 0) {
          sum += s;
        }

        ++x;
      }

      if (sum <= 381) {
        return 'dark';
      } else {
        return 'light';
      }
    },
    btoa: function (_btoa) {
      function btoa(_x) {
        return _btoa.apply(this, arguments);
      }

      btoa.toString = function () {
        return _btoa.toString();
      };

      return btoa;
    }(function (str) {
      var buffer;

      if (util.isBrowser()) {
        return btoa(str);
      } else {
        buffer = null;

        if (str instanceof Buffer) {
          buffer = str;
        } else {
          buffer = new Buffer(str.toString(), 'binary');
        }

        return buffer.toString('base64');
      }
    }),
    chunk: function chunk(arr, size) {
      var results;
      results = [];

      while (arr.length) {
        results.push(arr.splice(0, size));
      }

      return results;
    },
    throttle: function throttle(fn) {
      var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;
      var scope = arguments.length > 2 ? arguments[2] : undefined;
      var deferTimer, last;
      last = void 0;
      deferTimer = void 0;
      return function () {
        var args, context, now;
        context = scope || this;
        now = new Date().getTime();
        args = arguments;

        if (last && now < last + threshold) {
          clearTimeout(deferTimer);
          deferTimer = setTimeout(function () {
            last = now;
            fn.apply(context, args);
          }, threshold);
        } else {
          last = now;
          fn.apply(context, args);
        }
      };
    },
    loadImage: function loadImage(src, callback) {
      var img;
      img = new Image();

      img.onload = function () {
        return callback(null, img.width, img.height);
      };

      img.onerror = function () {
        return callback(new Error());
      };

      img.src = src;
      return img;
    },
    distance: function distance(lat1, lng1, lat2, lng2) {
      var dist, radlat1, radlat2, radtheta, theta;
      radlat1 = Math.PI * lat1 / 180;
      radlat2 = Math.PI * lat2 / 180;
      theta = lng1 - lng2;
      radtheta = Math.PI * theta / 180;
      dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
      dist = Math.acos(dist);
      dist = dist * 180 / Math.PI;
      dist = dist * 60 * 1.1515;
      dist = dist * 1.609344 * 1000;
      return dist;
    },
    async: {
      parallel: function parallel(asyncCalls, sharedCallback) {
        var allResults, counter, k, makeCallback;
        counter = asyncCalls.length;
        allResults = [];
        k = 0;

        makeCallback = function makeCallback(index) {
          return function () {
            var i, results;
            results = [];
            i = 0;
            counter--;

            while (i < arguments.length) {
              results.push(arguments[i]);
              i++;
            }

            allResults[index] = results;

            if (counter === 0) {
              sharedCallback(allResults);
            }
          };
        };

        while (k < asyncCalls.length) {
          asyncCalls[k](makeCallback(k));
          k++;
        }
      }
    },
    // Method for wrapping a function that takes a callback in any position
    // to return promises if no callback is given in a call.
    // The second argument, cbParameterIndex, is the position of the callback in the original functions parameter list.
    // CoffeeScript optional parameters messes with this function arity detection,
    // not sure what to do about that, other than always setting cbParameterIndex at callsites.
    promiseCallbackInterop: function promiseCallbackInterop(fun) {
      var cbParameterIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : fun.length - 1;
      var makePromise; // This is the function that actually wraps and calls a method to return a promise.

      makePromise = function makePromise(fun, cbParameterIndex, parameters) {
        return new Promise(function (resolve, reject) {
          var callParameters, i, j, neoCallback, ref;

          neoCallback = function neoCallback(error, result) {
            if (error) {
              return reject(error);
            } else {
              return resolve(result);
            }
          };

          callParameters = [];

          for (i = j = 0, ref = Math.max(parameters.length, cbParameterIndex) + 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            callParameters.push(i === cbParameterIndex ? neoCallback : parameters[i]);
          }

          return fun.apply(this, callParameters);
        });
      }; // Wrapper function that decides what to do per-call.


      return function () {
        for (var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++) {
          parameters[_key] = arguments[_key];
        }

        if (typeof parameters[cbParameterIndex] === 'function') {
          // Callback given, do a regular old call.
          return fun.apply(null, parameters);
        } else if (typeof Promise === 'function') {
          // No callback given, and we have promise support, use makePromise to wrap the call.
          return makePromise(fun, cbParameterIndex, parameters);
        } else {
          // Ain't got callback, ain't got promise support; we gotta tell the developer.
          throw new Error("To be able to use this asynchronous method you should:\nSupply a callback function as argument #".concat(1 + cbParameterIndex, ".\nThis callback function will be called with the method call response.\nAlternatively, when supported, it can return a Promise if no callback function is given."));
        }
      };
    }
  };
  var util_1 = util;

  // 22.1.3.31 Array.prototype[@@unscopables]
  var UNSCOPABLES = _wks('unscopables');
  var ArrayProto$1 = Array.prototype;
  if (ArrayProto$1[UNSCOPABLES] == undefined) _hide(ArrayProto$1, UNSCOPABLES, {});
  var _addToUnscopables = function (key) {
    ArrayProto$1[UNSCOPABLES][key] = true;
  };

  var _iterStep = function (done, value) {
    return { value: value, done: !!done };
  };

  // 19.1.2.14 / 15.2.3.14 Object.keys(O)



  var _objectKeys = Object.keys || function keys(O) {
    return _objectKeysInternal(O, _enumBugKeys);
  };

  var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
    _anObject(O);
    var keys = _objectKeys(Properties);
    var length = keys.length;
    var i = 0;
    var P;
    while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
    return O;
  };

  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



  var IE_PROTO$1 = _sharedKey('IE_PROTO');
  var Empty = function () { /* empty */ };
  var PROTOTYPE$1 = 'prototype';

  // Create object with fake `null` prototype: use iframe Object with cleared prototype
  var createDict = function () {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = _domCreate('iframe');
    var i = _enumBugKeys.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';
    _html.appendChild(iframe);
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
    return createDict();
  };

  var _objectCreate = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      Empty[PROTOTYPE$1] = _anObject(O);
      result = new Empty();
      Empty[PROTOTYPE$1] = null;
      // add "__proto__" for Object.getPrototypeOf polyfill
      result[IE_PROTO$1] = O;
    } else result = createDict();
    return Properties === undefined ? result : _objectDps(result, Properties);
  };

  'use strict';



  var IteratorPrototype = {};

  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  _hide(IteratorPrototype, _wks('iterator'), function () { return this; });

  var _iterCreate = function (Constructor, NAME, next) {
    Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
    _setToStringTag(Constructor, NAME + ' Iterator');
  };

  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


  var IE_PROTO$2 = _sharedKey('IE_PROTO');
  var ObjectProto = Object.prototype;

  var _objectGpo = Object.getPrototypeOf || function (O) {
    O = _toObject(O);
    if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    } return O instanceof Object ? ObjectProto : null;
  };

  'use strict';








  var ITERATOR$3 = _wks('iterator');
  var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
  var FF_ITERATOR = '@@iterator';
  var KEYS = 'keys';
  var VALUES = 'values';

  var returnThis = function () { return this; };

  var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    _iterCreate(Constructor, NAME, next);
    var getMethod = function (kind) {
      if (!BUGGY && kind in proto) return proto[kind];
      switch (kind) {
        case KEYS: return function keys() { return new Constructor(this, kind); };
        case VALUES: return function values() { return new Constructor(this, kind); };
      } return function entries() { return new Constructor(this, kind); };
    };
    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR$3] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype;
    // Fix native
    if ($anyNative) {
      IteratorPrototype = _objectGpo($anyNative.call(new Base()));
      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
        // Set @@toStringTag to native iterators
        _setToStringTag(IteratorPrototype, TAG, true);
        // fix for some old engines
        if (!_library && typeof IteratorPrototype[ITERATOR$3] != 'function') _hide(IteratorPrototype, ITERATOR$3, returnThis);
      }
    }
    // fix Array#{values, @@iterator}.name in V8 / FF
    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;
      $default = function values() { return $native.call(this); };
    }
    // Define iterator
    if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR$3])) {
      _hide(proto, ITERATOR$3, $default);
    }
    // Plug for library
    _iterators[NAME] = $default;
    _iterators[TAG] = returnThis;
    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) _redefine(proto, key, methods[key]);
      } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };

  'use strict';





  // 22.1.3.4 Array.prototype.entries()
  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()
  var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
    this._t = _toIobject(iterated); // target
    this._i = 0;                   // next index
    this._k = kind;                // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;
    if (!O || index >= O.length) {
      this._t = undefined;
      return _iterStep(1);
    }
    if (kind == 'keys') return _iterStep(0, index);
    if (kind == 'values') return _iterStep(0, O[index]);
    return _iterStep(0, [index, O[index]]);
  }, 'values');

  // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
  _iterators.Arguments = _iterators.Array;

  _addToUnscopables('keys');
  _addToUnscopables('values');
  _addToUnscopables('entries');

  var ITERATOR$4 = _wks('iterator');
  var TO_STRING_TAG = _wks('toStringTag');
  var ArrayValues = _iterators.Array;

  var DOMIterables = {
    CSSRuleList: true, // TODO: Not spec compliant, should be false.
    CSSStyleDeclaration: false,
    CSSValueList: false,
    ClientRectList: false,
    DOMRectList: false,
    DOMStringList: false,
    DOMTokenList: true,
    DataTransferItemList: false,
    FileList: false,
    HTMLAllCollection: false,
    HTMLCollection: false,
    HTMLFormElement: false,
    HTMLSelectElement: false,
    MediaList: true, // TODO: Not spec compliant, should be false.
    MimeTypeArray: false,
    NamedNodeMap: false,
    NodeList: true,
    PaintRequestList: false,
    Plugin: false,
    PluginArray: false,
    SVGLengthList: false,
    SVGNumberList: false,
    SVGPathSegList: false,
    SVGPointList: false,
    SVGStringList: false,
    SVGTransformList: false,
    SourceBufferList: false,
    StyleSheetList: true, // TODO: Not spec compliant, should be false.
    TextTrackCueList: false,
    TextTrackList: false,
    TouchList: false
  };

  for (var collections = _objectKeys(DOMIterables), i$1 = 0; i$1 < collections.length; i$1++) {
    var NAME$1 = collections[i$1];
    var explicit = DOMIterables[NAME$1];
    var Collection = _global[NAME$1];
    var proto$1 = Collection && Collection.prototype;
    var key;
    if (proto$1) {
      if (!proto$1[ITERATOR$4]) _hide(proto$1, ITERATOR$4, ArrayValues);
      if (!proto$1[TO_STRING_TAG]) _hide(proto$1, TO_STRING_TAG, NAME$1);
      _iterators[NAME$1] = ArrayValues;
      if (explicit) for (key in es6_array_iterator) if (!proto$1[key]) _redefine(proto$1, key, es6_array_iterator[key], true);
    }
  }

  var web_dom_iterable = {

  };

  var microevent = createCommonjsModule(function (module) {
  /**
   * MicroEvent - to make any js object an event emitter (server or browser)
   * 
   * - pure javascript - server compatible, browser compatible
   * - dont rely on the browser doms
   * - super simple - you get it immediatly, no mistery, no magic involved
   *
   * - create a MicroEventDebug with goodies to debug
   *   - make it safer to use
  */

  var MicroEvent	= function(){};
  MicroEvent.prototype	= {
  	bind	: function(event, fct){
  		this._events = this._events || {};
  		this._events[event] = this._events[event]	|| [];
  		this._events[event].push(fct);
  	},
  	unbind	: function(event, fct){
  		this._events = this._events || {};
  		if( event in this._events === false  )	return;
  		this._events[event].splice(this._events[event].indexOf(fct), 1);
  	},
  	trigger	: function(event /* , args... */){
  		this._events = this._events || {};
  		if( event in this._events === false  )	return;
  		for(var i = 0; i < this._events[event].length; i++){
  			this._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));
  		}
  	}
  };

  /**
   * mixin will delegate all MicroEvent.js function in the destination object
   *
   * - require('MicroEvent').mixin(Foobar) will make Foobar able to use MicroEvent
   *
   * @param {Object} the object which will support MicroEvent
  */
  MicroEvent.mixin	= function(destObject){
  	var props	= ['bind', 'unbind', 'trigger'];
  	for(var i = 0; i < props.length; i ++){
  		destObject.prototype[props[i]]	= MicroEvent.prototype[props[i]];
  	}
  };

  // export in common js
  if( 'object' !== "undefined" && ('exports' in module)){
  	module.exports	= MicroEvent;
  }
  });

  var Config,
      MicroEvent,
      indexOf = [].indexOf;
  MicroEvent = microevent;

  Config = Config = function () {
    var Config =
    /*#__PURE__*/
    function () {
      function Config() {
        _classCallCheck(this, Config);

        this.attrs = {};
        return;
      }

      _createClass(Config, [{
        key: "set",
        value: function set() {
          var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var changedAttributes, key, value;
          changedAttributes = {};

          for (key in config) {
            value = config[key];

            if (indexOf.call(this.keys, key) >= 0) {
              this.attrs[key] = value;
              changedAttributes[key] = value;
            }
          }

          this.trigger('change', changedAttributes);
        }
      }, {
        key: "get",
        value: function get(option) {
          return this.attrs[option];
        }
      }]);

      return Config;
    }();

    
    Config.prototype.keys = ['appVersion', 'appKey', 'appSecret', 'authToken', 'eventTracker', 'locale', 'coreSessionToken', 'coreSessionClientId', 'coreUrl', 'graphUrl', 'eventsTrackUrl', 'eventsPulseUrl', 'assetsFileUploadUrl'];
    return Config;
  }.call(commonjsGlobal);

  MicroEvent.mixin(Config);
  var config = Config;

  var mustache = createCommonjsModule(function (module, exports) {
  /*!
   * mustache.js - Logic-less {{mustache}} templates with JavaScript
   * http://github.com/janl/mustache.js
   */

  /*global define: false Mustache: true*/

  (function defineMustache (global, factory) {
    if ('object' === 'object' && exports && typeof exports.nodeName !== 'string') {
      factory(exports); // CommonJS
    } else if (typeof undefined === 'function' && undefined.amd) {
      undefined(['exports'], factory); // AMD
    } else {
      global.Mustache = {};
      factory(global.Mustache); // script, wsh, asp
    }
  }(commonjsGlobal, function mustacheFactory (mustache) {

    var objectToString = Object.prototype.toString;
    var isArray = Array.isArray || function isArrayPolyfill (object) {
      return objectToString.call(object) === '[object Array]';
    };

    function isFunction (object) {
      return typeof object === 'function';
    }

    /**
     * More correct typeof string handling array
     * which normally returns typeof 'object'
     */
    function typeStr (obj) {
      return isArray(obj) ? 'array' : typeof obj;
    }

    function escapeRegExp (string) {
      return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
    }

    /**
     * Null safe way of checking whether or not an object,
     * including its prototype, has a given property
     */
    function hasProperty (obj, propName) {
      return obj != null && typeof obj === 'object' && (propName in obj);
    }

    /**
     * Safe way of detecting whether or not the given thing is a primitive and
     * whether it has the given property
     */
    function primitiveHasOwnProperty (primitive, propName) {  
      return (
        primitive != null
        && typeof primitive !== 'object'
        && primitive.hasOwnProperty
        && primitive.hasOwnProperty(propName)
      );
    }

    // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
    // See https://github.com/janl/mustache.js/issues/189
    var regExpTest = RegExp.prototype.test;
    function testRegExp (re, string) {
      return regExpTest.call(re, string);
    }

    var nonSpaceRe = /\S/;
    function isWhitespace (string) {
      return !testRegExp(nonSpaceRe, string);
    }

    var entityMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;',
      '/': '&#x2F;',
      '`': '&#x60;',
      '=': '&#x3D;'
    };

    function escapeHtml (string) {
      return String(string).replace(/[&<>"'`=\/]/g, function fromEntityMap (s) {
        return entityMap[s];
      });
    }

    var whiteRe = /\s*/;
    var spaceRe = /\s+/;
    var equalsRe = /\s*=/;
    var curlyRe = /\s*\}/;
    var tagRe = /#|\^|\/|>|\{|&|=|!/;

    /**
     * Breaks up the given `template` string into a tree of tokens. If the `tags`
     * argument is given here it must be an array with two string values: the
     * opening and closing tags used in the template (e.g. [ "<%", "%>" ]). Of
     * course, the default is to use mustaches (i.e. mustache.tags).
     *
     * A token is an array with at least 4 elements. The first element is the
     * mustache symbol that was used inside the tag, e.g. "#" or "&". If the tag
     * did not contain a symbol (i.e. {{myValue}}) this element is "name". For
     * all text that appears outside a symbol this element is "text".
     *
     * The second element of a token is its "value". For mustache tags this is
     * whatever else was inside the tag besides the opening symbol. For text tokens
     * this is the text itself.
     *
     * The third and fourth elements of the token are the start and end indices,
     * respectively, of the token in the original template.
     *
     * Tokens that are the root node of a subtree contain two more elements: 1) an
     * array of tokens in the subtree and 2) the index in the original template at
     * which the closing tag for that section begins.
     */
    function parseTemplate (template, tags) {
      if (!template)
        return [];

      var sections = [];     // Stack to hold section tokens
      var tokens = [];       // Buffer to hold the tokens
      var spaces = [];       // Indices of whitespace tokens on the current line
      var hasTag = false;    // Is there a {{tag}} on the current line?
      var nonSpace = false;  // Is there a non-space char on the current line?

      // Strips all whitespace tokens array for the current line
      // if there was a {{#tag}} on it and otherwise only space.
      function stripSpace () {
        if (hasTag && !nonSpace) {
          while (spaces.length)
            delete tokens[spaces.pop()];
        } else {
          spaces = [];
        }

        hasTag = false;
        nonSpace = false;
      }

      var openingTagRe, closingTagRe, closingCurlyRe;
      function compileTags (tagsToCompile) {
        if (typeof tagsToCompile === 'string')
          tagsToCompile = tagsToCompile.split(spaceRe, 2);

        if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)
          throw new Error('Invalid tags: ' + tagsToCompile);

        openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\s*');
        closingTagRe = new RegExp('\\s*' + escapeRegExp(tagsToCompile[1]));
        closingCurlyRe = new RegExp('\\s*' + escapeRegExp('}' + tagsToCompile[1]));
      }

      compileTags(tags || mustache.tags);

      var scanner = new Scanner(template);

      var start, type, value, chr, token, openSection;
      while (!scanner.eos()) {
        start = scanner.pos;

        // Match any text between tags.
        value = scanner.scanUntil(openingTagRe);

        if (value) {
          for (var i = 0, valueLength = value.length; i < valueLength; ++i) {
            chr = value.charAt(i);

            if (isWhitespace(chr)) {
              spaces.push(tokens.length);
            } else {
              nonSpace = true;
            }

            tokens.push([ 'text', chr, start, start + 1 ]);
            start += 1;

            // Check for whitespace on the current line.
            if (chr === '\n')
              stripSpace();
          }
        }

        // Match the opening tag.
        if (!scanner.scan(openingTagRe))
          break;

        hasTag = true;

        // Get the tag type.
        type = scanner.scan(tagRe) || 'name';
        scanner.scan(whiteRe);

        // Get the tag value.
        if (type === '=') {
          value = scanner.scanUntil(equalsRe);
          scanner.scan(equalsRe);
          scanner.scanUntil(closingTagRe);
        } else if (type === '{') {
          value = scanner.scanUntil(closingCurlyRe);
          scanner.scan(curlyRe);
          scanner.scanUntil(closingTagRe);
          type = '&';
        } else {
          value = scanner.scanUntil(closingTagRe);
        }

        // Match the closing tag.
        if (!scanner.scan(closingTagRe))
          throw new Error('Unclosed tag at ' + scanner.pos);

        token = [ type, value, start, scanner.pos ];
        tokens.push(token);

        if (type === '#' || type === '^') {
          sections.push(token);
        } else if (type === '/') {
          // Check section nesting.
          openSection = sections.pop();

          if (!openSection)
            throw new Error('Unopened section "' + value + '" at ' + start);

          if (openSection[1] !== value)
            throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
        } else if (type === 'name' || type === '{' || type === '&') {
          nonSpace = true;
        } else if (type === '=') {
          // Set the tags for the next time around.
          compileTags(value);
        }
      }

      // Make sure there are no open sections when we're done.
      openSection = sections.pop();

      if (openSection)
        throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);

      return nestTokens(squashTokens(tokens));
    }

    /**
     * Combines the values of consecutive text tokens in the given `tokens` array
     * to a single token.
     */
    function squashTokens (tokens) {
      var squashedTokens = [];

      var token, lastToken;
      for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
        token = tokens[i];

        if (token) {
          if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {
            lastToken[1] += token[1];
            lastToken[3] = token[3];
          } else {
            squashedTokens.push(token);
            lastToken = token;
          }
        }
      }

      return squashedTokens;
    }

    /**
     * Forms the given array of `tokens` into a nested tree structure where
     * tokens that represent a section have two additional items: 1) an array of
     * all tokens that appear in that section and 2) the index in the original
     * template that represents the end of that section.
     */
    function nestTokens (tokens) {
      var nestedTokens = [];
      var collector = nestedTokens;
      var sections = [];

      var token, section;
      for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
        token = tokens[i];

        switch (token[0]) {
          case '#':
          case '^':
            collector.push(token);
            sections.push(token);
            collector = token[4] = [];
            break;
          case '/':
            section = sections.pop();
            section[5] = token[2];
            collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
            break;
          default:
            collector.push(token);
        }
      }

      return nestedTokens;
    }

    /**
     * A simple string scanner that is used by the template parser to find
     * tokens in template strings.
     */
    function Scanner (string) {
      this.string = string;
      this.tail = string;
      this.pos = 0;
    }

    /**
     * Returns `true` if the tail is empty (end of string).
     */
    Scanner.prototype.eos = function eos () {
      return this.tail === '';
    };

    /**
     * Tries to match the given regular expression at the current position.
     * Returns the matched text if it can match, the empty string otherwise.
     */
    Scanner.prototype.scan = function scan (re) {
      var match = this.tail.match(re);

      if (!match || match.index !== 0)
        return '';

      var string = match[0];

      this.tail = this.tail.substring(string.length);
      this.pos += string.length;

      return string;
    };

    /**
     * Skips all text until the given regular expression can be matched. Returns
     * the skipped string, which is the entire tail if no match can be made.
     */
    Scanner.prototype.scanUntil = function scanUntil (re) {
      var index = this.tail.search(re), match;

      switch (index) {
        case -1:
          match = this.tail;
          this.tail = '';
          break;
        case 0:
          match = '';
          break;
        default:
          match = this.tail.substring(0, index);
          this.tail = this.tail.substring(index);
      }

      this.pos += match.length;

      return match;
    };

    /**
     * Represents a rendering context by wrapping a view object and
     * maintaining a reference to the parent context.
     */
    function Context (view, parentContext) {
      this.view = view;
      this.cache = { '.': this.view };
      this.parent = parentContext;
    }

    /**
     * Creates a new context using the given view with this context
     * as the parent.
     */
    Context.prototype.push = function push (view) {
      return new Context(view, this);
    };

    /**
     * Returns the value of the given name in this context, traversing
     * up the context hierarchy if the value is absent in this context's view.
     */
    Context.prototype.lookup = function lookup (name) {
      var cache = this.cache;

      var value;
      if (cache.hasOwnProperty(name)) {
        value = cache[name];
      } else {
        var context = this, intermediateValue, names, index, lookupHit = false;

        while (context) {
          if (name.indexOf('.') > 0) {
            intermediateValue = context.view;
            names = name.split('.');
            index = 0;

            /**
             * Using the dot notion path in `name`, we descend through the
             * nested objects.
             *
             * To be certain that the lookup has been successful, we have to
             * check if the last object in the path actually has the property
             * we are looking for. We store the result in `lookupHit`.
             *
             * This is specially necessary for when the value has been set to
             * `undefined` and we want to avoid looking up parent contexts.
             *
             * In the case where dot notation is used, we consider the lookup
             * to be successful even if the last "object" in the path is
             * not actually an object but a primitive (e.g., a string, or an
             * integer), because it is sometimes useful to access a property
             * of an autoboxed primitive, such as the length of a string.
             **/
            while (intermediateValue != null && index < names.length) {
              if (index === names.length - 1)
                lookupHit = (
                  hasProperty(intermediateValue, names[index]) 
                  || primitiveHasOwnProperty(intermediateValue, names[index])
                );

              intermediateValue = intermediateValue[names[index++]];
            }
          } else {
            intermediateValue = context.view[name];

            /**
             * Only checking against `hasProperty`, which always returns `false` if
             * `context.view` is not an object. Deliberately omitting the check
             * against `primitiveHasOwnProperty` if dot notation is not used.
             *
             * Consider this example:
             * ```
             * Mustache.render("The length of a football field is {{#length}}{{length}}{{/length}}.", {length: "100 yards"})
             * ```
             *
             * If we were to check also against `primitiveHasOwnProperty`, as we do
             * in the dot notation case, then render call would return:
             *
             * "The length of a football field is 9."
             *
             * rather than the expected:
             *
             * "The length of a football field is 100 yards."
             **/
            lookupHit = hasProperty(context.view, name);
          }

          if (lookupHit) {
            value = intermediateValue;
            break;
          }

          context = context.parent;
        }

        cache[name] = value;
      }

      if (isFunction(value))
        value = value.call(this.view);

      return value;
    };

    /**
     * A Writer knows how to take a stream of tokens and render them to a
     * string, given a context. It also maintains a cache of templates to
     * avoid the need to parse the same template twice.
     */
    function Writer () {
      this.cache = {};
    }

    /**
     * Clears all cached templates in this writer.
     */
    Writer.prototype.clearCache = function clearCache () {
      this.cache = {};
    };

    /**
     * Parses and caches the given `template` according to the given `tags` or
     * `mustache.tags` if `tags` is omitted,  and returns the array of tokens
     * that is generated from the parse.
     */
    Writer.prototype.parse = function parse (template, tags) {
      var cache = this.cache;
      var cacheKey = template + ':' + (tags || mustache.tags).join(':');
      var tokens = cache[cacheKey];

      if (tokens == null)
        tokens = cache[cacheKey] = parseTemplate(template, tags);

      return tokens;
    };

    /**
     * High-level method that is used to render the given `template` with
     * the given `view`.
     *
     * The optional `partials` argument may be an object that contains the
     * names and templates of partials that are used in the template. It may
     * also be a function that is used to load partial templates on the fly
     * that takes a single argument: the name of the partial.
     *
     * If the optional `tags` argument is given here it must be an array with two
     * string values: the opening and closing tags used in the template (e.g.
     * [ "<%", "%>" ]). The default is to mustache.tags.
     */
    Writer.prototype.render = function render (template, view, partials, tags) {
      var tokens = this.parse(template, tags);
      var context = (view instanceof Context) ? view : new Context(view);
      return this.renderTokens(tokens, context, partials, template, tags);
    };

    /**
     * Low-level method that renders the given array of `tokens` using
     * the given `context` and `partials`.
     *
     * Note: The `originalTemplate` is only ever used to extract the portion
     * of the original template that was contained in a higher-order section.
     * If the template doesn't use higher-order sections, this argument may
     * be omitted.
     */
    Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, tags) {
      var buffer = '';

      var token, symbol, value;
      for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
        value = undefined;
        token = tokens[i];
        symbol = token[0];

        if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);
        else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);
        else if (symbol === '>') value = this.renderPartial(token, context, partials, tags);
        else if (symbol === '&') value = this.unescapedValue(token, context);
        else if (symbol === 'name') value = this.escapedValue(token, context);
        else if (symbol === 'text') value = this.rawValue(token);

        if (value !== undefined)
          buffer += value;
      }

      return buffer;
    };

    Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {
      var self = this;
      var buffer = '';
      var value = context.lookup(token[1]);

      // This function is used to render an arbitrary template
      // in the current context by higher-order sections.
      function subRender (template) {
        return self.render(template, context, partials);
      }

      if (!value) return;

      if (isArray(value)) {
        for (var j = 0, valueLength = value.length; j < valueLength; ++j) {
          buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);
        }
      } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {
        buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);
      } else if (isFunction(value)) {
        if (typeof originalTemplate !== 'string')
          throw new Error('Cannot use higher-order sections without the original template');

        // Extract the portion of the original template that the section contains.
        value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);

        if (value != null)
          buffer += value;
      } else {
        buffer += this.renderTokens(token[4], context, partials, originalTemplate);
      }
      return buffer;
    };

    Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {
      var value = context.lookup(token[1]);

      // Use JavaScript's definition of falsy. Include empty arrays.
      // See https://github.com/janl/mustache.js/issues/186
      if (!value || (isArray(value) && value.length === 0))
        return this.renderTokens(token[4], context, partials, originalTemplate);
    };

    Writer.prototype.renderPartial = function renderPartial (token, context, partials, tags) {
      if (!partials) return;

      var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];
      if (value != null)
        return this.renderTokens(this.parse(value, tags), context, partials, value);
    };

    Writer.prototype.unescapedValue = function unescapedValue (token, context) {
      var value = context.lookup(token[1]);
      if (value != null)
        return value;
    };

    Writer.prototype.escapedValue = function escapedValue (token, context) {
      var value = context.lookup(token[1]);
      if (value != null)
        return mustache.escape(value);
    };

    Writer.prototype.rawValue = function rawValue (token) {
      return token[1];
    };

    mustache.name = 'mustache.js';
    mustache.version = '3.0.1';
    mustache.tags = [ '{{', '}}' ];

    // All high-level mustache.* functions use this writer.
    var defaultWriter = new Writer();

    /**
     * Clears all cached templates in the default writer.
     */
    mustache.clearCache = function clearCache () {
      return defaultWriter.clearCache();
    };

    /**
     * Parses and caches the given template in the default writer and returns the
     * array of tokens it contains. Doing this ahead of time avoids the need to
     * parse templates on the fly as they are rendered.
     */
    mustache.parse = function parse (template, tags) {
      return defaultWriter.parse(template, tags);
    };

    /**
     * Renders the `template` with the given `view` and `partials` using the
     * default writer. If the optional `tags` argument is given here it must be an
     * array with two string values: the opening and closing tags used in the
     * template (e.g. [ "<%", "%>" ]). The default is to mustache.tags.
     */
    mustache.render = function render (template, view, partials, tags) {
      if (typeof template !== 'string') {
        throw new TypeError('Invalid template! Template should be a "string" ' +
                            'but "' + typeStr(template) + '" was given as the first ' +
                            'argument for mustache#render(template, view, partials)');
      }

      return defaultWriter.render(template, view, partials, tags);
    };

    // This is here for backwards compatibility with 0.4.x.,
    /*eslint-disable */ // eslint wants camel cased function name
    mustache.to_html = function to_html (template, view, partials, send) {
      /*eslint-enable*/

      var result = mustache.render(template, view, partials);

      if (isFunction(send)) {
        send(result);
      } else {
        return result;
      }
    };

    // Export the escaping function so that the user may override it.
    // See https://github.com/janl/mustache.js/issues/244
    mustache.escape = escapeHtml;

    // Export these mainly for testing, but also for advanced usage.
    mustache.Scanner = Scanner;
    mustache.Context = Context;
    mustache.Writer = Writer;

    return mustache;
  }));
  });

  var Mustache, pairs;
  Mustache = mustache;
  pairs = {
    'paged_publication.hotspot_picker.header': 'Which offer did you mean?',
    'incito_publication.product_picker.header': 'Which product?'
  };
  var translations = {
    t: function t(key, view) {
      var ref, template;
      template = (ref = pairs[key]) != null ? ref : '';
      return Mustache.render(template, view);
    },
    update: function update(translations) {
      var key, value;

      for (key in translations) {
        value = translations[key];
        pairs[key] = value;
      }
    }
  };
  var translations_1 = translations.t;
  var translations_2 = translations.update;

  var Config$1, config$1, translations$1, util$1;
  Config$1 = config;
  translations$1 = translations;
  util$1 = util_1;
  config$1 = new Config$1(); // Set default values.

  config$1.set({
    locale: 'en_US',
    coreUrl: 'https://api.etilbudsavis.dk',
    graphUrl: 'https://graph.service.shopgun.com',
    eventsTrackUrl: 'https://events.service.shopgun.com/sync',
    eventsPulseUrl: 'wss://events.service.shopgun.com/pulse',
    assetsFileUploadUrl: 'https://assets.service.shopgun.com/upload'
  });
  var core = {
    config: config$1,
    translations: translations$1,
    util: util$1
  };
  var core_1 = core.config;
  var core_2 = core.translations;
  var core_3 = core.util;

  var sgn = core;

  var SGN$1, prefixKey;
  SGN$1 = sgn;
  prefixKey = 'sgn-';
  var clientLocal = {
    key: 'sgn-',
    storage: function () {
      var storage;

      try {
        storage = window.localStorage;
        storage["".concat(prefixKey, "test-storage")] = 'foobar';
        delete storage["".concat(prefixKey, "test-storage")];
        return storage;
      } catch (error) {
        return {};
      }
    }(),
    get: function get(key) {
      try {
        return JSON.parse(this.storage["".concat(prefixKey).concat(key)]);
      } catch (error) {}
    },
    set: function set(key, value) {
      try {
        this.storage["".concat(prefixKey).concat(key)] = JSON.stringify(value);
      } catch (error) {}

      return this;
    }
  };
  var clientLocal_1 = clientLocal.key;
  var clientLocal_2 = clientLocal.storage;
  var clientLocal_3 = clientLocal.get;
  var clientLocal_4 = clientLocal.set;

  var SGN$2, prefixKey$1;
  SGN$2 = sgn;
  prefixKey$1 = 'sgn-';
  var clientSession = {
    key: 'sgn-',
    storage: function () {
      var storage;

      try {
        storage = window.sessionStorage;
        storage["".concat(prefixKey$1, "test-storage")] = 'foobar';
        delete storage["".concat(prefixKey$1, "test-storage")];
        return storage;
      } catch (error) {
        return {};
      }
    }(),
    get: function get(key) {
      try {
        return JSON.parse(this.storage["".concat(prefixKey$1).concat(key)]);
      } catch (error) {}
    },
    set: function set(key, value) {
      try {
        this.storage["".concat(prefixKey$1).concat(key)] = JSON.stringify(value);
      } catch (error) {}

      return this;
    }
  };
  var clientSession_1 = clientSession.key;
  var clientSession_2 = clientSession.storage;
  var clientSession_3 = clientSession.get;
  var clientSession_4 = clientSession.set;

  'use strict';








  var $min = Math.min;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX$1 = 'lastIndex';

  // eslint-disable-next-line no-empty
  var SUPPORTS_Y = !!(function () { try { return new RegExp('x', 'y'); } catch (e) {} })();

  // @@split logic
  _fixReWks('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
    var internalSplit = $split;
    if (
      'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
      'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
      'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
      '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
      '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
      ''[$SPLIT](/.?/)[LENGTH]
    ) {
      // based on es5-shim implementation, need to rework it
      internalSplit = function (separator, limit) {
        var string = String(this);
        if (separator === undefined && limit === 0) return [];
        // If `separator` is not a regex, use native split
        if (!_isRegexp(separator)) return $split.call(string, separator, limit);
        var output = [];
        var flags = (separator.ignoreCase ? 'i' : '') +
                    (separator.multiline ? 'm' : '') +
                    (separator.unicode ? 'u' : '') +
                    (separator.sticky ? 'y' : '');
        var lastLastIndex = 0;
        var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
        // Make `global` and avoid `lastIndex` issues by working with a copy
        var separatorCopy = new RegExp(separator.source, flags + 'g');
        var match, lastIndex, lastLength;
        while (match = _regexpExec.call(separatorCopy, string)) {
          lastIndex = separatorCopy[LAST_INDEX$1];
          if (lastIndex > lastLastIndex) {
            output.push(string.slice(lastLastIndex, match.index));
            if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
            lastLength = match[0][LENGTH];
            lastLastIndex = lastIndex;
            if (output[LENGTH] >= splitLimit) break;
          }
          if (separatorCopy[LAST_INDEX$1] === match.index) separatorCopy[LAST_INDEX$1]++; // Avoid an infinite loop
        }
        if (lastLastIndex === string[LENGTH]) {
          if (lastLength || !separatorCopy.test('')) output.push('');
        } else output.push(string.slice(lastLastIndex));
        return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
      };
    // Chakra, V8
    } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
      internalSplit = function (separator, limit) {
        return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
      };
    }

    return [
      // `String.prototype.split` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.split
      function split(separator, limit) {
        var O = defined(this);
        var splitter = separator == undefined ? undefined : separator[SPLIT];
        return splitter !== undefined
          ? splitter.call(separator, O, limit)
          : internalSplit.call(String(O), separator, limit);
      },
      // `RegExp.prototype[@@split]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
      //
      // NOTE: This cannot be properly polyfilled in engines that don't support
      // the 'y' flag.
      function (regexp, limit) {
        var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
        if (res.done) return res.value;

        var rx = _anObject(regexp);
        var S = String(this);
        var C = _speciesConstructor(rx, RegExp);

        var unicodeMatching = rx.unicode;
        var flags = (rx.ignoreCase ? 'i' : '') +
                      (rx.multiline ? 'm' : '') +
                      (rx.unicode ? 'u' : '') +
                      (SUPPORTS_Y ? 'y' : 'g');

        // ^(? + rx + ) is needed, in combination with some S slicing, to
        // simulate the 'y' flag.
        var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
        var lim = limit === undefined ? 0xffffffff : limit >>> 0;
        if (lim === 0) return [];
        if (S.length === 0) return _regexpExecAbstract(splitter, S) === null ? [S] : [];
        var p = 0;
        var q = 0;
        var A = [];
        while (q < S.length) {
          splitter.lastIndex = SUPPORTS_Y ? q : 0;
          var z = _regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
          var e;
          if (
            z === null ||
            (e = $min(_toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
          ) {
            q = _advanceStringIndex(S, q, unicodeMatching);
          } else {
            A.push(S.slice(p, q));
            if (A.length === lim) return A;
            for (var i = 1; i <= z.length - 1; i++) {
              A.push(z[i]);
              if (A.length === lim) return A;
            }
            q = p = e;
          }
        }
        A.push(S.slice(p));
        return A;
      }
    ];
  });

  var es6_regexp_split = {

  };

  var SGN$3, prefixKey$2;
  SGN$3 = sgn;
  prefixKey$2 = 'sgn-';
  var clientCookie = {
    get: function get(key) {
      var c, ca, ct, err, i, len, name, value;

      if (SGN$3.util.isNode()) {
        return;
      }

      try {
        name = "".concat(prefixKey$2).concat(key, "=");
        ca = document.cookie.split(';');

        for (i = 0, len = ca.length; i < len; i++) {
          c = ca[i];
          ct = c.trim();

          if (ct.indexOf(name) === 0) {
            value = ct.substring(name.length, ct.length);
          }
        }

        value = JSON.parse(value);
      } catch (error) {
        err = error;
        value = {};
      }

      return value;
    },
    set: function set(key, value) {
      var date, days, err, str;

      if (SGN$3.util.isNode()) {
        return;
      }

      try {
        days = 365;
        date = new Date();
        str = JSON.stringify(value);
        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
        document.cookie = "".concat(prefixKey$2).concat(key, "=").concat(str, ";expires=").concat(date.toUTCString(), ";path=/");
      } catch (error) {
        err = error;
      }
    }
  };
  var clientCookie_1 = clientCookie.get;
  var clientCookie_2 = clientCookie.set;

  var SGN$4;
  SGN$4 = sgn;

  var fileUpload = function fileUpload() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var callback = arguments.length > 1 ? arguments[1] : undefined;
    var progressCallback = arguments.length > 2 ? arguments[2] : undefined;
    var formData, http, timeout, url;

    if (options.file == null) {
      throw new Error('File is not defined');
    }

    url = SGN$4.config.get('assetsFileUploadUrl');
    timeout = 1000 * 60 * 60;
    formData = new FormData();
    http = new XMLHttpRequest();
    formData.append('file', options.file);

    http.onload = function () {
      if (http.status === 200) {
        callback(null, JSON.parse(http.response));
      } else {
        callback(SGN$4.util.error(new Error('Request error'), {
          code: 'RequestError',
          statusCode: data.statusCode
        }));
      }
    };

    http.upload.onprogress = function (e) {
      if (typeof progressCallback === 'function' && e.lengthComputable) {
        progressCallback({
          progress: e.loaded / e.total,
          loaded: e.loaded,
          total: e.total
        });
      }
    };

    http.open('post', url);
    http.timeout = timeout;
    http.setRequestHeader('Accept', 'application/json');
    http.send(formData);
  };

  var assets = {
    fileUpload: fileUpload
  };
  var assets_1 = assets.fileUpload;

  var f$5 = Object.getOwnPropertySymbols;

  var _objectGops = {
  	f: f$5
  };

  'use strict';
  // 19.1.2.1 Object.assign(target, source, ...)





  var $assign = Object.assign;

  // should work with symbols and should have deterministic property order (V8 bug)
  var _objectAssign = !$assign || _fails(function () {
    var A = {};
    var B = {};
    // eslint-disable-next-line no-undef
    var S = Symbol();
    var K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function (k) { B[k] = k; });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
  }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
    var T = _toObject(target);
    var aLen = arguments.length;
    var index = 1;
    var getSymbols = _objectGops.f;
    var isEnum = _objectPie.f;
    while (aLen > index) {
      var S = _iobject(arguments[index++]);
      var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
      var length = keys.length;
      var j = 0;
      var key;
      while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
    } return T;
  } : $assign;

  // 19.1.3.1 Object.assign(target, source)


  _export(_export.S + _export.F, 'Object', { assign: _objectAssign });

  var es6_object_assign = {

  };

  var browserPonyfill = createCommonjsModule(function (module, exports) {
  var __root__ = (function (root) {
  function F() { this.fetch = false; }
  F.prototype = root;
  return new F();
  })(typeof self !== 'undefined' ? self : commonjsGlobal);
  (function(self) {

  var irrelevant = (function (exports) {
    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob:
        'FileReader' in self &&
        'Blob' in self &&
        (function() {
          try {
            new Blob();
            return true
          } catch (e) {
            return false
          }
        })(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };

    function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj)
    }

    if (support.arrayBuffer) {
      var viewClasses = [
        '[object Int8Array]',
        '[object Uint8Array]',
        '[object Uint8ClampedArray]',
        '[object Int16Array]',
        '[object Uint16Array]',
        '[object Int32Array]',
        '[object Uint32Array]',
        '[object Float32Array]',
        '[object Float64Array]'
      ];

      var isArrayBufferView =
        ArrayBuffer.isView ||
        function(obj) {
          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
        };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }
      if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name')
      }
      return name.toLowerCase()
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }
      return value
    }

    // Build a destructive iterator for the value list
    function iteratorFor(items) {
      var iterator = {
        next: function() {
          var value = items.shift();
          return {done: value === undefined, value: value}
        }
      };

      if (support.iterable) {
        iterator[Symbol.iterator] = function() {
          return iterator
        };
      }

      return iterator
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function(value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function(header) {
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function(name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function(name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };

    Headers.prototype['delete'] = function(name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function(name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null
    };

    Headers.prototype.has = function(name) {
      return this.map.hasOwnProperty(normalizeName(name))
    };

    Headers.prototype.set = function(name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };

    Headers.prototype.forEach = function(callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };

    Headers.prototype.keys = function() {
      var items = [];
      this.forEach(function(value, name) {
        items.push(name);
      });
      return iteratorFor(items)
    };

    Headers.prototype.values = function() {
      var items = [];
      this.forEach(function(value) {
        items.push(value);
      });
      return iteratorFor(items)
    };

    Headers.prototype.entries = function() {
      var items = [];
      this.forEach(function(value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items)
    };

    if (support.iterable) {
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'))
      }
      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function(resolve, reject) {
        reader.onload = function() {
          resolve(reader.result);
        };
        reader.onerror = function() {
          reject(reader.error);
        };
      })
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }
      return chars.join('')
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0)
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function(body) {
        this._bodyInit = body;
        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          // IE 10-11 can't handle a DataView body.
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          this._bodyText = body = Object.prototype.toString.call(body);
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function() {
          var rejected = consumed(this);
          if (rejected) {
            return rejected
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob)
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]))
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob')
          } else {
            return Promise.resolve(new Blob([this._bodyText]))
          }
        };

        this.arrayBuffer = function() {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
          } else {
            return this.blob().then(readBlobAsArrayBuffer)
          }
        };
      }

      this.text = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text')
        } else {
          return Promise.resolve(this._bodyText)
        }
      };

      if (support.formData) {
        this.formData = function() {
          return this.text().then(decode)
        };
      }

      this.json = function() {
        return this.text().then(JSON.parse)
      };

      return this
    }

    // HTTP methods whose capitalization should be normalized
    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method
    }

    function Request(input, options) {
      options = options || {};
      var body = options.body;

      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read')
        }
        this.url = input.url;
        this.credentials = input.credentials;
        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }
        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;
        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }

      this.credentials = options.credentials || this.credentials || 'same-origin';
      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }
      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.signal = options.signal || this.signal;
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests')
      }
      this._initBody(body);
    }

    Request.prototype.clone = function() {
      return new Request(this, {body: this._bodyInit})
    };

    function decode(body) {
      var form = new FormData();
      body
        .trim()
        .split('&')
        .forEach(function(bytes) {
          if (bytes) {
            var split = bytes.split('=');
            var name = split.shift().replace(/\+/g, ' ');
            var value = split.join('=').replace(/\+/g, ' ');
            form.append(decodeURIComponent(name), decodeURIComponent(value));
          }
        });
      return form
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
      // https://tools.ietf.org/html/rfc7230#section-3.2
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
      preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = options.status === undefined ? 200 : options.status;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';
      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function() {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      })
    };

    Response.error = function() {
      var response = new Response(null, {status: 0, statusText: ''});
      response.type = 'error';
      return response
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function(url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code')
      }

      return new Response(null, {status: status, headers: {location: url}})
    };

    exports.DOMException = self.DOMException;
    try {
      new exports.DOMException();
    } catch (err) {
      exports.DOMException = function(message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
      };
      exports.DOMException.prototype = Object.create(Error.prototype);
      exports.DOMException.prototype.constructor = exports.DOMException;
    }

    function fetch(input, init) {
      return new Promise(function(resolve, reject) {
        var request = new Request(input, init);

        if (request.signal && request.signal.aborted) {
          return reject(new exports.DOMException('Aborted', 'AbortError'))
        }

        var xhr = new XMLHttpRequest();

        function abortXhr() {
          xhr.abort();
        }

        xhr.onload = function() {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };

        xhr.onerror = function() {
          reject(new TypeError('Network request failed'));
        };

        xhr.ontimeout = function() {
          reject(new TypeError('Network request failed'));
        };

        xhr.onabort = function() {
          reject(new exports.DOMException('Aborted', 'AbortError'));
        };

        xhr.open(request.method, request.url, true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false;
        }

        if ('responseType' in xhr && support.blob) {
          xhr.responseType = 'blob';
        }

        request.headers.forEach(function(value, name) {
          xhr.setRequestHeader(name, value);
        });

        if (request.signal) {
          request.signal.addEventListener('abort', abortXhr);

          xhr.onreadystatechange = function() {
            // DONE (success or failure)
            if (xhr.readyState === 4) {
              request.signal.removeEventListener('abort', abortXhr);
            }
          };
        }

        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      })
    }

    fetch.polyfill = true;

    if (!self.fetch) {
      self.fetch = fetch;
      self.Headers = Headers;
      self.Request = Request;
      self.Response = Response;
    }

    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.fetch = fetch;

    return exports;

  }({}));
  })(__root__);
  delete __root__.fetch.polyfill;
  module.exports = exports = __root__.fetch;
  exports.fetch = __root__.fetch;
  exports.Headers = __root__.Headers;
  exports.Request = __root__.Request;
  exports.Response = __root__.Response;
  // Needed for TypeScript consumers without esModuleInterop.
  exports.default = __root__.fetch;
  });
  var browserPonyfill_1 = browserPonyfill.fetch;
  var browserPonyfill_2 = browserPonyfill.Headers;
  var browserPonyfill_3 = browserPonyfill.Request;
  var browserPonyfill_4 = browserPonyfill.Response;

  var crypt = createCommonjsModule(function (module) {
  (function() {
    var base64map
        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

    crypt = {
      // Bit-wise rotation left
      rotl: function(n, b) {
        return (n << b) | (n >>> (32 - b));
      },

      // Bit-wise rotation right
      rotr: function(n, b) {
        return (n << (32 - b)) | (n >>> b);
      },

      // Swap big-endian to little-endian and vice versa
      endian: function(n) {
        // If number given, swap endian
        if (n.constructor == Number) {
          return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
        }

        // Else, assume array and swap all items
        for (var i = 0; i < n.length; i++)
          n[i] = crypt.endian(n[i]);
        return n;
      },

      // Generate an array of any length of random bytes
      randomBytes: function(n) {
        for (var bytes = []; n > 0; n--)
          bytes.push(Math.floor(Math.random() * 256));
        return bytes;
      },

      // Convert a byte array to big-endian 32-bit words
      bytesToWords: function(bytes) {
        for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
          words[b >>> 5] |= bytes[i] << (24 - b % 32);
        return words;
      },

      // Convert big-endian 32-bit words to a byte array
      wordsToBytes: function(words) {
        for (var bytes = [], b = 0; b < words.length * 32; b += 8)
          bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
        return bytes;
      },

      // Convert a byte array to a hex string
      bytesToHex: function(bytes) {
        for (var hex = [], i = 0; i < bytes.length; i++) {
          hex.push((bytes[i] >>> 4).toString(16));
          hex.push((bytes[i] & 0xF).toString(16));
        }
        return hex.join('');
      },

      // Convert a hex string to a byte array
      hexToBytes: function(hex) {
        for (var bytes = [], c = 0; c < hex.length; c += 2)
          bytes.push(parseInt(hex.substr(c, 2), 16));
        return bytes;
      },

      // Convert a byte array to a base-64 string
      bytesToBase64: function(bytes) {
        for (var base64 = [], i = 0; i < bytes.length; i += 3) {
          var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
          for (var j = 0; j < 4; j++)
            if (i * 8 + j * 6 <= bytes.length * 8)
              base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
            else
              base64.push('=');
        }
        return base64.join('');
      },

      // Convert a base-64 string to a byte array
      base64ToBytes: function(base64) {
        // Remove non-base-64 characters
        base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

        for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
            imod4 = ++i % 4) {
          if (imod4 == 0) continue;
          bytes.push(((base64map.indexOf(base64.charAt(i - 1))
              & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
              | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
        }
        return bytes;
      }
    };

    module.exports = crypt;
  })();
  });

  var charenc = {
    // UTF-8 encoding
    utf8: {
      // Convert a string to a byte array
      stringToBytes: function(str) {
        return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
      },

      // Convert a byte array to a string
      bytesToString: function(bytes) {
        return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
      }
    },

    // Binary encoding
    bin: {
      // Convert a string to a byte array
      stringToBytes: function(str) {
        for (var bytes = [], i = 0; i < str.length; i++)
          bytes.push(str.charCodeAt(i) & 0xFF);
        return bytes;
      },

      // Convert a byte array to a string
      bytesToString: function(bytes) {
        for (var str = [], i = 0; i < bytes.length; i++)
          str.push(String.fromCharCode(bytes[i]));
        return str.join('');
      }
    }
  };

  var charenc_1 = charenc;

  /*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */

  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  var isBuffer_1 = function (obj) {
    return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
  };

  function isBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
  }

  var md5 = createCommonjsModule(function (module) {
  (function(){
    var crypt$$1 = crypt,
        utf8 = charenc_1.utf8,
        isBuffer = isBuffer_1,
        bin = charenc_1.bin,

    // The core
    md5 = function (message, options) {
      // Convert to byte array
      if (message.constructor == String)
        if (options && options.encoding === 'binary')
          message = bin.stringToBytes(message);
        else
          message = utf8.stringToBytes(message);
      else if (isBuffer(message))
        message = Array.prototype.slice.call(message, 0);
      else if (!Array.isArray(message))
        message = message.toString();
      // else, assume byte array already

      var m = crypt$$1.bytesToWords(message),
          l = message.length * 8,
          a =  1732584193,
          b = -271733879,
          c = -1732584194,
          d =  271733878;

      // Swap endian
      for (var i = 0; i < m.length; i++) {
        m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
               ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
      }

      // Padding
      m[l >>> 5] |= 0x80 << (l % 32);
      m[(((l + 64) >>> 9) << 4) + 14] = l;

      // Method shortcuts
      var FF = md5._ff,
          GG = md5._gg,
          HH = md5._hh,
          II = md5._ii;

      for (var i = 0; i < m.length; i += 16) {

        var aa = a,
            bb = b,
            cc = c,
            dd = d;

        a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
        d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
        c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
        b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
        a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
        d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
        c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
        b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
        a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
        d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
        c = FF(c, d, a, b, m[i+10], 17, -42063);
        b = FF(b, c, d, a, m[i+11], 22, -1990404162);
        a = FF(a, b, c, d, m[i+12],  7,  1804603682);
        d = FF(d, a, b, c, m[i+13], 12, -40341101);
        c = FF(c, d, a, b, m[i+14], 17, -1502002290);
        b = FF(b, c, d, a, m[i+15], 22,  1236535329);

        a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
        d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
        c = GG(c, d, a, b, m[i+11], 14,  643717713);
        b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
        a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
        d = GG(d, a, b, c, m[i+10],  9,  38016083);
        c = GG(c, d, a, b, m[i+15], 14, -660478335);
        b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
        a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
        d = GG(d, a, b, c, m[i+14],  9, -1019803690);
        c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
        b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
        a = GG(a, b, c, d, m[i+13],  5, -1444681467);
        d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
        c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
        b = GG(b, c, d, a, m[i+12], 20, -1926607734);

        a = HH(a, b, c, d, m[i+ 5],  4, -378558);
        d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
        c = HH(c, d, a, b, m[i+11], 16,  1839030562);
        b = HH(b, c, d, a, m[i+14], 23, -35309556);
        a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
        d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
        c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
        b = HH(b, c, d, a, m[i+10], 23, -1094730640);
        a = HH(a, b, c, d, m[i+13],  4,  681279174);
        d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
        c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
        b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
        a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
        d = HH(d, a, b, c, m[i+12], 11, -421815835);
        c = HH(c, d, a, b, m[i+15], 16,  530742520);
        b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

        a = II(a, b, c, d, m[i+ 0],  6, -198630844);
        d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
        c = II(c, d, a, b, m[i+14], 15, -1416354905);
        b = II(b, c, d, a, m[i+ 5], 21, -57434055);
        a = II(a, b, c, d, m[i+12],  6,  1700485571);
        d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
        c = II(c, d, a, b, m[i+10], 15, -1051523);
        b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
        a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
        d = II(d, a, b, c, m[i+15], 10, -30611744);
        c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
        b = II(b, c, d, a, m[i+13], 21,  1309151649);
        a = II(a, b, c, d, m[i+ 4],  6, -145523070);
        d = II(d, a, b, c, m[i+11], 10, -1120210379);
        c = II(c, d, a, b, m[i+ 2], 15,  718787259);
        b = II(b, c, d, a, m[i+ 9], 21, -343485551);

        a = (a + aa) >>> 0;
        b = (b + bb) >>> 0;
        c = (c + cc) >>> 0;
        d = (d + dd) >>> 0;
      }

      return crypt$$1.endian([a, b, c, d]);
    };

    // Auxiliary functions
    md5._ff  = function (a, b, c, d, x, s, t) {
      var n = a + (b & c | ~b & d) + (x >>> 0) + t;
      return ((n << s) | (n >>> (32 - s))) + b;
    };
    md5._gg  = function (a, b, c, d, x, s, t) {
      var n = a + (b & d | c & ~d) + (x >>> 0) + t;
      return ((n << s) | (n >>> (32 - s))) + b;
    };
    md5._hh  = function (a, b, c, d, x, s, t) {
      var n = a + (b ^ c ^ d) + (x >>> 0) + t;
      return ((n << s) | (n >>> (32 - s))) + b;
    };
    md5._ii  = function (a, b, c, d, x, s, t) {
      var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
      return ((n << s) | (n >>> (32 - s))) + b;
    };

    // Package private blocksize
    md5._blocksize = 16;
    md5._digestsize = 16;

    module.exports = function (message, options) {
      if (message === undefined || message === null)
        throw new Error('Illegal argument ' + message);

      var digestbytes = crypt$$1.wordsToBytes(md5(message, options));
      return options && options.asBytes ? digestbytes :
          options && options.asString ? bin.bytesToString(digestbytes) :
          crypt$$1.bytesToHex(digestbytes);
    };

  })();
  });

  var SGN$5, Tracker, _dispatch, clientLocalStorage, dispatch, dispatchLimit, dispatching, fetch, getPool, md5$1, pool, ship;

  fetch = browserPonyfill;
  md5$1 = md5;
  SGN$5 = sgn;
  clientLocalStorage = clientLocal;

  getPool = function getPool() {
    var data;
    data = clientLocalStorage.get('event-tracker-pool');

    if (Array.isArray(data) === false) {
      data = [];
    }

    data = data.filter(function (evt) {
      return typeof evt._i === 'string';
    });
    return data;
  };

  pool = getPool();

  var tracker = Tracker = function () {
    var Tracker =
    /*#__PURE__*/
    function () {
      function Tracker() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Tracker);

        var key, ref, value;
        ref = this.defaultOptions;

        for (key in ref) {
          value = ref[key];
          this[key] = options[key] || value;
        }

        this.location = {
          geohash: null,
          time: null,
          country: null
        };
        this.dispatching = false;
        dispatch();
        return;
      }

      _createClass(Tracker, [{
        key: "trackEvent",
        value: function trackEvent(type) {
          var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
          var evt, now;

          if (typeof type !== 'number') {
            throw SGN$5.util.error(new Error('Event type is required'));
          }

          if (this.trackId == null) {
            return;
          }

          if (SGN$5.config.get('appKey') === this.trackId) {
            // coffeelint: disable=max_line_length
            throw SGN$5.util.error(new Error('Track identifier must not be identical to app key. Go to https://business.shopgun.com/developers/apps to get a track identifier for your app'));
          }

          now = new Date().getTime();
          evt = Object.assign({}, properties, {
            '_e': type,
            '_v': version,
            '_i': SGN$5.util.uuid(),
            '_t': Math.round(new Date().getTime() / 1000),
            '_a': this.trackId
          });

          if (this.location.geohash != null) {
            evt['l.h'] = this.location.geohash;
          }

          if (this.location.time != null) {
            evt['l.ht'] = this.location.time;
          }

          if (this.location.country != null) {
            evt['l.c'] = this.location.country;
          }

          pool.push(evt);

          while (pool.length > this.poolLimit) {
            pool.shift();
          }

          dispatch();
          return this;
        }
      }, {
        key: "setLocation",
        value: function setLocation() {
          var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var key, value;

          for (key in location) {
            value = location[key];

            if (this.location.hasOwnProperty(key)) {
              this.location[key] = value;
            }
          }

          return this;
        }
      }, {
        key: "trackPagedPublicationOpened",
        value: function trackPagedPublicationOpened(properties, version) {
          return this.trackEvent(1, properties, version);
        }
      }, {
        key: "trackPagedPublicationPageDisappeared",
        value: function trackPagedPublicationPageDisappeared(properties, version) {
          return this.trackEvent(2, properties, version);
        }
      }, {
        key: "trackOfferOpened",
        value: function trackOfferOpened(properties, version) {
          return this.trackEvent(3, properties, version);
        }
      }, {
        key: "trackClientSessionOpened",
        value: function trackClientSessionOpened(properties, version) {
          return this.trackEvent(4, properties, version);
        }
      }, {
        key: "trackSearched",
        value: function trackSearched(properties, version) {
          return this.trackEvent(5, properties, version);
        }
      }, {
        key: "createViewToken",
        value: function createViewToken() {
          var str, viewToken;

          for (var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++) {
            parts[_key] = arguments[_key];
          }

          str = [SGN$5.client.id].concat(parts).join('');
          viewToken = SGN$5.util.btoa(String.fromCharCode.apply(null, md5$1(str, {
            asBytes: true
          }).slice(0, 8)));
          return viewToken;
        }
      }]);

      return Tracker;
    }();

    
    Tracker.prototype.defaultOptions = {
      trackId: null,
      poolLimit: 1000
    };
    return Tracker;
  }.call(commonjsGlobal);

  dispatching = false;
  dispatchLimit = 100;

  ship = function ship() {
    var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var req;
    req = fetch(SGN$5.config.get('eventsTrackUrl'), {
      method: 'post',
      timeout: 1000 * 20,
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      },
      body: JSON.stringify({
        events: events
      })
    });
    return req.then(function (response) {
      return response.json();
    });
  };

  _dispatch = function _dispatch() {
    var events, nacks;

    if (dispatching === true || pool.length === 0) {
      return;
    }

    events = pool.slice(0, dispatchLimit);
    nacks = 0;
    dispatching = true;
    ship(events).then(function (response) {
      dispatching = false;
      response.events.forEach(function (resEvent) {
        if (resEvent.status === 'validation_error' || resEvent.status === 'ack') {
          pool = pool.filter(function (poolEvent) {
            return poolEvent._i !== resEvent.id;
          });
        } else if ('nack') {
          nacks++;
        }
      });

      if (pool.length >= dispatchLimit && nacks === 0) {
        // Keep dispatching until the pool size reaches a sane level.
        dispatch();
      }
    }).catch(function (err) {
      dispatching = false;
      throw err;
    });
  };

  dispatch = SGN$5.util.throttle(_dispatch, 4000);
  clientLocalStorage.set('event-tracker-pool', []);

  try {
    window.addEventListener('beforeunload', function (e) {
      pool = pool.concat(getPool());
      clientLocalStorage.set('event-tracker-pool', pool);
    }, false);
  } catch (error) {}

  var MicroEvent$1, Pulse;
  MicroEvent$1 = microevent;

  Pulse =
  /*#__PURE__*/
  function () {
    function Pulse() {
      _classCallCheck(this, Pulse);

      this.destroyed = false;
      this.connection = this.connect();
      return;
    }

    _createClass(Pulse, [{
      key: "destroy",
      value: function destroy() {
        this.destroyed = true;
        this.connection.close();
        return this;
      }
    }, {
      key: "connect",
      value: function connect() {
        var connection;
        connection = new WebSocket(SGN.config.get('eventsPulseUrl'));
        connection.onopen = this.onOpen.bind(this);
        connection.onmessage = this.onMessage.bind(this);
        connection.onerror = this.onError.bind(this);
        connection.onclose = this.onClose.bind(this);
        return connection;
      }
    }, {
      key: "onOpen",
      value: function onOpen() {
        this.trigger('open');
      }
    }, {
      key: "onMessage",
      value: function onMessage(e) {
        try {
          this.trigger('event', JSON.parse(e.data));
        } catch (error) {}
      }
    }, {
      key: "onError",
      value: function onError() {}
    }, {
      key: "onClose",
      value: function onClose() {
        var _this = this;

        if (this.destroyed === false) {
          setTimeout(function () {
            _this.connection = _this.connect();
          }, 2000);
        }
      }
    }]);

    return Pulse;
  }();

  MicroEvent$1.mixin(Pulse);
  var pulse = Pulse;

  var events = {
    Tracker: tracker,
    Pulse: pulse
  };
  var events_1 = events.Tracker;
  var events_2 = events.Pulse;

  var SGN$6, fetch$1, parseCookies, promiseCallbackInterop, request;
  fetch$1 = browserPonyfill;
  SGN$6 = sgn;
  promiseCallbackInterop = util_1.promiseCallbackInterop;

  parseCookies = function parseCookies() {
    var cookies = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var parsedCookies;
    parsedCookies = {};
    cookies.map(function (cookie) {
      var key, keyValuePair, parts, value;
      parts = cookie.split('; ');
      keyValuePair = parts[0].split('=');
      key = keyValuePair[0];
      value = keyValuePair[1];
      parsedCookies[key] = value;
    });
    return parsedCookies;
  };

  request = function request() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var callback = arguments.length > 1 ? arguments[1] : undefined;
    var appKey, authToken, authTokenCookieName, timeout, url;
    url = SGN$6.config.get('graphUrl');
    timeout = 1000 * 12;
    appKey = SGN$6.config.get('appKey');
    authToken = SGN$6.config.get('authToken');
    authTokenCookieName = 'shopgun-auth-token';
    options = {
      method: 'post',
      timeout: timeout,
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      },
      body: JSON.stringify({
        query: options.query,
        operationName: options.operationName,
        variables: options.variables
      })
    }; // Set cookies manually in node.js.

    if (SGN$6.util.isNode() && authToken != null) {
      options.cookies = [{
        key: authTokenCookieName,
        value: authToken,
        url: url
      }];
    } else if (SGN$6.util.isBrowser()) {
      options.credentials = 'include';
    }

    fetch$1(url, options).then(function (response) {
      return response.json().then(function (json) {
        var authCookie, cookies, ref; // Update auth token as it might have changed.

        if (SGN$6.util.isNode()) {
          cookies = parseCookies((ref = response.headers) != null ? ref['set-cookie'] : void 0);
          authCookie = cookies[authTokenCookieName];

          if (SGN$6.config.get('authToken') !== authCookie) {
            SGN$6.config.set('authToken', authCookie);
          }
        }

        if (response.status !== 200) {
          return callback(SGN$6.util.error(new Error('Graph API error'), {
            code: 'GraphAPIError',
            statusCode: data.statusCode
          }));
        } else {
          return callback(null, json);
        }
      });
    }).catch(callback);
  };

  var request_1 = promiseCallbackInterop(request, 1);

  var graph = {
    request: request_1
  };
  var graph_1 = graph.request;

  // most Object methods by ES6 should accept primitives



  var _objectSap = function (KEY, exec) {
    var fn = (_core.Object || {})[KEY] || Object[KEY];
    var exp = {};
    exp[KEY] = exec(fn);
    _export(_export.S + _export.F * _fails(function () { fn(1); }), 'Object', exp);
  };

  // 19.1.2.14 Object.keys(O)



  _objectSap('keys', function () {
    return function keys(it) {
      return _objectKeys(_toObject(it));
    };
  });

  var es6_object_keys = {

  };

  var SGN$7, fetch$2, promiseCallbackInterop$1, _request;

  fetch$2 = browserPonyfill;
  SGN$7 = sgn;
  promiseCallbackInterop$1 = util_1.promiseCallbackInterop;

  _request = function request() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var callback = arguments.length > 1 ? arguments[1] : undefined;
    var secondTime = arguments.length > 2 ? arguments[2] : undefined;
    SGN$7.CoreKit.session.ensure(function (err) {
      var appSecret, appVersion, body, geo, headers, json, locale, qs, ref, ref1, ref2, req, token, url;

      if (err != null) {
        return callback(err);
      }

      url = SGN$7.config.get('coreUrl') + ((ref = options.url) != null ? ref : '');
      headers = (ref1 = options.headers) != null ? ref1 : {};
      json = typeof options.json === 'boolean' ? options.json : true;
      token = SGN$7.config.get('coreSessionToken');
      appVersion = SGN$7.config.get('appVersion');
      appSecret = SGN$7.config.get('appSecret');
      locale = SGN$7.config.get('locale');
      qs = (ref2 = options.qs) != null ? ref2 : {};
      geo = options.geolocation;
      body = options.body;
      headers['X-Token'] = token;

      if (appSecret != null) {
        headers['X-Signature'] = SGN$7.CoreKit.session.sign(appSecret, token);
      }

      if (json) {
        headers['Content-Type'] = 'application/json';
        headers['Accept'] = 'application/json';

        if (body) {
          body = JSON.stringify(body);
        }
      }

      if (locale != null) {
        qs.r_locale = locale;
      }

      if (appVersion != null) {
        qs.api_av = appVersion;
      }

      if (geo != null) {
        if (geo.latitude != null && qs.r_lat == null) {
          qs.r_lat = geo.latitude;
        }

        if (geo.longitude != null && qs.r_lng == null) {
          qs.r_lng = geo.longitude;
        }

        if (geo.radius != null && qs.r_radius == null) {
          qs.r_radius = geo.radius;
        }

        if (geo.sensor != null && qs.r_sensor == null) {
          qs.r_sensor = geo.sensor;
        }
      }

      if (Object.keys(qs).length) {
        url += '?' + Object.keys(qs).map(function (k) {
          if (Array.isArray(k)) {
            return qs[k].map(function (val) {
              return "".concat(encodeURIComponent(k), "[]=").concat(encodeURIComponent(val));
            }).join('&');
          }

          return "".concat(encodeURIComponent(k), "=").concat(encodeURIComponent(qs[k]));
        }).join('&');
      }

      req = fetch$2(url, {
        method: options.method,
        body: body,
        headers: headers
      });
      return req.then(function (response) {
        return response.json().then(function (json) {
          var ref3, responseToken;
          token = SGN$7.config.get('coreSessionToken');
          responseToken = response.headers.get('x-token');

          if (responseToken && token !== responseToken) {
            SGN$7.CoreKit.session.saveToken(responseToken);
          }

          if (response.status >= 200 && response.status < 300 || response.status === 304) {
            callback(null, json);
          } else {
            if (secondTime !== true && ((ref3 = json != null ? json.code : void 0) === 1101 || ref3 === 1107 || ref3 === 1108)) {
              SGN$7.config.set({
                coreSessionToken: void 0
              });

              _request(options, callback, true);
            } else {
              callback(SGN$7.util.error(new Error('Core API error'), {
                code: 'CoreAPIError',
                statusCode: response.status
              }), json);
            }
          }
        });
      }).catch(callback);
    });
  };

  var request_1$1 = promiseCallbackInterop$1(_request, 1);

  var convertHex = createCommonjsModule(function (module) {
  !function(globals) {
  'use strict';

  var convertHex = {
    bytesToHex: function(bytes) {
      /*if (typeof bytes.byteLength != 'undefined') {
        var newBytes = []

        if (typeof bytes.buffer != 'undefined')
          bytes = new DataView(bytes.buffer)
        else
          bytes = new DataView(bytes)

        for (var i = 0; i < bytes.byteLength; ++i) {
          newBytes.push(bytes.getUint8(i))
        }
        bytes = newBytes
      }*/
      return arrBytesToHex(bytes)
    },
    hexToBytes: function(hex) {
      if (hex.length % 2 === 1) throw new Error("hexToBytes can't have a string with an odd number of characters.")
      if (hex.indexOf('0x') === 0) hex = hex.slice(2);
      return hex.match(/../g).map(function(x) { return parseInt(x,16) })
    }
  };


  // PRIVATE

  function arrBytesToHex(bytes) {
    return bytes.map(function(x) { return padLeft(x.toString(16),2) }).join('')
  }

  function padLeft(orig, len) {
    if (orig.length > len) return orig
    return Array(len - orig.length + 1).join('0') + orig
  }


  if ('object' !== 'undefined' && module.exports) { //CommonJS
    module.exports = convertHex;
  } else {
    globals.convertHex = convertHex;
  }

  }(commonjsGlobal);
  });

  var convertString = createCommonjsModule(function (module) {
  !function(globals) {
  'use strict';

  var convertString = {
    bytesToString: function(bytes) {
      return bytes.map(function(x){ return String.fromCharCode(x) }).join('')
    },
    stringToBytes: function(str) {
      return str.split('').map(function(x) { return x.charCodeAt(0) })
    }
  };

  //http://hossa.in/2012/07/20/utf-8-in-javascript.html
  convertString.UTF8 = {
     bytesToString: function(bytes) {
      return decodeURIComponent(escape(convertString.bytesToString(bytes)))
    },
    stringToBytes: function(str) {
     return convertString.stringToBytes(unescape(encodeURIComponent(str)))
    }
  };

  if ('object' !== 'undefined' && module.exports) { //CommonJS
    module.exports = convertString;
  } else {
    globals.convertString = convertString;
  }

  }(commonjsGlobal);
  });

  var sha256 = createCommonjsModule(function (module) {
  !function(globals) {
  'use strict';

  var _imports = {};

  if ('object' !== 'undefined' && module.exports) { //CommonJS
    _imports.bytesToHex = convertHex.bytesToHex;
    _imports.convertString = convertString;
    module.exports = sha256;
  } else {
    _imports.bytesToHex = globals.convertHex.bytesToHex;
    _imports.convertString = globals.convertString;
    globals.sha256 = sha256;
  }

  /*
  CryptoJS v3.1.2
  code.google.com/p/crypto-js
  (c) 2009-2013 by Jeff Mott. All rights reserved.
  code.google.com/p/crypto-js/wiki/License
  */

  // Initialization round constants tables
  var K = [];

  // Compute constants
  !function () {
    function isPrime(n) {
      var sqrtN = Math.sqrt(n);
      for (var factor = 2; factor <= sqrtN; factor++) {
        if (!(n % factor)) return false
      }

      return true
    }

    function getFractionalBits(n) {
      return ((n - (n | 0)) * 0x100000000) | 0
    }

    var n = 2;
    var nPrime = 0;
    while (nPrime < 64) {
      if (isPrime(n)) {
        K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
        nPrime++;
      }

      n++;
    }
  }();

  var bytesToWords = function (bytes) {
    var words = [];
    for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
      words[b >>> 5] |= bytes[i] << (24 - b % 32);
    }
    return words
  };

  var wordsToBytes = function (words) {
    var bytes = [];
    for (var b = 0; b < words.length * 32; b += 8) {
      bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
    }
    return bytes
  };

  // Reusable object
  var W = [];

  var processBlock = function (H, M, offset) {
    // Working variables
    var a = H[0], b = H[1], c = H[2], d = H[3];
    var e = H[4], f = H[5], g = H[6], h = H[7];

      // Computation
    for (var i = 0; i < 64; i++) {
      if (i < 16) {
        W[i] = M[offset + i] | 0;
      } else {
        var gamma0x = W[i - 15];
        var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
                      ((gamma0x << 14) | (gamma0x >>> 18)) ^
                      (gamma0x >>> 3);

        var gamma1x = W[i - 2];
        var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
                      ((gamma1x << 13) | (gamma1x >>> 19)) ^
                      (gamma1x >>> 10);

        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
      }

      var ch  = (e & f) ^ (~e & g);
      var maj = (a & b) ^ (a & c) ^ (b & c);

      var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
      var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

      var t1 = h + sigma1 + ch + K[i] + W[i];
      var t2 = sigma0 + maj;

      h = g;
      g = f;
      f = e;
      e = (d + t1) | 0;
      d = c;
      c = b;
      b = a;
      a = (t1 + t2) | 0;
    }

    // Intermediate hash value
    H[0] = (H[0] + a) | 0;
    H[1] = (H[1] + b) | 0;
    H[2] = (H[2] + c) | 0;
    H[3] = (H[3] + d) | 0;
    H[4] = (H[4] + e) | 0;
    H[5] = (H[5] + f) | 0;
    H[6] = (H[6] + g) | 0;
    H[7] = (H[7] + h) | 0;
  };

  function sha256(message, options) {
    if (message.constructor === String) {
      message = _imports.convertString.UTF8.stringToBytes(message);
    }

    var H =[ 0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,
             0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19 ];

    var m = bytesToWords(message);
    var l = message.length * 8;

    m[l >> 5] |= 0x80 << (24 - l % 32);
    m[((l + 64 >> 9) << 4) + 15] = l;

    for (var i=0 ; i<m.length; i += 16) {
      processBlock(H, m, i);
    }

    var digestbytes = wordsToBytes(H);
    return options && options.asBytes ? digestbytes :
           options && options.asString ? _imports.convertString.bytesToString(digestbytes) :
           _imports.bytesToHex(digestbytes)
  }

  sha256.x2 = function(message, options) {
    return sha256(sha256(message, { asBytes:true }), options)
  };

  }(commonjsGlobal);
  });

  var SGN$8, callbackQueue, clientCookieStorage, fetch$3, renewed, session, sha256$1;
  fetch$3 = browserPonyfill;
  sha256$1 = sha256;
  SGN$8 = sgn;
  clientCookieStorage = clientCookie;
  callbackQueue = [];
  renewed = false;
  session = {
    ttl: 1 * 60 * 60 * 24 * 60,
    saveToken: function saveToken(token) {
      if (!token) {
        throw new Error('No token provided for saving');
      }

      SGN$8.config.set({
        coreSessionToken: token
      });
      session.saveCookie();
    },
    saveClientId: function saveClientId(clientId) {
      SGN$8.config.set({
        coreSessionClientId: clientId
      });
      session.saveCookie();
    },
    saveCookie: function saveCookie() {
      clientCookieStorage.set('session', {
        token: SGN$8.config.get('coreSessionToken'),
        client_id: SGN$8.config.get('coreSessionClientId')
      });
    },
    create: function create(callback) {
      var key, req, ttl;
      key = SGN$8.config.get('appKey');
      ttl = session.ttl;
      req = fetch$3(SGN$8.config.get('coreUrl') + "/v2/sessions?api_key=".concat(key, "&token_ttl=").concat(ttl), {
        method: 'post'
      });
      req.then(function (response) {
        return response.json().then(function (json) {
          if (response.status === 201) {
            session.saveToken(json.token);
            session.saveClientId(json.client_id);
            callback(null, json);
          } else {
            callback(new Error('Could not create session'));
          }
        });
      }).catch(function (err) {
        callback(err);
      });
    },
    update: function update(callback) {
      var appSecret, headers, req, token;
      headers = {};
      token = SGN$8.config.get('coreSessionToken');
      appSecret = SGN$8.config.get('appSecret');
      headers['X-Token'] = token;

      if (appSecret != null) {
        headers['X-Signature'] = session.sign(appSecret, token);
      }

      req = fetch$3(SGN$8.config.get('coreUrl') + '/v2/sessions', {
        method: 'put',
        headers: headers
      });
      req.then(function (response) {
        return response.json().then(function (json) {
          if (response.status === 200) {
            session.saveToken(json.token);
            session.saveClientId(json.client_id);
            callback(null, json);
          } else {
            callback(new Error('Could not update session'));
          }
        });
      }).catch(function (err) {
        callback(err);
      });
    },
    renew: function renew(callback) {
      var appSecret, headers, req, token;
      headers = {};
      token = SGN$8.config.get('coreSessionToken');
      appSecret = SGN$8.config.get('appSecret');
      headers['X-Token'] = token;

      if (appSecret) {
        headers['X-Signature'] = session.sign(appSecret, token);
      }

      req = fetch$3(SGN$8.config.get('coreUrl') + '/v2/sessions', {
        method: 'put',
        headers: headers
      });
      req.then(function (response) {
        return response.json().then(function (json) {
          if (response.status === 200) {
            session.saveToken(json.token);
            session.saveClientId(json.client_id);
            callback(null, json);
          } else {
            callback(new Error('Could not renew session'));
          }
        });
      }).catch(function (err) {
        callback(err);
      });
    },
    ensure: function ensure(callback) {
      var complete, queueCount;
      queueCount = callbackQueue.length;

      complete = function complete(err) {
        callbackQueue = callbackQueue.filter(function (fn) {
          fn(err);
          return false;
        });
      };

      callbackQueue.push(callback);

      if (queueCount === 0) {
        if (SGN$8.config.get('coreSessionToken') == null) {
          session.create(complete);
        } else if (renewed === false) {
          renewed = true;
          session.renew(function (err) {
            if (err != null) {
              session.create(complete);
            } else {
              complete();
            }
          });
        } else {
          complete();
        }
      }
    },
    sign: function sign(appSecret, token) {
      return sha256$1([appSecret, token].join(''));
    }
  };
  var session_1 = session;

  var SGN$9, request$1, session$1;
  SGN$9 = sgn;
  request$1 = request_1$1;
  session$1 = session_1;
  var core$1 = {
    request: request$1,
    session: session$1
  };
  var core_1$1 = core$1.request;
  var core_2$1 = core$1.session;

  // 7.2.2 IsArray(argument)

  var _isArray = Array.isArray || function isArray(arg) {
    return _cof(arg) == 'Array';
  };

  var SPECIES$3 = _wks('species');

  var _arraySpeciesConstructor = function (original) {
    var C;
    if (_isArray(original)) {
      C = original.constructor;
      // cross-realm fallback
      if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;
      if (_isObject(C)) {
        C = C[SPECIES$3];
        if (C === null) C = undefined;
      }
    } return C === undefined ? Array : C;
  };

  // 9.4.2.3 ArraySpeciesCreate(originalArray, length)


  var _arraySpeciesCreate = function (original, length) {
    return new (_arraySpeciesConstructor(original))(length);
  };

  // 0 -> Array#forEach
  // 1 -> Array#map
  // 2 -> Array#filter
  // 3 -> Array#some
  // 4 -> Array#every
  // 5 -> Array#find
  // 6 -> Array#findIndex





  var _arrayMethods = function (TYPE, $create) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    var create = $create || _arraySpeciesCreate;
    return function ($this, callbackfn, that) {
      var O = _toObject($this);
      var self = _iobject(O);
      var f = _ctx(callbackfn, that, 3);
      var length = _toLength(self.length);
      var index = 0;
      var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
      var val, res;
      for (;length > index; index++) if (NO_HOLES || index in self) {
        val = self[index];
        res = f(val, index, O);
        if (TYPE) {
          if (IS_MAP) result[index] = res;   // map
          else if (res) switch (TYPE) {
            case 3: return true;             // some
            case 5: return val;              // find
            case 6: return index;            // findIndex
            case 2: result.push(val);        // filter
          } else if (IS_EVERY) return false; // every
        }
      }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
    };
  };

  'use strict';
  // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

  var $find = _arrayMethods(5);
  var KEY = 'find';
  var forced = true;
  // Shouldn't skip holes
  if (KEY in []) Array(1)[KEY](function () { forced = false; });
  _export(_export.P + _export.F * forced, 'Array', {
    find: function find(callbackfn /* , that = undefined */) {
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  _addToUnscopables(KEY);

  var es6_array_find = {

  };

  var verso = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
    'object' === 'object' && 'object' !== 'undefined' ? module.exports = factory() :
    typeof undefined === 'function' && undefined.amd ? undefined(factory) :
    global.verso = factory();
  }(typeof self !== 'undefined' ? self : commonjsGlobal, function () { 'use strict';

    var _isObject = function (it) {
      return typeof it === 'object' ? it !== null : typeof it === 'function';
    };

    var toString = {}.toString;

    var _cof = function (it) {
      return toString.call(it).slice(8, -1);
    };

    function createCommonjsModule$$1(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var _core = createCommonjsModule$$1(function (module) {
    var core = module.exports = { version: '2.6.0' };
    if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
    });
    var _core_1 = _core.version;

    var _global = createCommonjsModule$$1(function (module) {
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global = module.exports = typeof window != 'undefined' && window.Math == Math
      ? window : typeof self != 'undefined' && self.Math == Math ? self
      // eslint-disable-next-line no-new-func
      : Function('return this')();
    if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
    });

    var _library = false;

    var _shared = createCommonjsModule$$1(function (module) {
    var SHARED = '__core-js_shared__';
    var store = _global[SHARED] || (_global[SHARED] = {});

    (module.exports = function (key, value) {
      return store[key] || (store[key] = value !== undefined ? value : {});
    })('versions', []).push({
      version: _core.version,
      mode: 'global',
      copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
    });
    });

    var id = 0;
    var px = Math.random();
    var _uid = function (key) {
      return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
    };

    var _wks = createCommonjsModule$$1(function (module) {
    var store = _shared('wks');

    var Symbol = _global.Symbol;
    var USE_SYMBOL = typeof Symbol == 'function';

    var $exports = module.exports = function (name) {
      return store[name] || (store[name] =
        USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
    };

    $exports.store = store;
    });

    // 7.2.8 IsRegExp(argument)


    var MATCH = _wks('match');
    var _isRegexp = function (it) {
      var isRegExp;
      return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');
    };

    var _anObject = function (it) {
      if (!_isObject(it)) throw TypeError(it + ' is not an object!');
      return it;
    };

    var _aFunction = function (it) {
      if (typeof it != 'function') throw TypeError(it + ' is not a function!');
      return it;
    };

    // 7.3.20 SpeciesConstructor(O, defaultConstructor)


    var SPECIES = _wks('species');
    var _speciesConstructor = function (O, D) {
      var C = _anObject(O).constructor;
      var S;
      return C === undefined || (S = _anObject(C)[SPECIES]) == undefined ? D : _aFunction(S);
    };

    // 7.1.4 ToInteger
    var ceil = Math.ceil;
    var floor = Math.floor;
    var _toInteger = function (it) {
      return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
    };

    // 7.2.1 RequireObjectCoercible(argument)
    var _defined = function (it) {
      if (it == undefined) throw TypeError("Can't call method on  " + it);
      return it;
    };

    // true  -> String#at
    // false -> String#codePointAt
    var _stringAt = function (TO_STRING) {
      return function (that, pos) {
        var s = String(_defined(that));
        var i = _toInteger(pos);
        var l = s.length;
        var a, b;
        if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
        a = s.charCodeAt(i);
        return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
          ? TO_STRING ? s.charAt(i) : a
          : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
      };
    };

    var at = _stringAt(true);

     // `AdvanceStringIndex` abstract operation
    // https://tc39.github.io/ecma262/#sec-advancestringindex
    var _advanceStringIndex = function (S, index, unicode) {
      return index + (unicode ? at(S, index).length : 1);
    };

    // 7.1.15 ToLength

    var min = Math.min;
    var _toLength = function (it) {
      return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
    };

    // getting tag from 19.1.3.6 Object.prototype.toString()

    var TAG = _wks('toStringTag');
    // ES3 wrong here
    var ARG = _cof(function () { return arguments; }()) == 'Arguments';

    // fallback for IE11 Script Access Denied error
    var tryGet = function (it, key) {
      try {
        return it[key];
      } catch (e) { /* empty */ }
    };

    var _classof = function (it) {
      var O, T, B;
      return it === undefined ? 'Undefined' : it === null ? 'Null'
        // @@toStringTag case
        : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
        // builtinTag case
        : ARG ? _cof(O)
        // ES3 arguments fallback
        : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
    };

    var builtinExec = RegExp.prototype.exec;

     // `RegExpExec` abstract operation
    // https://tc39.github.io/ecma262/#sec-regexpexec
    var _regexpExecAbstract = function (R, S) {
      var exec = R.exec;
      if (typeof exec === 'function') {
        var result = exec.call(R, S);
        if (typeof result !== 'object') {
          throw new TypeError('RegExp exec method returned something other than an Object or null');
        }
        return result;
      }
      if (_classof(R) !== 'RegExp') {
        throw new TypeError('RegExp#exec called on incompatible receiver');
      }
      return builtinExec.call(R, S);
    };

    // 21.2.5.3 get RegExp.prototype.flags

    var _flags = function () {
      var that = _anObject(this);
      var result = '';
      if (that.global) result += 'g';
      if (that.ignoreCase) result += 'i';
      if (that.multiline) result += 'm';
      if (that.unicode) result += 'u';
      if (that.sticky) result += 'y';
      return result;
    };

    var nativeExec = RegExp.prototype.exec;
    // This always refers to the native implementation, because the
    // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
    // which loads this file before patching the method.
    var nativeReplace = String.prototype.replace;

    var patchedExec = nativeExec;

    var LAST_INDEX = 'lastIndex';

    var UPDATES_LAST_INDEX_WRONG = (function () {
      var re1 = /a/,
          re2 = /b*/g;
      nativeExec.call(re1, 'a');
      nativeExec.call(re2, 'a');
      return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
    })();

    // nonparticipating capturing group, copied from es5-shim's String#split patch.
    var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

    var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

    if (PATCH) {
      patchedExec = function exec(str) {
        var re = this;
        var lastIndex, reCopy, match, i;

        if (NPCG_INCLUDED) {
          reCopy = new RegExp('^' + re.source + '$(?!\\s)', _flags.call(re));
        }
        if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

        match = nativeExec.call(re, str);

        if (UPDATES_LAST_INDEX_WRONG && match) {
          re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
        }
        if (NPCG_INCLUDED && match && match.length > 1) {
          // Fix browsers whose `exec` methods don't consistently return `undefined`
          // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
          // eslint-disable-next-line no-loop-func
          nativeReplace.call(match[0], reCopy, function () {
            for (i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undefined) match[i] = undefined;
            }
          });
        }

        return match;
      };
    }

    var _regexpExec = patchedExec;

    var _fails = function (exec) {
      try {
        return !!exec();
      } catch (e) {
        return true;
      }
    };

    // Thank's IE8 for his funny defineProperty
    var _descriptors = !_fails(function () {
      return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
    });

    var document$1 = _global.document;
    // typeof document.createElement is 'object' in old IE
    var is = _isObject(document$1) && _isObject(document$1.createElement);
    var _domCreate = function (it) {
      return is ? document$1.createElement(it) : {};
    };

    var _ie8DomDefine = !_descriptors && !_fails(function () {
      return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
    });

    // 7.1.1 ToPrimitive(input [, PreferredType])

    // instead of the ES6 spec version, we didn't implement @@toPrimitive case
    // and the second argument - flag - preferred type is a string
    var _toPrimitive = function (it, S) {
      if (!_isObject(it)) return it;
      var fn, val;
      if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
      if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
      if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
      throw TypeError("Can't convert object to primitive value");
    };

    var dP = Object.defineProperty;

    var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
      _anObject(O);
      P = _toPrimitive(P, true);
      _anObject(Attributes);
      if (_ie8DomDefine) try {
        return dP(O, P, Attributes);
      } catch (e) { /* empty */ }
      if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
      if ('value' in Attributes) O[P] = Attributes.value;
      return O;
    };

    var _objectDp = {
    	f: f
    };

    var _propertyDesc = function (bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
      };
    };

    var _hide = _descriptors ? function (object, key, value) {
      return _objectDp.f(object, key, _propertyDesc(1, value));
    } : function (object, key, value) {
      object[key] = value;
      return object;
    };

    var hasOwnProperty = {}.hasOwnProperty;
    var _has = function (it, key) {
      return hasOwnProperty.call(it, key);
    };

    var _redefine = createCommonjsModule$$1(function (module) {
    var SRC = _uid('src');
    var TO_STRING = 'toString';
    var $toString = Function[TO_STRING];
    var TPL = ('' + $toString).split(TO_STRING);

    _core.inspectSource = function (it) {
      return $toString.call(it);
    };

    (module.exports = function (O, key, val, safe) {
      var isFunction = typeof val == 'function';
      if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
      if (O[key] === val) return;
      if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
      if (O === _global) {
        O[key] = val;
      } else if (!safe) {
        delete O[key];
        _hide(O, key, val);
      } else if (O[key]) {
        O[key] = val;
      } else {
        _hide(O, key, val);
      }
    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
    })(Function.prototype, TO_STRING, function toString() {
      return typeof this == 'function' && this[SRC] || $toString.call(this);
    });
    });

    // optional / simple context binding

    var _ctx = function (fn, that, length) {
      _aFunction(fn);
      if (that === undefined) return fn;
      switch (length) {
        case 1: return function (a) {
          return fn.call(that, a);
        };
        case 2: return function (a, b) {
          return fn.call(that, a, b);
        };
        case 3: return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
      }
      return function (/* ...args */) {
        return fn.apply(that, arguments);
      };
    };

    var PROTOTYPE = 'prototype';

    var $export = function (type, name, source) {
      var IS_FORCED = type & $export.F;
      var IS_GLOBAL = type & $export.G;
      var IS_STATIC = type & $export.S;
      var IS_PROTO = type & $export.P;
      var IS_BIND = type & $export.B;
      var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
      var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
      var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
      var key, own, out, exp;
      if (IS_GLOBAL) source = name;
      for (key in source) {
        // contains in native
        own = !IS_FORCED && target && target[key] !== undefined;
        // export native or passed
        out = (own ? target : source)[key];
        // bind timers to global for call from export context
        exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
        // extend global
        if (target) _redefine(target, key, out, type & $export.U);
        // export
        if (exports[key] != out) _hide(exports, key, exp);
        if (IS_PROTO && expProto[key] != out) expProto[key] = out;
      }
    };
    _global.core = _core;
    // type bitmap
    $export.F = 1;   // forced
    $export.G = 2;   // global
    $export.S = 4;   // static
    $export.P = 8;   // proto
    $export.B = 16;  // bind
    $export.W = 32;  // wrap
    $export.U = 64;  // safe
    $export.R = 128; // real proto method for `library`
    var _export = $export;

    _export({
      target: 'RegExp',
      proto: true,
      forced: _regexpExec !== /./.exec
    }, {
      exec: _regexpExec
    });

    var SPECIES$1 = _wks('species');

    var REPLACE_SUPPORTS_NAMED_GROUPS = !_fails(function () {
      // #replace needs built-in support for named groups.
      // #match works fine because it just return the exec results, even if it has
      // a "grops" property.
      var re = /./;
      re.exec = function () {
        var result = [];
        result.groups = { a: '7' };
        return result;
      };
      return ''.replace(re, '$<a>') !== '7';
    });

    var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
      // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
      var re = /(?:)/;
      var originalExec = re.exec;
      re.exec = function () { return originalExec.apply(this, arguments); };
      var result = 'ab'.split(re);
      return result.length === 2 && result[0] === 'a' && result[1] === 'b';
    })();

    var _fixReWks = function (KEY, length, exec) {
      var SYMBOL = _wks(KEY);

      var DELEGATES_TO_SYMBOL = !_fails(function () {
        // String methods call symbol-named RegEp methods
        var O = {};
        O[SYMBOL] = function () { return 7; };
        return ''[KEY](O) != 7;
      });

      var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !_fails(function () {
        // Symbol-named RegExp methods call .exec
        var execCalled = false;
        var re = /a/;
        re.exec = function () { execCalled = true; return null; };
        if (KEY === 'split') {
          // RegExp[@@split] doesn't call the regex's exec method, but first creates
          // a new one. We need to return the patched regex when creating the new one.
          re.constructor = {};
          re.constructor[SPECIES$1] = function () { return re; };
        }
        re[SYMBOL]('');
        return !execCalled;
      }) : undefined;

      if (
        !DELEGATES_TO_SYMBOL ||
        !DELEGATES_TO_EXEC ||
        (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
        (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
      ) {
        var nativeRegExpMethod = /./[SYMBOL];
        var fns = exec(
          _defined,
          SYMBOL,
          ''[KEY],
          function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
            if (regexp.exec === _regexpExec) {
              if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                // The native String method already delegates to @@method (this
                // polyfilled function), leasing to infinite recursion.
                // We avoid it by directly calling the native @@method method.
                return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
              }
              return { done: true, value: nativeMethod.call(str, regexp, arg2) };
            }
            return { done: false };
          }
        );
        var strfn = fns[0];
        var rxfn = fns[1];

        _redefine(String.prototype, KEY, strfn);
        _hide(RegExp.prototype, SYMBOL, length == 2
          // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
          // 21.2.5.11 RegExp.prototype[@@split](string, limit)
          ? function (string, arg) { return rxfn.call(string, this, arg); }
          // 21.2.5.6 RegExp.prototype[@@match](string)
          // 21.2.5.9 RegExp.prototype[@@search](string)
          : function (string) { return rxfn.call(string, this); }
        );
      }
    };

    var $min = Math.min;
    var $push = [].push;
    var $SPLIT = 'split';
    var LENGTH = 'length';
    var LAST_INDEX$1 = 'lastIndex';

    // eslint-disable-next-line no-empty
    var SUPPORTS_Y = !!(function () { try { return new RegExp('x', 'y'); } catch (e) {} })();

    // @@split logic
    _fixReWks('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
      var internalSplit = $split;
      if (
        'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
        'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
        'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
        '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
        '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
        ''[$SPLIT](/.?/)[LENGTH]
      ) {
        // based on es5-shim implementation, need to rework it
        internalSplit = function (separator, limit) {
          var string = String(this);
          if (separator === undefined && limit === 0) return [];
          // If `separator` is not a regex, use native split
          if (!_isRegexp(separator)) return $split.call(string, separator, limit);
          var output = [];
          var flags = (separator.ignoreCase ? 'i' : '') +
                      (separator.multiline ? 'm' : '') +
                      (separator.unicode ? 'u' : '') +
                      (separator.sticky ? 'y' : '');
          var lastLastIndex = 0;
          var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
          // Make `global` and avoid `lastIndex` issues by working with a copy
          var separatorCopy = new RegExp(separator.source, flags + 'g');
          var match, lastIndex, lastLength;
          while (match = _regexpExec.call(separatorCopy, string)) {
            lastIndex = separatorCopy[LAST_INDEX$1];
            if (lastIndex > lastLastIndex) {
              output.push(string.slice(lastLastIndex, match.index));
              if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
              lastLength = match[0][LENGTH];
              lastLastIndex = lastIndex;
              if (output[LENGTH] >= splitLimit) break;
            }
            if (separatorCopy[LAST_INDEX$1] === match.index) separatorCopy[LAST_INDEX$1]++; // Avoid an infinite loop
          }
          if (lastLastIndex === string[LENGTH]) {
            if (lastLength || !separatorCopy.test('')) output.push('');
          } else output.push(string.slice(lastLastIndex));
          return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
        };
      // Chakra, V8
      } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
        internalSplit = function (separator, limit) {
          return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
        };
      }

      return [
        // `String.prototype.split` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.split
        function split(separator, limit) {
          var O = defined(this);
          var splitter = separator == undefined ? undefined : separator[SPLIT];
          return splitter !== undefined
            ? splitter.call(separator, O, limit)
            : internalSplit.call(String(O), separator, limit);
        },
        // `RegExp.prototype[@@split]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
        //
        // NOTE: This cannot be properly polyfilled in engines that don't support
        // the 'y' flag.
        function (regexp, limit) {
          var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
          if (res.done) return res.value;

          var rx = _anObject(regexp);
          var S = String(this);
          var C = _speciesConstructor(rx, RegExp);

          var unicodeMatching = rx.unicode;
          var flags = (rx.ignoreCase ? 'i' : '') +
                        (rx.multiline ? 'm' : '') +
                        (rx.unicode ? 'u' : '') +
                        (SUPPORTS_Y ? 'y' : 'g');

          // ^(? + rx + ) is needed, in combination with some S slicing, to
          // simulate the 'y' flag.
          var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
          var lim = limit === undefined ? 0xffffffff : limit >>> 0;
          if (lim === 0) return [];
          if (S.length === 0) return _regexpExecAbstract(splitter, S) === null ? [S] : [];
          var p = 0;
          var q = 0;
          var A = [];
          while (q < S.length) {
            splitter.lastIndex = SUPPORTS_Y ? q : 0;
            var z = _regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
            var e;
            if (
              z === null ||
              (e = $min(_toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
            ) {
              q = _advanceStringIndex(S, q, unicodeMatching);
            } else {
              A.push(S.slice(p, q));
              if (A.length === lim) return A;
              for (var i = 1; i <= z.length - 1; i++) {
                A.push(z[i]);
                if (A.length === lim) return A;
              }
              q = p = e;
            }
          }
          A.push(S.slice(p));
          return A;
        }
      ];
    });

    // 22.1.3.31 Array.prototype[@@unscopables]
    var UNSCOPABLES = _wks('unscopables');
    var ArrayProto = Array.prototype;
    if (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});
    var _addToUnscopables = function (key) {
      ArrayProto[UNSCOPABLES][key] = true;
    };

    var _iterStep = function (done, value) {
      return { value: value, done: !!done };
    };

    var _iterators = {};

    // fallback for non-array-like ES3 and non-enumerable old V8 strings

    // eslint-disable-next-line no-prototype-builtins
    var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
      return _cof(it) == 'String' ? it.split('') : Object(it);
    };

    // to indexed object, toObject with fallback for non-array-like ES3 strings


    var _toIobject = function (it) {
      return _iobject(_defined(it));
    };

    var max = Math.max;
    var min$1 = Math.min;
    var _toAbsoluteIndex = function (index, length) {
      index = _toInteger(index);
      return index < 0 ? max(index + length, 0) : min$1(index, length);
    };

    // false -> Array#indexOf
    // true  -> Array#includes



    var _arrayIncludes = function (IS_INCLUDES) {
      return function ($this, el, fromIndex) {
        var O = _toIobject($this);
        var length = _toLength(O.length);
        var index = _toAbsoluteIndex(fromIndex, length);
        var value;
        // Array#includes uses SameValueZero equality algorithm
        // eslint-disable-next-line no-self-compare
        if (IS_INCLUDES && el != el) while (length > index) {
          value = O[index++];
          // eslint-disable-next-line no-self-compare
          if (value != value) return true;
        // Array#indexOf ignores holes, Array#includes - not
        } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
          if (O[index] === el) return IS_INCLUDES || index || 0;
        } return !IS_INCLUDES && -1;
      };
    };

    var shared = _shared('keys');

    var _sharedKey = function (key) {
      return shared[key] || (shared[key] = _uid(key));
    };

    var arrayIndexOf = _arrayIncludes(false);
    var IE_PROTO = _sharedKey('IE_PROTO');

    var _objectKeysInternal = function (object, names) {
      var O = _toIobject(object);
      var i = 0;
      var result = [];
      var key;
      for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
      // Don't enum bug & hidden keys
      while (names.length > i) if (_has(O, key = names[i++])) {
        ~arrayIndexOf(result, key) || result.push(key);
      }
      return result;
    };

    // IE 8- don't enum bug keys
    var _enumBugKeys = (
      'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
    ).split(',');

    // 19.1.2.14 / 15.2.3.14 Object.keys(O)



    var _objectKeys = Object.keys || function keys(O) {
      return _objectKeysInternal(O, _enumBugKeys);
    };

    var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
      _anObject(O);
      var keys = _objectKeys(Properties);
      var length = keys.length;
      var i = 0;
      var P;
      while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
      return O;
    };

    var document$2 = _global.document;
    var _html = document$2 && document$2.documentElement;

    // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



    var IE_PROTO$1 = _sharedKey('IE_PROTO');
    var Empty = function () { /* empty */ };
    var PROTOTYPE$1 = 'prototype';

    // Create object with fake `null` prototype: use iframe Object with cleared prototype
    var createDict = function () {
      // Thrash, waste and sodomy: IE GC bug
      var iframe = _domCreate('iframe');
      var i = _enumBugKeys.length;
      var lt = '<';
      var gt = '>';
      var iframeDocument;
      iframe.style.display = 'none';
      _html.appendChild(iframe);
      iframe.src = 'javascript:'; // eslint-disable-line no-script-url
      // createDict = iframe.contentWindow.Object;
      // html.removeChild(iframe);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
      iframeDocument.close();
      createDict = iframeDocument.F;
      while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
      return createDict();
    };

    var _objectCreate = Object.create || function create(O, Properties) {
      var result;
      if (O !== null) {
        Empty[PROTOTYPE$1] = _anObject(O);
        result = new Empty();
        Empty[PROTOTYPE$1] = null;
        // add "__proto__" for Object.getPrototypeOf polyfill
        result[IE_PROTO$1] = O;
      } else result = createDict();
      return Properties === undefined ? result : _objectDps(result, Properties);
    };

    var def = _objectDp.f;

    var TAG$1 = _wks('toStringTag');

    var _setToStringTag = function (it, tag, stat) {
      if (it && !_has(it = stat ? it : it.prototype, TAG$1)) def(it, TAG$1, { configurable: true, value: tag });
    };

    var IteratorPrototype = {};

    // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
    _hide(IteratorPrototype, _wks('iterator'), function () { return this; });

    var _iterCreate = function (Constructor, NAME, next) {
      Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
      _setToStringTag(Constructor, NAME + ' Iterator');
    };

    // 7.1.13 ToObject(argument)

    var _toObject = function (it) {
      return Object(_defined(it));
    };

    // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


    var IE_PROTO$2 = _sharedKey('IE_PROTO');
    var ObjectProto = Object.prototype;

    var _objectGpo = Object.getPrototypeOf || function (O) {
      O = _toObject(O);
      if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
      if (typeof O.constructor == 'function' && O instanceof O.constructor) {
        return O.constructor.prototype;
      } return O instanceof Object ? ObjectProto : null;
    };

    var ITERATOR = _wks('iterator');
    var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
    var FF_ITERATOR = '@@iterator';
    var KEYS = 'keys';
    var VALUES = 'values';

    var returnThis = function () { return this; };

    var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
      _iterCreate(Constructor, NAME, next);
      var getMethod = function (kind) {
        if (!BUGGY && kind in proto) return proto[kind];
        switch (kind) {
          case KEYS: return function keys() { return new Constructor(this, kind); };
          case VALUES: return function values() { return new Constructor(this, kind); };
        } return function entries() { return new Constructor(this, kind); };
      };
      var TAG = NAME + ' Iterator';
      var DEF_VALUES = DEFAULT == VALUES;
      var VALUES_BUG = false;
      var proto = Base.prototype;
      var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
      var $default = $native || getMethod(DEFAULT);
      var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
      var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
      var methods, key, IteratorPrototype;
      // Fix native
      if ($anyNative) {
        IteratorPrototype = _objectGpo($anyNative.call(new Base()));
        if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
          // Set @@toStringTag to native iterators
          _setToStringTag(IteratorPrototype, TAG, true);
          // fix for some old engines
          if (!_library && typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);
        }
      }
      // fix Array#{values, @@iterator}.name in V8 / FF
      if (DEF_VALUES && $native && $native.name !== VALUES) {
        VALUES_BUG = true;
        $default = function values() { return $native.call(this); };
      }
      // Define iterator
      if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
        _hide(proto, ITERATOR, $default);
      }
      // Plug for library
      _iterators[NAME] = $default;
      _iterators[TAG] = returnThis;
      if (DEFAULT) {
        methods = {
          values: DEF_VALUES ? $default : getMethod(VALUES),
          keys: IS_SET ? $default : getMethod(KEYS),
          entries: $entries
        };
        if (FORCED) for (key in methods) {
          if (!(key in proto)) _redefine(proto, key, methods[key]);
        } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
      }
      return methods;
    };

    // 22.1.3.4 Array.prototype.entries()
    // 22.1.3.13 Array.prototype.keys()
    // 22.1.3.29 Array.prototype.values()
    // 22.1.3.30 Array.prototype[@@iterator]()
    var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
      this._t = _toIobject(iterated); // target
      this._i = 0;                   // next index
      this._k = kind;                // kind
    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
    }, function () {
      var O = this._t;
      var kind = this._k;
      var index = this._i++;
      if (!O || index >= O.length) {
        this._t = undefined;
        return _iterStep(1);
      }
      if (kind == 'keys') return _iterStep(0, index);
      if (kind == 'values') return _iterStep(0, O[index]);
      return _iterStep(0, [index, O[index]]);
    }, 'values');

    // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
    _iterators.Arguments = _iterators.Array;

    _addToUnscopables('keys');
    _addToUnscopables('values');
    _addToUnscopables('entries');

    var ITERATOR$1 = _wks('iterator');
    var TO_STRING_TAG = _wks('toStringTag');
    var ArrayValues = _iterators.Array;

    var DOMIterables = {
      CSSRuleList: true, // TODO: Not spec compliant, should be false.
      CSSStyleDeclaration: false,
      CSSValueList: false,
      ClientRectList: false,
      DOMRectList: false,
      DOMStringList: false,
      DOMTokenList: true,
      DataTransferItemList: false,
      FileList: false,
      HTMLAllCollection: false,
      HTMLCollection: false,
      HTMLFormElement: false,
      HTMLSelectElement: false,
      MediaList: true, // TODO: Not spec compliant, should be false.
      MimeTypeArray: false,
      NamedNodeMap: false,
      NodeList: true,
      PaintRequestList: false,
      Plugin: false,
      PluginArray: false,
      SVGLengthList: false,
      SVGNumberList: false,
      SVGPathSegList: false,
      SVGPointList: false,
      SVGStringList: false,
      SVGTransformList: false,
      SourceBufferList: false,
      StyleSheetList: true, // TODO: Not spec compliant, should be false.
      TextTrackCueList: false,
      TextTrackList: false,
      TouchList: false
    };

    for (var collections = _objectKeys(DOMIterables), i = 0; i < collections.length; i++) {
      var NAME = collections[i];
      var explicit = DOMIterables[NAME];
      var Collection = _global[NAME];
      var proto = Collection && Collection.prototype;
      var key;
      if (proto) {
        if (!proto[ITERATOR$1]) _hide(proto, ITERATOR$1, ArrayValues);
        if (!proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);
        _iterators[NAME] = ArrayValues;
        if (explicit) for (key in es6_array_iterator) if (!proto[key]) _redefine(proto, key, es6_array_iterator[key], true);
      }
    }

    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function (obj) {
          return typeof obj;
        };
      } else {
        _typeof = function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    var _strictMethod = function (method, arg) {
      return !!method && _fails(function () {
        // eslint-disable-next-line no-useless-call
        arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
      });
    };

    var $sort = [].sort;
    var test = [1, 2, 3];

    _export(_export.P + _export.F * (_fails(function () {
      // IE8-
      test.sort(undefined);
    }) || !_fails(function () {
      // V8 bug
      test.sort(null);
      // Old WebKit
    }) || !_strictMethod($sort)), 'Array', {
      // 22.1.3.25 Array.prototype.sort(comparefn)
      sort: function sort(comparefn) {
        return comparefn === undefined
          ? $sort.call(_toObject(this))
          : $sort.call(_toObject(this), _aFunction(comparefn));
      }
    });

    // most Object methods by ES6 should accept primitives



    var _objectSap = function (KEY, exec) {
      var fn = (_core.Object || {})[KEY] || Object[KEY];
      var exp = {};
      exp[KEY] = exec(fn);
      _export(_export.S + _export.F * _fails(function () { fn(1); }), 'Object', exp);
    };

    // 19.1.2.14 Object.keys(O)



    _objectSap('keys', function () {
      return function keys(it) {
        return _objectKeys(_toObject(it));
      };
    });

    var f$1 = Object.getOwnPropertySymbols;

    var _objectGops = {
    	f: f$1
    };

    var f$2 = {}.propertyIsEnumerable;

    var _objectPie = {
    	f: f$2
    };

    // 19.1.2.1 Object.assign(target, source, ...)





    var $assign = Object.assign;

    // should work with symbols and should have deterministic property order (V8 bug)
    var _objectAssign = !$assign || _fails(function () {
      var A = {};
      var B = {};
      // eslint-disable-next-line no-undef
      var S = Symbol();
      var K = 'abcdefghijklmnopqrst';
      A[S] = 7;
      K.split('').forEach(function (k) { B[k] = k; });
      return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
    }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
      var T = _toObject(target);
      var aLen = arguments.length;
      var index = 1;
      var getSymbols = _objectGops.f;
      var isEnum = _objectPie.f;
      while (aLen > index) {
        var S = _iobject(arguments[index++]);
        var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
        var length = keys.length;
        var j = 0;
        var key;
        while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
      } return T;
    } : $assign;

    // 19.1.3.1 Object.assign(target, source)


    _export(_export.S + _export.F, 'Object', { assign: _objectAssign });

    var max$1 = Math.max;
    var min$2 = Math.min;
    var floor$1 = Math.floor;
    var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
    var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

    var maybeToString = function (it) {
      return it === undefined ? it : String(it);
    };

    // @@replace logic
    _fixReWks('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
      return [
        // `String.prototype.replace` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.replace
        function replace(searchValue, replaceValue) {
          var O = defined(this);
          var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
          return fn !== undefined
            ? fn.call(searchValue, O, replaceValue)
            : $replace.call(String(O), searchValue, replaceValue);
        },
        // `RegExp.prototype[@@replace]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
        function (regexp, replaceValue) {
          var res = maybeCallNative($replace, regexp, this, replaceValue);
          if (res.done) return res.value;

          var rx = _anObject(regexp);
          var S = String(this);
          var functionalReplace = typeof replaceValue === 'function';
          if (!functionalReplace) replaceValue = String(replaceValue);
          var global = rx.global;
          if (global) {
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
          }
          var results = [];
          while (true) {
            var result = _regexpExecAbstract(rx, S);
            if (result === null) break;
            results.push(result);
            if (!global) break;
            var matchStr = String(result[0]);
            if (matchStr === '') rx.lastIndex = _advanceStringIndex(S, _toLength(rx.lastIndex), fullUnicode);
          }
          var accumulatedResult = '';
          var nextSourcePosition = 0;
          for (var i = 0; i < results.length; i++) {
            result = results[i];
            var matched = String(result[0]);
            var position = max$1(min$2(_toInteger(result.index), S.length), 0);
            var captures = [];
            // NOTE: This is equivalent to
            //   captures = result.slice(1).map(maybeToString)
            // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
            // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
            // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
            for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
            var namedCaptures = result.groups;
            if (functionalReplace) {
              var replacerArgs = [matched].concat(captures, position, S);
              if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
              var replacement = String(replaceValue.apply(undefined, replacerArgs));
            } else {
              replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
            }
            if (position >= nextSourcePosition) {
              accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
              nextSourcePosition = position + matched.length;
            }
          }
          return accumulatedResult + S.slice(nextSourcePosition);
        }
      ];

        // https://tc39.github.io/ecma262/#sec-getsubstitution
      function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
        var tailPos = position + matched.length;
        var m = captures.length;
        var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
        if (namedCaptures !== undefined) {
          namedCaptures = _toObject(namedCaptures);
          symbols = SUBSTITUTION_SYMBOLS;
        }
        return $replace.call(replacement, symbols, function (match, ch) {
          var capture;
          switch (ch.charAt(0)) {
            case '$': return '$';
            case '&': return matched;
            case '`': return str.slice(0, position);
            case "'": return str.slice(tailPos);
            case '<':
              capture = namedCaptures[ch.slice(1, -1)];
              break;
            default: // \d\d?
              var n = +ch;
              if (n === 0) return ch;
              if (n > m) {
                var f = floor$1(n / 10);
                if (f === 0) return ch;
                if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                return ch;
              }
              capture = captures[n - 1];
          }
          return capture === undefined ? '' : capture;
        });
      }
    });

    /*! Hammer.JS - v2.0.7 - 2016-04-22
     * http://hammerjs.github.io/
     *
     * Copyright (c) 2016 Jorik Tangelder;
     * Licensed under the MIT license */
    var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];

    var TEST_ELEMENT = function TEST_ELEMENT() {
      return document.createElement('div');
    };

    var TYPE_FUNCTION = 'function';
    var round = Math.round;
    var abs = Math.abs;
    var now = Date.now;
    /**
     * set a timeout with a given scope
     * @param {Function} fn
     * @param {Number} timeout
     * @param {Object} context
     * @returns {number}
     */

    function setTimeoutContext(fn, timeout, context) {
      return setTimeout(bindFn(fn, context), timeout);
    }
    /**
     * if the argument is an array, we want to execute the fn on each entry
     * if it aint an array we don't want to do a thing.
     * this is used by all the methods that accept a single and array argument.
     * @param {*|Array} arg
     * @param {String} fn
     * @param {Object} [context]
     * @returns {Boolean}
     */


    function invokeArrayArg(arg, fn, context) {
      if (Array.isArray(arg)) {
        each(arg, context[fn], context);
        return true;
      }

      return false;
    }
    /**
     * walk objects and arrays
     * @param {Object} obj
     * @param {Function} iterator
     * @param {Object} context
     */


    function each(obj, iterator, context) {
      var i;

      if (!obj) {
        return;
      }

      if (obj.forEach) {
        obj.forEach(iterator, context);
      } else if (obj.length !== undefined) {
        i = 0;

        while (i < obj.length) {
          iterator.call(context, obj[i], i, obj);
          i++;
        }
      } else {
        for (i in obj) {
          obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
        }
      }
    }
    /**
     * wrap a method with a deprecation warning and stack trace
     * @param {Function} method
     * @param {String} name
     * @param {String} message
     * @returns {Function} A new function wrapping the supplied method.
     */


    function deprecate(method, name, message) {
      var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
      return function () {
        var e = new Error('get-stack-trace');
        var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '').replace(/^\s+at\s+/gm, '').replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';
        var log = window.console && (window.console.warn || window.console.log);

        if (log) {
          log.call(window.console, deprecationMessage, stack);
        }

        return method.apply(this, arguments);
      };
    }
    /**
     * extend object.
     * means that properties in dest will be overwritten by the ones in src.
     * @param {Object} target
     * @param {...Object} objects_to_assign
     * @returns {Object} target
     */


    var assign;

    if (typeof Object.assign !== 'function') {
      assign = function assign(target) {
        if (target === undefined || target === null) {
          throw new TypeError('Cannot convert undefined or null to object');
        }

        var output = Object(target);

        for (var index = 1; index < arguments.length; index++) {
          var source = arguments[index];

          if (source !== undefined && source !== null) {
            for (var nextKey in source) {
              if (source.hasOwnProperty(nextKey)) {
                output[nextKey] = source[nextKey];
              }
            }
          }
        }

        return output;
      };
    } else {
      assign = Object.assign;
    }
    /**
     * extend object.
     * means that properties in dest will be overwritten by the ones in src.
     * @param {Object} dest
     * @param {Object} src
     * @param {Boolean} [merge=false]
     * @returns {Object} dest
     */


    var extend = deprecate(function extend(dest, src, merge) {
      var keys = Object.keys(src);
      var i = 0;

      while (i < keys.length) {
        if (!merge || merge && dest[keys[i]] === undefined) {
          dest[keys[i]] = src[keys[i]];
        }

        i++;
      }

      return dest;
    }, 'extend', 'Use `assign`.');
    /**
     * merge the values from src in the dest.
     * means that properties that exist in dest will not be overwritten by src
     * @param {Object} dest
     * @param {Object} src
     * @returns {Object} dest
     */

    var merge = deprecate(function merge(dest, src) {
      return extend(dest, src, true);
    }, 'merge', 'Use `assign`.');
    /**
     * simple class inheritance
     * @param {Function} child
     * @param {Function} base
     * @param {Object} [properties]
     */

    function inherit(child, base, properties) {
      var baseP = base.prototype,
          childP;
      childP = child.prototype = Object.create(baseP);
      childP.constructor = child;
      childP._super = baseP;

      if (properties) {
        assign(childP, properties);
      }
    }
    /**
     * simple function bind
     * @param {Function} fn
     * @param {Object} context
     * @returns {Function}
     */


    function bindFn(fn, context) {
      return function boundFn() {
        return fn.apply(context, arguments);
      };
    }
    /**
     * let a boolean value also be a function that must return a boolean
     * this first item in args will be used as the context
     * @param {Boolean|Function} val
     * @param {Array} [args]
     * @returns {Boolean}
     */


    function boolOrFn(val, args) {
      if (_typeof(val) == TYPE_FUNCTION) {
        return val.apply(args ? args[0] || undefined : undefined, args);
      }

      return val;
    }
    /**
     * use the val2 when val1 is undefined
     * @param {*} val1
     * @param {*} val2
     * @returns {*}
     */


    function ifUndefined(val1, val2) {
      return val1 === undefined ? val2 : val1;
    }
    /**
     * addEventListener with multiple events at once
     * @param {EventTarget} target
     * @param {String} types
     * @param {Function} handler
     */


    function addEventListeners(target, types, handler) {
      each(splitStr(types), function (type) {
        target.addEventListener(type, handler, false);
      });
    }
    /**
     * removeEventListener with multiple events at once
     * @param {EventTarget} target
     * @param {String} types
     * @param {Function} handler
     */


    function removeEventListeners(target, types, handler) {
      each(splitStr(types), function (type) {
        target.removeEventListener(type, handler, false);
      });
    }
    /**
     * find if a node is in the given parent
     * @method hasParent
     * @param {HTMLElement} node
     * @param {HTMLElement} parent
     * @return {Boolean} found
     */


    function hasParent(node, parent) {
      while (node) {
        if (node == parent) {
          return true;
        }

        node = node.parentNode;
      }

      return false;
    }
    /**
     * small indexOf wrapper
     * @param {String} str
     * @param {String} find
     * @returns {Boolean} found
     */


    function inStr(str, find) {
      return str.indexOf(find) > -1;
    }
    /**
     * split string on whitespace
     * @param {String} str
     * @returns {Array} words
     */


    function splitStr(str) {
      return str.trim().split(/\s+/g);
    }
    /**
     * find if a array contains the object using indexOf or a simple polyFill
     * @param {Array} src
     * @param {String} find
     * @param {String} [findByKey]
     * @return {Boolean|Number} false when not found, or the index
     */


    function inArray(src, find, findByKey) {
      if (src.indexOf && !findByKey) {
        return src.indexOf(find);
      } else {
        var i = 0;

        while (i < src.length) {
          if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
            return i;
          }

          i++;
        }

        return -1;
      }
    }
    /**
     * convert array-like objects to real arrays
     * @param {Object} obj
     * @returns {Array}
     */


    function toArray(obj) {
      return Array.prototype.slice.call(obj, 0);
    }
    /**
     * unique array with objects based on a key (like 'id') or just by the array's value
     * @param {Array} src [{id:1},{id:2},{id:1}]
     * @param {String} [key]
     * @param {Boolean} [sort=False]
     * @returns {Array} [{id:1},{id:2}]
     */


    function uniqueArray(src, key, sort) {
      var results = [];
      var values = [];
      var i = 0;

      while (i < src.length) {
        var val = key ? src[i][key] : src[i];

        if (inArray(values, val) < 0) {
          results.push(src[i]);
        }

        values[i] = val;
        i++;
      }

      if (sort) {
        if (!key) {
          results = results.sort();
        } else {
          results = results.sort(function sortUniqueArray(a, b) {
            return a[key] > b[key];
          });
        }
      }

      return results;
    }
    /**
     * get the prefixed property
     * @param {Object} obj
     * @param {String} property
     * @returns {String|Undefined} prefixed
     */


    function prefixed(obj, property) {
      var prefix, prop;
      var camelProp = property[0].toUpperCase() + property.slice(1);
      var i = 0;

      while (i < VENDOR_PREFIXES.length) {
        prefix = VENDOR_PREFIXES[i];
        prop = prefix ? prefix + camelProp : property;

        if (prop in obj) {
          return prop;
        }

        i++;
      }

      return undefined;
    }
    /**
     * get a unique id
     * @returns {number} uniqueId
     */


    var _uniqueId = 1;

    function uniqueId() {
      return _uniqueId++;
    }
    /**
     * get the window object of an element
     * @param {HTMLElement} element
     * @returns {DocumentView|Window}
     */


    function getWindowForElement(element) {
      var doc = element.ownerDocument || element;
      return doc.defaultView || doc.parentWindow || window;
    }

    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

    var SUPPORT_TOUCH = function SUPPORT_TOUCH() {
      return 'ontouchstart' in window;
    };

    var SUPPORT_POINTER_EVENTS = function SUPPORT_POINTER_EVENTS() {
      return prefixed(window, 'PointerEvent') !== undefined;
    };

    var SUPPORT_ONLY_TOUCH = function SUPPORT_ONLY_TOUCH() {
      return SUPPORT_TOUCH() && MOBILE_REGEX.test(navigator.userAgent);
    };

    var INPUT_TYPE_TOUCH = 'touch';
    var INPUT_TYPE_PEN = 'pen';
    var INPUT_TYPE_MOUSE = 'mouse';
    var INPUT_TYPE_KINECT = 'kinect';
    var COMPUTE_INTERVAL = 25;
    var INPUT_START = 1;
    var INPUT_MOVE = 2;
    var INPUT_END = 4;
    var INPUT_CANCEL = 8;
    var DIRECTION_NONE = 1;
    var DIRECTION_LEFT = 2;
    var DIRECTION_RIGHT = 4;
    var DIRECTION_UP = 8;
    var DIRECTION_DOWN = 16;
    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
    var PROPS_XY = ['x', 'y'];
    var PROPS_CLIENT_XY = ['clientX', 'clientY'];
    /**
     * create new input type manager
     * @param {Manager} manager
     * @param {Function} callback
     * @returns {Input}
     * @constructor
     */

    function Input(manager, callback) {
      var self = this;
      this.manager = manager;
      this.callback = callback;
      this.element = manager.element;
      this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,
      // so when disabled the input events are completely bypassed.

      this.domHandler = function (ev) {
        if (boolOrFn(manager.options.enable, [manager])) {
          self.handler(ev);
        }
      };

      this.init();
    }

    Input.prototype = {
      /**
       * should handle the inputEvent data and trigger the callback
       * @virtual
       */
      handler: function handler() {},

      /**
       * bind the events
       */
      init: function init() {
        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
      },

      /**
       * unbind the events
       */
      destroy: function destroy() {
        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
      }
    };
    /**
     * create new input type manager
     * called by the Manager constructor
     * @param {Hammer} manager
     * @returns {Input}
     */

    function createInputInstance(manager) {
      var Type;
      var inputClass = manager.options.inputClass;

      if (inputClass) {
        Type = inputClass;
      } else if (SUPPORT_POINTER_EVENTS()) {
        Type = PointerEventInput;
      } else if (SUPPORT_ONLY_TOUCH()) {
        Type = TouchInput;
      } else if (!SUPPORT_TOUCH()) {
        Type = MouseInput;
      } else {
        Type = TouchMouseInput;
      }

      return new Type(manager, inputHandler);
    }
    /**
     * handle input events
     * @param {Manager} manager
     * @param {String} eventType
     * @param {Object} input
     */


    function inputHandler(manager, eventType, input) {
      var pointersLen = input.pointers.length;
      var changedPointersLen = input.changedPointers.length;
      var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
      var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
      input.isFirst = !!isFirst;
      input.isFinal = !!isFinal;

      if (isFirst) {
        manager.session = {};
      } // source event is the normalized value of the domEvents
      // like 'touchstart, mouseup, pointerdown'


      input.eventType = eventType; // compute scale, rotation etc

      computeInputData(manager, input); // emit secret event

      manager.emit('hammer.input', input);
      manager.recognize(input);
      manager.session.prevInput = input;
    }
    /**
     * extend the data with some usable properties like scale, rotate, velocity etc
     * @param {Object} manager
     * @param {Object} input
     */


    function computeInputData(manager, input) {
      var session = manager.session;
      var pointers = input.pointers;
      var pointersLength = pointers.length; // store the first input to calculate the distance and direction

      if (!session.firstInput) {
        session.firstInput = simpleCloneInputData(input);
      } // to compute scale and rotation we need to store the multiple touches


      if (pointersLength > 1 && !session.firstMultiple) {
        session.firstMultiple = simpleCloneInputData(input);
      } else if (pointersLength === 1) {
        session.firstMultiple = false;
      }

      var firstInput = session.firstInput;
      var firstMultiple = session.firstMultiple;
      var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
      var center = input.center = getCenter(pointers);
      input.timeStamp = now();
      input.deltaTime = input.timeStamp - firstInput.timeStamp;
      input.angle = getAngle(offsetCenter, center);
      input.distance = getDistance(offsetCenter, center);
      computeDeltaXY(session, input);
      input.offsetDirection = getDirection(input.deltaX, input.deltaY);
      var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
      input.overallVelocityX = overallVelocity.x;
      input.overallVelocityY = overallVelocity.y;
      input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
      input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
      input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
      input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
      computeIntervalInputData(session, input); // find the correct target

      var target = manager.element;

      if (hasParent(input.srcEvent.target, target)) {
        target = input.srcEvent.target;
      }

      input.target = target;
    }

    function computeDeltaXY(session, input) {
      var center = input.center;
      var offset = session.offsetDelta || {};
      var prevDelta = session.prevDelta || {};
      var prevInput = session.prevInput || {};

      if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
        prevDelta = session.prevDelta = {
          x: prevInput.deltaX || 0,
          y: prevInput.deltaY || 0
        };
        offset = session.offsetDelta = {
          x: center.x,
          y: center.y
        };
      }

      input.deltaX = prevDelta.x + (center.x - offset.x);
      input.deltaY = prevDelta.y + (center.y - offset.y);
    }
    /**
     * velocity is calculated every x ms
     * @param {Object} session
     * @param {Object} input
     */


    function computeIntervalInputData(session, input) {
      var last = session.lastInterval || input,
          deltaTime = input.timeStamp - last.timeStamp,
          velocity,
          velocityX,
          velocityY,
          direction;

      if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
        var deltaX = input.deltaX - last.deltaX;
        var deltaY = input.deltaY - last.deltaY;
        var v = getVelocity(deltaTime, deltaX, deltaY);
        velocityX = v.x;
        velocityY = v.y;
        velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
        direction = getDirection(deltaX, deltaY);
        session.lastInterval = input;
      } else {
        // use latest velocity info if it doesn't overtake a minimum period
        velocity = last.velocity;
        velocityX = last.velocityX;
        velocityY = last.velocityY;
        direction = last.direction;
      }

      input.velocity = velocity;
      input.velocityX = velocityX;
      input.velocityY = velocityY;
      input.direction = direction;
    }
    /**
     * create a simple clone from the input used for storage of firstInput and firstMultiple
     * @param {Object} input
     * @returns {Object} clonedInputData
     */


    function simpleCloneInputData(input) {
      // make a simple copy of the pointers because we will get a reference if we don't
      // we only need clientXY for the calculations
      var pointers = [];
      var i = 0;

      while (i < input.pointers.length) {
        pointers[i] = {
          clientX: round(input.pointers[i].clientX),
          clientY: round(input.pointers[i].clientY)
        };
        i++;
      }

      return {
        timeStamp: now(),
        pointers: pointers,
        center: getCenter(pointers),
        deltaX: input.deltaX,
        deltaY: input.deltaY
      };
    }
    /**
     * get the center of all the pointers
     * @param {Array} pointers
     * @return {Object} center contains `x` and `y` properties
     */


    function getCenter(pointers) {
      var pointersLength = pointers.length; // no need to loop when only one touch

      if (pointersLength === 1) {
        return {
          x: round(pointers[0].clientX),
          y: round(pointers[0].clientY)
        };
      }

      var x = 0,
          y = 0,
          i = 0;

      while (i < pointersLength) {
        x += pointers[i].clientX;
        y += pointers[i].clientY;
        i++;
      }

      return {
        x: round(x / pointersLength),
        y: round(y / pointersLength)
      };
    }
    /**
     * calculate the velocity between two points. unit is in px per ms.
     * @param {Number} deltaTime
     * @param {Number} x
     * @param {Number} y
     * @return {Object} velocity `x` and `y`
     */


    function getVelocity(deltaTime, x, y) {
      return {
        x: x / deltaTime || 0,
        y: y / deltaTime || 0
      };
    }
    /**
     * get the direction between two points
     * @param {Number} x
     * @param {Number} y
     * @return {Number} direction
     */


    function getDirection(x, y) {
      if (x === y) {
        return DIRECTION_NONE;
      }

      if (abs(x) >= abs(y)) {
        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
      }

      return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
    }
    /**
     * calculate the absolute distance between two points
     * @param {Object} p1 {x, y}
     * @param {Object} p2 {x, y}
     * @param {Array} [props] containing x and y keys
     * @return {Number} distance
     */


    function getDistance(p1, p2, props) {
      if (!props) {
        props = PROPS_XY;
      }

      var x = p2[props[0]] - p1[props[0]],
          y = p2[props[1]] - p1[props[1]];
      return Math.sqrt(x * x + y * y);
    }
    /**
     * calculate the angle between two coordinates
     * @param {Object} p1
     * @param {Object} p2
     * @param {Array} [props] containing x and y keys
     * @return {Number} angle
     */


    function getAngle(p1, p2, props) {
      if (!props) {
        props = PROPS_XY;
      }

      var x = p2[props[0]] - p1[props[0]],
          y = p2[props[1]] - p1[props[1]];
      return Math.atan2(y, x) * 180 / Math.PI;
    }
    /**
     * calculate the rotation degrees between two pointersets
     * @param {Array} start array of pointers
     * @param {Array} end array of pointers
     * @return {Number} rotation
     */


    function getRotation(start, end) {
      return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
    }
    /**
     * calculate the scale factor between two pointersets
     * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
     * @param {Array} start array of pointers
     * @param {Array} end array of pointers
     * @return {Number} scale
     */


    function getScale(start, end) {
      return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
    }

    var MOUSE_INPUT_MAP = {
      mousedown: INPUT_START,
      mousemove: INPUT_MOVE,
      mouseup: INPUT_END
    };
    var MOUSE_ELEMENT_EVENTS = 'mousedown';
    var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
    /**
     * Mouse events input
     * @constructor
     * @extends Input
     */

    function MouseInput() {
      this.evEl = MOUSE_ELEMENT_EVENTS;
      this.evWin = MOUSE_WINDOW_EVENTS;
      this.pressed = false; // mousedown state

      Input.apply(this, arguments);
    }

    inherit(MouseInput, Input, {
      /**
       * handle mouse events
       * @param {Object} ev
       */
      handler: function MEhandler(ev) {
        var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down

        if (eventType & INPUT_START && ev.button === 0) {
          this.pressed = true;
        }

        if (eventType & INPUT_MOVE && ev.which !== 1) {
          eventType = INPUT_END;
        } // mouse must be down


        if (!this.pressed) {
          return;
        }

        if (eventType & INPUT_END) {
          this.pressed = false;
        }

        this.callback(this.manager, eventType, {
          pointers: [ev],
          changedPointers: [ev],
          pointerType: INPUT_TYPE_MOUSE,
          srcEvent: ev
        });
      }
    });
    var POINTER_INPUT_MAP = {
      pointerdown: INPUT_START,
      pointermove: INPUT_MOVE,
      pointerup: INPUT_END,
      pointercancel: INPUT_CANCEL,
      pointerout: INPUT_CANCEL
    }; // in IE10 the pointer types is defined as an enum

    var IE10_POINTER_TYPE_ENUM = {
      2: INPUT_TYPE_TOUCH,
      3: INPUT_TYPE_PEN,
      4: INPUT_TYPE_MOUSE,
      5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816

    };
    var POINTER_ELEMENT_EVENTS = 'pointerdown';
    var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel'; // IE10 has prefixed support, and case-sensitive

    if (typeof window !== 'undefined' && window.MSPointerEvent && !window.PointerEvent) {
      POINTER_ELEMENT_EVENTS = 'MSPointerDown';
      POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
    }
    /**
     * Pointer events input
     * @constructor
     * @extends Input
     */


    function PointerEventInput() {
      this.evEl = POINTER_ELEMENT_EVENTS;
      this.evWin = POINTER_WINDOW_EVENTS;
      Input.apply(this, arguments);
      this.store = this.manager.session.pointerEvents = [];
    }

    inherit(PointerEventInput, Input, {
      /**
       * handle mouse events
       * @param {Object} ev
       */
      handler: function PEhandler(ev) {
        var store = this.store;
        var removePointer = false;
        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
        var isTouch = pointerType == INPUT_TYPE_TOUCH; // get index of the event in the store

        var storeIndex = inArray(store, ev.pointerId, 'pointerId'); // start and mouse must be down

        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
          if (storeIndex < 0) {
            store.push(ev);
            storeIndex = store.length - 1;
          }
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
          removePointer = true;
        } // it not found, so the pointer hasn't been down (so it's probably a hover)


        if (storeIndex < 0) {
          return;
        } // update the event in the store


        store[storeIndex] = ev;
        this.callback(this.manager, eventType, {
          pointers: store,
          changedPointers: [ev],
          pointerType: pointerType,
          srcEvent: ev
        });

        if (removePointer) {
          // remove from the store
          store.splice(storeIndex, 1);
        }
      }
    });
    var SINGLE_TOUCH_INPUT_MAP = {
      touchstart: INPUT_START,
      touchmove: INPUT_MOVE,
      touchend: INPUT_END,
      touchcancel: INPUT_CANCEL
    };
    var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
    var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
    /**
     * Touch events input
     * @constructor
     * @extends Input
     */

    function SingleTouchInput() {
      this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
      this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
      this.started = false;
      Input.apply(this, arguments);
    }

    inherit(SingleTouchInput, Input, {
      handler: function TEhandler(ev) {
        var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?

        if (type === INPUT_START) {
          this.started = true;
        }

        if (!this.started) {
          return;
        }

        var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state

        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
          this.started = false;
        }

        this.callback(this.manager, type, {
          pointers: touches[0],
          changedPointers: touches[1],
          pointerType: INPUT_TYPE_TOUCH,
          srcEvent: ev
        });
      }
    });
    /**
     * @this {TouchInput}
     * @param {Object} ev
     * @param {Number} type flag
     * @returns {undefined|Array} [all, changed]
     */

    function normalizeSingleTouches(ev, type) {
      var all = toArray(ev.touches);
      var changed = toArray(ev.changedTouches);

      if (type & (INPUT_END | INPUT_CANCEL)) {
        all = uniqueArray(all.concat(changed), 'identifier', true);
      }

      return [all, changed];
    }

    var TOUCH_INPUT_MAP = {
      touchstart: INPUT_START,
      touchmove: INPUT_MOVE,
      touchend: INPUT_END,
      touchcancel: INPUT_CANCEL
    };
    var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
    /**
     * Multi-user touch events input
     * @constructor
     * @extends Input
     */

    function TouchInput() {
      this.evTarget = TOUCH_TARGET_EVENTS;
      this.targetIds = {};
      Input.apply(this, arguments);
    }

    inherit(TouchInput, Input, {
      handler: function MTEhandler(ev) {
        var type = TOUCH_INPUT_MAP[ev.type];
        var touches = getTouches.call(this, ev, type);

        if (!touches) {
          return;
        }

        this.callback(this.manager, type, {
          pointers: touches[0],
          changedPointers: touches[1],
          pointerType: INPUT_TYPE_TOUCH,
          srcEvent: ev
        });
      }
    });
    /**
     * @this {TouchInput}
     * @param {Object} ev
     * @param {Number} type flag
     * @returns {undefined|Array} [all, changed]
     */

    function getTouches(ev, type) {
      var allTouches = toArray(ev.touches);
      var targetIds = this.targetIds; // when there is only one touch, the process can be simplified

      if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
        targetIds[allTouches[0].identifier] = true;
        return [allTouches, allTouches];
      }

      var i,
          targetTouches,
          changedTouches = toArray(ev.changedTouches),
          changedTargetTouches = [],
          target = this.target; // get target touches from touches

      targetTouches = allTouches.filter(function (touch) {
        return hasParent(touch.target, target);
      }); // collect touches

      if (type === INPUT_START) {
        i = 0;

        while (i < targetTouches.length) {
          targetIds[targetTouches[i].identifier] = true;
          i++;
        }
      } // filter changed touches to only contain touches that exist in the collected target ids


      i = 0;

      while (i < changedTouches.length) {
        if (targetIds[changedTouches[i].identifier]) {
          changedTargetTouches.push(changedTouches[i]);
        } // cleanup removed touches


        if (type & (INPUT_END | INPUT_CANCEL)) {
          delete targetIds[changedTouches[i].identifier];
        }

        i++;
      }

      if (!changedTargetTouches.length) {
        return;
      }

      return [// merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
      uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];
    }
    /**
     * Combined touch and mouse input
     *
     * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
     * This because touch devices also emit mouse events while doing a touch.
     *
     * @constructor
     * @extends Input
     */


    var DEDUP_TIMEOUT = 2500;
    var DEDUP_DISTANCE = 25;

    function TouchMouseInput() {
      Input.apply(this, arguments);
      var handler = bindFn(this.handler, this);
      this.touch = new TouchInput(this.manager, handler);
      this.mouse = new MouseInput(this.manager, handler);
      this.primaryTouch = null;
      this.lastTouches = [];
    }

    inherit(TouchMouseInput, Input, {
      /**
       * handle mouse and touch events
       * @param {Hammer} manager
       * @param {String} inputEvent
       * @param {Object} inputData
       */
      handler: function TMEhandler(manager, inputEvent, inputData) {
        var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,
            isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;

        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
          return;
        } // when we're in a touch event, record touches to  de-dupe synthetic mouse event


        if (isTouch) {
          recordTouches.call(this, inputEvent, inputData);
        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
          return;
        }

        this.callback(manager, inputEvent, inputData);
      },

      /**
       * remove the event listeners
       */
      destroy: function destroy() {
        this.touch.destroy();
        this.mouse.destroy();
      }
    });

    function recordTouches(eventType, eventData) {
      if (eventType & INPUT_START) {
        this.primaryTouch = eventData.changedPointers[0].identifier;
        setLastTouch.call(this, eventData);
      } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
        setLastTouch.call(this, eventData);
      }
    }

    function setLastTouch(eventData) {
      var touch = eventData.changedPointers[0];

      if (touch.identifier === this.primaryTouch) {
        var lastTouch = {
          x: touch.clientX,
          y: touch.clientY
        };
        this.lastTouches.push(lastTouch);
        var lts = this.lastTouches;

        var removeLastTouch = function removeLastTouch() {
          var i = lts.indexOf(lastTouch);

          if (i > -1) {
            lts.splice(i, 1);
          }
        };

        setTimeout(removeLastTouch, DEDUP_TIMEOUT);
      }
    }

    function isSyntheticEvent(eventData) {
      var x = eventData.srcEvent.clientX,
          y = eventData.srcEvent.clientY;

      for (var i = 0; i < this.lastTouches.length; i++) {
        var t = this.lastTouches[i];
        var dx = Math.abs(x - t.x),
            dy = Math.abs(y - t.y);

        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
          return true;
        }
      }

      return false;
    }

    var PREFIXED_TOUCH_ACTION = function PREFIXED_TOUCH_ACTION() {
      return prefixed(TEST_ELEMENT().style, 'touchAction');
    };

    var NATIVE_TOUCH_ACTION = function NATIVE_TOUCH_ACTION() {
      return PREFIXED_TOUCH_ACTION() !== undefined;
    }; // magical touchAction value


    var TOUCH_ACTION_COMPUTE = 'compute';
    var TOUCH_ACTION_AUTO = 'auto';
    var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented

    var TOUCH_ACTION_NONE = 'none';
    var TOUCH_ACTION_PAN_X = 'pan-x';
    var TOUCH_ACTION_PAN_Y = 'pan-y';
    /**
     * Touch Action
     * sets the touchAction property or uses the js alternative
     * @param {Manager} manager
     * @param {String} value
     * @constructor
     */

    function TouchAction(manager, value) {
      this.manager = manager;
      this.set(value);
    }

    TouchAction.prototype = {
      /**
       * set the touchAction value on the element or enable the polyfill
       * @param {String} value
       */
      set: function set(value) {
        // find out the touch-action by the event handlers
        if (value == TOUCH_ACTION_COMPUTE) {
          value = this.compute();
        }

        var TOUCH_ACTION_MAP = getTouchActionProps();

        if (NATIVE_TOUCH_ACTION() && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
          this.manager.element.style[PREFIXED_TOUCH_ACTION()] = value;
        }

        this.actions = value.toLowerCase().trim();
      },

      /**
       * just re-set the touchAction value
       */
      update: function update() {
        this.set(this.manager.options.touchAction);
      },

      /**
       * compute the value for the touchAction property based on the recognizer's settings
       * @returns {String} value
       */
      compute: function compute() {
        var actions = [];
        each(this.manager.recognizers, function (recognizer) {
          if (boolOrFn(recognizer.options.enable, [recognizer])) {
            actions = actions.concat(recognizer.getTouchAction());
          }
        });
        return cleanTouchActions(actions.join(' '));
      },

      /**
       * this method is called on each input cycle and provides the preventing of the browser behavior
       * @param {Object} input
       */
      preventDefaults: function preventDefaults(input) {
        var srcEvent = input.srcEvent;
        var direction = input.offsetDirection; // if the touch action did prevented once this session

        if (this.manager.session.prevented) {
          srcEvent.preventDefault();
          return;
        }

        var actions = this.actions;
        var TOUCH_ACTION_MAP = getTouchActionProps();
        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

        if (hasNone) {
          //do not prevent defaults if this is a tap gesture
          var isTapPointer = input.pointers.length === 1;
          var isTapMovement = input.distance < 2;
          var isTapTouchTime = input.deltaTime < 250;

          if (isTapPointer && isTapMovement && isTapTouchTime) {
            return;
          }
        }

        if (hasPanX && hasPanY) {
          // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
          return;
        }

        if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
          return this.preventSrc(srcEvent);
        }
      },

      /**
       * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
       * @param {Object} srcEvent
       */
      preventSrc: function preventSrc(srcEvent) {
        this.manager.session.prevented = true;
        srcEvent.preventDefault();
      }
    };
    /**
     * when the touchActions are collected they are not a valid value, so we need to clean things up. *
     * @param {String} actions
     * @returns {*}
     */

    function cleanTouchActions(actions) {
      // none
      if (inStr(actions, TOUCH_ACTION_NONE)) {
        return TOUCH_ACTION_NONE;
      }

      var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
      var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers
      // for different directions, e.g. horizontal pan but vertical swipe?)
      // we need none (as otherwise with pan-x pan-y combined none of these
      // recognizers will work, since the browser would handle all panning

      if (hasPanX && hasPanY) {
        return TOUCH_ACTION_NONE;
      } // pan-x OR pan-y


      if (hasPanX || hasPanY) {
        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
      } // manipulation


      if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
        return TOUCH_ACTION_MANIPULATION;
      }

      return TOUCH_ACTION_AUTO;
    }

    function getTouchActionProps() {
      if (!NATIVE_TOUCH_ACTION()) {
        return false;
      }

      var touchMap = {};

      var cssSupports = function cssSupports() {
        return window.CSS && window.CSS.supports;
      };

      ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {
        // If css.supports is not supported but there is native touch-action assume it supports
        // all values. This is the case for IE 10 and 11.
        touchMap[val] = cssSupports() ? window.CSS.supports('touch-action', val) : true;
      });
      return touchMap;
    }
    /**
     * Recognizer flow explained; *
     * All recognizers have the initial state of POSSIBLE when a input session starts.
     * The definition of a input session is from the first input until the last input, with all it's movement in it. *
     * Example session for mouse-input: mousedown -> mousemove -> mouseup
     *
     * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
     * which determines with state it should be.
     *
     * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
     * POSSIBLE to give it another change on the next cycle.
     *
     *               Possible
     *                  |
     *            +-----+---------------+
     *            |                     |
     *      +-----+-----+               |
     *      |           |               |
     *   Failed      Cancelled          |
     *                          +-------+------+
     *                          |              |
     *                      Recognized       Began
     *                                         |
     *                                      Changed
     *                                         |
     *                                  Ended/Recognized
     */


    var STATE_POSSIBLE = 1;
    var STATE_BEGAN = 2;
    var STATE_CHANGED = 4;
    var STATE_ENDED = 8;
    var STATE_RECOGNIZED = STATE_ENDED;
    var STATE_CANCELLED = 16;
    var STATE_FAILED = 32;
    /**
     * Recognizer
     * Every recognizer needs to extend from this class.
     * @constructor
     * @param {Object} options
     */

    function Recognizer(options) {
      this.options = assign({}, this.defaults, options || {});
      this.id = uniqueId();
      this.manager = null; // default is enable true

      this.options.enable = ifUndefined(this.options.enable, true);
      this.state = STATE_POSSIBLE;
      this.simultaneous = {};
      this.requireFail = [];
    }

    Recognizer.prototype = {
      /**
       * @virtual
       * @type {Object}
       */
      defaults: {},

      /**
       * set options
       * @param {Object} options
       * @return {Recognizer}
       */
      set: function set(options) {
        assign(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state

        this.manager && this.manager.touchAction.update();
        return this;
      },

      /**
       * recognize simultaneous with an other recognizer.
       * @param {Recognizer} otherRecognizer
       * @returns {Recognizer} this
       */
      recognizeWith: function recognizeWith(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
          return this;
        }

        var simultaneous = this.simultaneous;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);

        if (!simultaneous[otherRecognizer.id]) {
          simultaneous[otherRecognizer.id] = otherRecognizer;
          otherRecognizer.recognizeWith(this);
        }

        return this;
      },

      /**
       * drop the simultaneous link. it doesnt remove the link on the other recognizer.
       * @param {Recognizer} otherRecognizer
       * @returns {Recognizer} this
       */
      dropRecognizeWith: function dropRecognizeWith(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
          return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        delete this.simultaneous[otherRecognizer.id];
        return this;
      },

      /**
       * recognizer can only run when an other is failing
       * @param {Recognizer} otherRecognizer
       * @returns {Recognizer} this
       */
      requireFailure: function requireFailure(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
          return this;
        }

        var requireFail = this.requireFail;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);

        if (inArray(requireFail, otherRecognizer) === -1) {
          requireFail.push(otherRecognizer);
          otherRecognizer.requireFailure(this);
        }

        return this;
      },

      /**
       * drop the requireFailure link. it does not remove the link on the other recognizer.
       * @param {Recognizer} otherRecognizer
       * @returns {Recognizer} this
       */
      dropRequireFailure: function dropRequireFailure(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
          return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        var index = inArray(this.requireFail, otherRecognizer);

        if (index > -1) {
          this.requireFail.splice(index, 1);
        }

        return this;
      },

      /**
       * has require failures boolean
       * @returns {boolean}
       */
      hasRequireFailures: function hasRequireFailures() {
        return this.requireFail.length > 0;
      },

      /**
       * if the recognizer can recognize simultaneous with an other recognizer
       * @param {Recognizer} otherRecognizer
       * @returns {Boolean}
       */
      canRecognizeWith: function canRecognizeWith(otherRecognizer) {
        return !!this.simultaneous[otherRecognizer.id];
      },

      /**
       * You should use `tryEmit` instead of `emit` directly to check
       * that all the needed recognizers has failed before emitting.
       * @param {Object} input
       */
      emit: function emit(input) {
        var self = this;
        var state = this.state;

        function emit(event) {
          self.manager.emit(event, input);
        } // 'panstart' and 'panmove'


        if (state < STATE_ENDED) {
          emit(self.options.event + stateStr(state));
        }

        emit(self.options.event); // simple 'eventName' events

        if (input.additionalEvent) {
          // additional event(panleft, panright, pinchin, pinchout...)
          emit(input.additionalEvent);
        } // panend and pancancel


        if (state >= STATE_ENDED) {
          emit(self.options.event + stateStr(state));
        }
      },

      /**
       * Check that all the require failure recognizers has failed,
       * if true, it emits a gesture event,
       * otherwise, setup the state to FAILED.
       * @param {Object} input
       */
      tryEmit: function tryEmit(input) {
        if (this.canEmit()) {
          return this.emit(input);
        } // it's failing anyway


        this.state = STATE_FAILED;
      },

      /**
       * can we emit?
       * @returns {boolean}
       */
      canEmit: function canEmit() {
        var i = 0;

        while (i < this.requireFail.length) {
          if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
            return false;
          }

          i++;
        }

        return true;
      },

      /**
       * update the recognizer
       * @param {Object} inputData
       */
      recognize: function recognize(inputData) {
        // make a new copy of the inputData
        // so we can change the inputData without messing up the other recognizers
        var inputDataClone = assign({}, inputData); // is is enabled and allow recognizing?

        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
          this.reset();
          this.state = STATE_FAILED;
          return;
        } // reset when we've reached the end


        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
          this.state = STATE_POSSIBLE;
        }

        this.state = this.process(inputDataClone); // the recognizer has recognized a gesture
        // so trigger an event

        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
          this.tryEmit(inputDataClone);
        }
      },

      /**
       * return the state of the recognizer
       * the actual recognizing happens in this method
       * @virtual
       * @param {Object} inputData
       * @returns {Const} STATE
       */
      process: function process(inputData) {},
      // jshint ignore:line

      /**
       * return the preferred touch-action
       * @virtual
       * @returns {Array}
       */
      getTouchAction: function getTouchAction() {},

      /**
       * called when the gesture isn't allowed to recognize
       * like when another is being recognized or it is disabled
       * @virtual
       */
      reset: function reset() {}
    };
    /**
     * get a usable string, used as event postfix
     * @param {Const} state
     * @returns {String} state
     */

    function stateStr(state) {
      if (state & STATE_CANCELLED) {
        return 'cancel';
      } else if (state & STATE_ENDED) {
        return 'end';
      } else if (state & STATE_CHANGED) {
        return 'move';
      } else if (state & STATE_BEGAN) {
        return 'start';
      }

      return '';
    }
    /**
     * direction cons to string
     * @param {Const} direction
     * @returns {String}
     */


    function directionStr(direction) {
      if (direction == DIRECTION_DOWN) {
        return 'down';
      } else if (direction == DIRECTION_UP) {
        return 'up';
      } else if (direction == DIRECTION_LEFT) {
        return 'left';
      } else if (direction == DIRECTION_RIGHT) {
        return 'right';
      }

      return '';
    }
    /**
     * get a recognizer by name if it is bound to a manager
     * @param {Recognizer|String} otherRecognizer
     * @param {Recognizer} recognizer
     * @returns {Recognizer}
     */


    function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
      var manager = recognizer.manager;

      if (manager) {
        return manager.get(otherRecognizer);
      }

      return otherRecognizer;
    }
    /**
     * This recognizer is just used as a base for the simple attribute recognizers.
     * @constructor
     * @extends Recognizer
     */


    function AttrRecognizer() {
      Recognizer.apply(this, arguments);
    }

    inherit(AttrRecognizer, Recognizer, {
      /**
       * @namespace
       * @memberof AttrRecognizer
       */
      defaults: {
        /**
         * @type {Number}
         * @default 1
         */
        pointers: 1
      },

      /**
       * Used to check if it the recognizer receives valid input, like input.distance > 10.
       * @memberof AttrRecognizer
       * @param {Object} input
       * @returns {Boolean} recognized
       */
      attrTest: function attrTest(input) {
        var optionPointers = this.options.pointers;
        return optionPointers === 0 || input.pointers.length === optionPointers;
      },

      /**
       * Process the input and return the state for the recognizer
       * @memberof AttrRecognizer
       * @param {Object} input
       * @returns {*} State
       */
      process: function process(input) {
        var state = this.state;
        var eventType = input.eventType;
        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
        var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED

        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
          return state | STATE_CANCELLED;
        } else if (isRecognized || isValid) {
          if (eventType & INPUT_END) {
            return state | STATE_ENDED;
          } else if (!(state & STATE_BEGAN)) {
            return STATE_BEGAN;
          }

          return state | STATE_CHANGED;
        }

        return STATE_FAILED;
      }
    });
    /**
     * Pan
     * Recognized when the pointer is down and moved in the allowed direction.
     * @constructor
     * @extends AttrRecognizer
     */

    function PanRecognizer() {
      AttrRecognizer.apply(this, arguments);
      this.pX = null;
      this.pY = null;
    }

    inherit(PanRecognizer, AttrRecognizer, {
      /**
       * @namespace
       * @memberof PanRecognizer
       */
      defaults: {
        event: 'pan',
        threshold: 10,
        pointers: 1,
        direction: DIRECTION_ALL
      },
      getTouchAction: function getTouchAction() {
        var direction = this.options.direction;
        var actions = [];

        if (direction & DIRECTION_HORIZONTAL) {
          actions.push(TOUCH_ACTION_PAN_Y);
        }

        if (direction & DIRECTION_VERTICAL) {
          actions.push(TOUCH_ACTION_PAN_X);
        }

        return actions;
      },
      directionTest: function directionTest(input) {
        var options = this.options;
        var hasMoved = true;
        var distance = input.distance;
        var direction = input.direction;
        var x = input.deltaX;
        var y = input.deltaY; // lock to axis?

        if (!(direction & options.direction)) {
          if (options.direction & DIRECTION_HORIZONTAL) {
            direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
            hasMoved = x != this.pX;
            distance = Math.abs(input.deltaX);
          } else {
            direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
            hasMoved = y != this.pY;
            distance = Math.abs(input.deltaY);
          }
        }

        input.direction = direction;
        return hasMoved && distance > options.threshold && direction & options.direction;
      },
      attrTest: function attrTest(input) {
        return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
      },
      emit: function emit(input) {
        this.pX = input.deltaX;
        this.pY = input.deltaY;
        var direction = directionStr(input.direction);

        if (direction) {
          input.additionalEvent = this.options.event + direction;
        }

        this._super.emit.call(this, input);
      }
    });
    /**
     * Pinch
     * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
     * @constructor
     * @extends AttrRecognizer
     */

    function PinchRecognizer() {
      AttrRecognizer.apply(this, arguments);
    }

    inherit(PinchRecognizer, AttrRecognizer, {
      /**
       * @namespace
       * @memberof PinchRecognizer
       */
      defaults: {
        event: 'pinch',
        threshold: 0,
        pointers: 2
      },
      getTouchAction: function getTouchAction() {
        return [TOUCH_ACTION_NONE];
      },
      attrTest: function attrTest(input) {
        return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
      },
      emit: function emit(input) {
        if (input.scale !== 1) {
          var inOut = input.scale < 1 ? 'in' : 'out';
          input.additionalEvent = this.options.event + inOut;
        }

        this._super.emit.call(this, input);
      }
    });
    /**
     * Press
     * Recognized when the pointer is down for x ms without any movement.
     * @constructor
     * @extends Recognizer
     */

    function PressRecognizer() {
      Recognizer.apply(this, arguments);
      this._timer = null;
      this._input = null;
    }

    inherit(PressRecognizer, Recognizer, {
      /**
       * @namespace
       * @memberof PressRecognizer
       */
      defaults: {
        event: 'press',
        pointers: 1,
        time: 251,
        // minimal time of the pointer to be pressed
        threshold: 9 // a minimal movement is ok, but keep it low

      },
      getTouchAction: function getTouchAction() {
        return [TOUCH_ACTION_AUTO];
      },
      process: function process(input) {
        var options = this.options;
        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTime = input.deltaTime > options.time;
        this._input = input; // we only allow little movement
        // and we've reached an end event, so a tap is possible

        if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
          this.reset();
        } else if (input.eventType & INPUT_START) {
          this.reset();
          this._timer = setTimeoutContext(function () {
            this.state = STATE_RECOGNIZED;
            this.tryEmit();
          }, options.time, this);
        } else if (input.eventType & INPUT_END) {
          return STATE_RECOGNIZED;
        }

        return STATE_FAILED;
      },
      reset: function reset() {
        clearTimeout(this._timer);
      },
      emit: function emit(input) {
        if (this.state !== STATE_RECOGNIZED) {
          return;
        }

        if (input && input.eventType & INPUT_END) {
          this.manager.emit(this.options.event + 'up', input);
        } else {
          this._input.timeStamp = now();
          this.manager.emit(this.options.event, this._input);
        }
      }
    });
    /**
     * Rotate
     * Recognized when two or more pointer are moving in a circular motion.
     * @constructor
     * @extends AttrRecognizer
     */

    function RotateRecognizer() {
      AttrRecognizer.apply(this, arguments);
    }

    inherit(RotateRecognizer, AttrRecognizer, {
      /**
       * @namespace
       * @memberof RotateRecognizer
       */
      defaults: {
        event: 'rotate',
        threshold: 0,
        pointers: 2
      },
      getTouchAction: function getTouchAction() {
        return [TOUCH_ACTION_NONE];
      },
      attrTest: function attrTest(input) {
        return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
      }
    });
    /**
     * Swipe
     * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
     * @constructor
     * @extends AttrRecognizer
     */

    function SwipeRecognizer() {
      AttrRecognizer.apply(this, arguments);
    }

    inherit(SwipeRecognizer, AttrRecognizer, {
      /**
       * @namespace
       * @memberof SwipeRecognizer
       */
      defaults: {
        event: 'swipe',
        threshold: 10,
        velocity: 0.3,
        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
        pointers: 1
      },
      getTouchAction: function getTouchAction() {
        return PanRecognizer.prototype.getTouchAction.call(this);
      },
      attrTest: function attrTest(input) {
        var direction = this.options.direction;
        var velocity;

        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
          velocity = input.overallVelocity;
        } else if (direction & DIRECTION_HORIZONTAL) {
          velocity = input.overallVelocityX;
        } else if (direction & DIRECTION_VERTICAL) {
          velocity = input.overallVelocityY;
        }

        return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
      },
      emit: function emit(input) {
        var direction = directionStr(input.offsetDirection);

        if (direction) {
          this.manager.emit(this.options.event + direction, input);
        }

        this.manager.emit(this.options.event, input);
      }
    });
    /**
     * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
     * between the given interval and position. The delay option can be used to recognize multi-taps without firing
     * a single tap.
     *
     * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
     * multi-taps being recognized.
     * @constructor
     * @extends Recognizer
     */

    function TapRecognizer() {
      Recognizer.apply(this, arguments); // previous time and center,
      // used for tap counting

      this.pTime = false;
      this.pCenter = false;
      this._timer = null;
      this._input = null;
      this.count = 0;
    }

    inherit(TapRecognizer, Recognizer, {
      /**
       * @namespace
       * @memberof PinchRecognizer
       */
      defaults: {
        event: 'tap',
        pointers: 1,
        taps: 1,
        interval: 300,
        // max time between the multi-tap taps
        time: 250,
        // max time of the pointer to be down (like finger on the screen)
        threshold: 9,
        // a minimal movement is ok, but keep it low
        posThreshold: 10 // a multi-tap can be a bit off the initial position

      },
      getTouchAction: function getTouchAction() {
        return [TOUCH_ACTION_MANIPULATION];
      },
      process: function process(input) {
        var options = this.options;
        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTouchTime = input.deltaTime < options.time;
        this.reset();

        if (input.eventType & INPUT_START && this.count === 0) {
          return this.failTimeout();
        } // we only allow little movement
        // and we've reached an end event, so a tap is possible


        if (validMovement && validTouchTime && validPointers) {
          if (input.eventType != INPUT_END) {
            return this.failTimeout();
          }

          var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
          var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
          this.pTime = input.timeStamp;
          this.pCenter = input.center;

          if (!validMultiTap || !validInterval) {
            this.count = 1;
          } else {
            this.count += 1;
          }

          this._input = input; // if tap count matches we have recognized it,
          // else it has began recognizing...

          var tapCount = this.count % options.taps;

          if (tapCount === 0) {
            // no failing requirements, immediately trigger the tap event
            // or wait as long as the multitap interval to trigger
            if (!this.hasRequireFailures()) {
              return STATE_RECOGNIZED;
            } else {
              this._timer = setTimeoutContext(function () {
                this.state = STATE_RECOGNIZED;
                this.tryEmit();
              }, options.interval, this);
              return STATE_BEGAN;
            }
          }
        }

        return STATE_FAILED;
      },
      failTimeout: function failTimeout() {
        this._timer = setTimeoutContext(function () {
          this.state = STATE_FAILED;
        }, this.options.interval, this);
        return STATE_FAILED;
      },
      reset: function reset() {
        clearTimeout(this._timer);
      },
      emit: function emit() {
        if (this.state == STATE_RECOGNIZED) {
          this._input.tapCount = this.count;
          this.manager.emit(this.options.event, this._input);
        }
      }
    });
    /**
     * Simple way to create a manager with a default set of recognizers.
     * @param {HTMLElement} element
     * @param {Object} [options]
     * @constructor
     */

    function Hammer(element, options) {
      options = options || {};
      options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
      return new Manager(element, options);
    }
    /**
     * @const {string}
     */


    Hammer.VERSION = '2.0.7';
    /**
     * default settings
     * @namespace
     */

    Hammer.defaults = {
      /**
       * set if DOM events are being triggered.
       * But this is slower and unused by simple implementations, so disabled by default.
       * @type {Boolean}
       * @default false
       */
      domEvents: false,

      /**
       * The value for the touchAction property/fallback.
       * When set to `compute` it will magically set the correct value based on the added recognizers.
       * @type {String}
       * @default compute
       */
      touchAction: TOUCH_ACTION_COMPUTE,

      /**
       * @type {Boolean}
       * @default true
       */
      enable: true,

      /**
       * EXPERIMENTAL FEATURE -- can be removed/changed
       * Change the parent input target element.
       * If Null, then it is being set the to main element.
       * @type {Null|EventTarget}
       * @default null
       */
      inputTarget: null,

      /**
       * force an input class
       * @type {Null|Function}
       * @default null
       */
      inputClass: null,

      /**
       * Default recognizer setup when calling `Hammer()`
       * When creating a new Manager these will be skipped.
       * @type {Array}
       */
      preset: [// RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
      [RotateRecognizer, {
        enable: false
      }], [PinchRecognizer, {
        enable: false
      }, ['rotate']], [SwipeRecognizer, {
        direction: DIRECTION_HORIZONTAL
      }], [PanRecognizer, {
        direction: DIRECTION_HORIZONTAL
      }, ['swipe']], [TapRecognizer], [TapRecognizer, {
        event: 'doubletap',
        taps: 2
      }, ['tap']], [PressRecognizer]],

      /**
       * Some CSS properties can be used to improve the working of Hammer.
       * Add them to this method and they will be set when creating a new Manager.
       * @namespace
       */
      cssProps: {
        /**
         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userSelect: 'none',

        /**
         * Disable the Windows Phone grippers when pressing an element.
         * @type {String}
         * @default 'none'
         */
        touchSelect: 'none',

        /**
         * Disables the default callout shown when you touch and hold a touch target.
         * On iOS, when you touch and hold a touch target such as a link, Safari displays
         * a callout containing information about the link. This property allows you to disable that callout.
         * @type {String}
         * @default 'none'
         */
        touchCallout: 'none',

        /**
         * Specifies whether zooming is enabled. Used by IE10>
         * @type {String}
         * @default 'none'
         */
        contentZooming: 'none',

        /**
         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userDrag: 'none',

        /**
         * Overrides the highlight color shown when the user taps a link or a JavaScript
         * clickable element in iOS. This property obeys the alpha value, if specified.
         * @type {String}
         * @default 'rgba(0,0,0,0)'
         */
        tapHighlightColor: 'rgba(0,0,0,0)'
      }
    };
    var STOP = 1;
    var FORCED_STOP = 2;
    /**
     * Manager
     * @param {HTMLElement} element
     * @param {Object} [options]
     * @constructor
     */

    function Manager(element, options) {
      this.options = assign({}, Hammer.defaults, options || {});
      this.options.inputTarget = this.options.inputTarget || element;
      this.handlers = {};
      this.session = {};
      this.recognizers = [];
      this.oldCssProps = {};
      this.element = element;
      this.input = createInputInstance(this);
      this.touchAction = new TouchAction(this, this.options.touchAction);
      toggleCssProps(this, true);
      each(this.options.recognizers, function (item) {
        var recognizer = this.add(new item[0](item[1]));
        item[2] && recognizer.recognizeWith(item[2]);
        item[3] && recognizer.requireFailure(item[3]);
      }, this);
    }

    Manager.prototype = {
      /**
       * set options
       * @param {Object} options
       * @returns {Manager}
       */
      set: function set(options) {
        assign(this.options, options); // Options that need a little more setup

        if (options.touchAction) {
          this.touchAction.update();
        }

        if (options.inputTarget) {
          // Clean up existing event listeners and reinitialize
          this.input.destroy();
          this.input.target = options.inputTarget;
          this.input.init();
        }

        return this;
      },

      /**
       * stop recognizing for this session.
       * This session will be discarded, when a new [input]start event is fired.
       * When forced, the recognizer cycle is stopped immediately.
       * @param {Boolean} [force]
       */
      stop: function stop(force) {
        this.session.stopped = force ? FORCED_STOP : STOP;
      },

      /**
       * run the recognizers!
       * called by the inputHandler function on every movement of the pointers (touches)
       * it walks through all the recognizers and tries to detect the gesture that is being made
       * @param {Object} inputData
       */
      recognize: function recognize(inputData) {
        var session = this.session;

        if (session.stopped) {
          return;
        } // run the touch-action polyfill


        this.touchAction.preventDefaults(inputData);
        var recognizer;
        var recognizers = this.recognizers; // this holds the recognizer that is being recognized.
        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
        // if no recognizer is detecting a thing, it is set to `null`

        var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized
        // or when we're in a new session

        if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
          curRecognizer = session.curRecognizer = null;
        }

        var i = 0;

        while (i < recognizers.length) {
          recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.
          // 1.   allow if the session is NOT forced stopped (see the .stop() method)
          // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
          //      that is being recognized.
          // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
          //      this can be setup with the `recognizeWith()` method on the recognizer.

          if (session.stopped !== FORCED_STOP && ( // 1
          !curRecognizer || recognizer == curRecognizer || // 2
          recognizer.canRecognizeWith(curRecognizer))) {
            // 3
            recognizer.recognize(inputData);
          } else {
            recognizer.reset();
          } // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
          // current active recognizer. but only if we don't already have an active recognizer


          if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
            curRecognizer = session.curRecognizer = recognizer;
          }

          i++;
        }
      },

      /**
       * get a recognizer by its event name.
       * @param {Recognizer|String} recognizer
       * @returns {Recognizer|Null}
       */
      get: function get(recognizer) {
        if (recognizer instanceof Recognizer) {
          return recognizer;
        }

        var recognizers = this.recognizers;

        for (var i = 0; i < recognizers.length; i++) {
          if (recognizers[i].options.event == recognizer) {
            return recognizers[i];
          }
        }

        return null;
      },

      /**
       * add a recognizer to the manager
       * existing recognizers with the same event name will be removed
       * @param {Recognizer} recognizer
       * @returns {Recognizer|Manager}
       */
      add: function add(recognizer) {
        if (invokeArrayArg(recognizer, 'add', this)) {
          return this;
        } // remove existing


        var existing = this.get(recognizer.options.event);

        if (existing) {
          this.remove(existing);
        }

        this.recognizers.push(recognizer);
        recognizer.manager = this;
        this.touchAction.update();
        return recognizer;
      },

      /**
       * remove a recognizer by name or instance
       * @param {Recognizer|String} recognizer
       * @returns {Manager}
       */
      remove: function remove(recognizer) {
        if (invokeArrayArg(recognizer, 'remove', this)) {
          return this;
        }

        recognizer = this.get(recognizer); // let's make sure this recognizer exists

        if (recognizer) {
          var recognizers = this.recognizers;
          var index = inArray(recognizers, recognizer);

          if (index !== -1) {
            recognizers.splice(index, 1);
            this.touchAction.update();
          }
        }

        return this;
      },

      /**
       * bind event
       * @param {String} events
       * @param {Function} handler
       * @returns {EventEmitter} this
       */
      on: function on(events, handler) {
        if (events === undefined) {
          return;
        }

        if (handler === undefined) {
          return;
        }

        var handlers = this.handlers;
        each(splitStr(events), function (event) {
          handlers[event] = handlers[event] || [];
          handlers[event].push(handler);
        });
        return this;
      },

      /**
       * unbind event, leave emit blank to remove all handlers
       * @param {String} events
       * @param {Function} [handler]
       * @returns {EventEmitter} this
       */
      off: function off(events, handler) {
        if (events === undefined) {
          return;
        }

        var handlers = this.handlers;
        each(splitStr(events), function (event) {
          if (!handler) {
            delete handlers[event];
          } else {
            handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
          }
        });
        return this;
      },

      /**
       * emit event to the listeners
       * @param {String} event
       * @param {Object} data
       */
      emit: function emit(event, data) {
        // we also want to trigger dom events
        if (this.options.domEvents) {
          triggerDomEvent(event, data);
        } // no handlers, so skip it all


        var handlers = this.handlers[event] && this.handlers[event].slice();

        if (!handlers || !handlers.length) {
          return;
        }

        data.type = event;

        data.preventDefault = function () {
          data.srcEvent.preventDefault();
        };

        var i = 0;

        while (i < handlers.length) {
          handlers[i](data);
          i++;
        }
      },

      /**
       * destroy the manager and unbinds all events
       * it doesn't unbind dom events, that is the user own responsibility
       */
      destroy: function destroy() {
        this.element && toggleCssProps(this, false);
        this.handlers = {};
        this.session = {};
        this.input.destroy();
        this.element = null;
      }
    };
    /**
     * add/remove the css properties as defined in manager.options.cssProps
     * @param {Manager} manager
     * @param {Boolean} add
     */

    function toggleCssProps(manager, add) {
      var element = manager.element;

      if (!element.style) {
        return;
      }

      var prop;
      each(manager.options.cssProps, function (value, name) {
        prop = prefixed(element.style, name);

        if (add) {
          manager.oldCssProps[prop] = element.style[prop];
          element.style[prop] = value;
        } else {
          element.style[prop] = manager.oldCssProps[prop] || '';
        }
      });

      if (!add) {
        manager.oldCssProps = {};
      }
    }
    /**
     * trigger dom event
     * @param {String} event
     * @param {Object} data
     */


    function triggerDomEvent(event, data) {
      var gestureEvent = document.createEvent('Event');
      gestureEvent.initEvent(event, true, true);
      gestureEvent.gesture = data;
      data.target.dispatchEvent(gestureEvent);
    }

    assign(Hammer, {
      INPUT_START: INPUT_START,
      INPUT_MOVE: INPUT_MOVE,
      INPUT_END: INPUT_END,
      INPUT_CANCEL: INPUT_CANCEL,
      STATE_POSSIBLE: STATE_POSSIBLE,
      STATE_BEGAN: STATE_BEGAN,
      STATE_CHANGED: STATE_CHANGED,
      STATE_ENDED: STATE_ENDED,
      STATE_RECOGNIZED: STATE_RECOGNIZED,
      STATE_CANCELLED: STATE_CANCELLED,
      STATE_FAILED: STATE_FAILED,
      DIRECTION_NONE: DIRECTION_NONE,
      DIRECTION_LEFT: DIRECTION_LEFT,
      DIRECTION_RIGHT: DIRECTION_RIGHT,
      DIRECTION_UP: DIRECTION_UP,
      DIRECTION_DOWN: DIRECTION_DOWN,
      DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
      DIRECTION_VERTICAL: DIRECTION_VERTICAL,
      DIRECTION_ALL: DIRECTION_ALL,
      Manager: Manager,
      Input: Input,
      TouchAction: TouchAction,
      TouchInput: TouchInput,
      MouseInput: MouseInput,
      PointerEventInput: PointerEventInput,
      TouchMouseInput: TouchMouseInput,
      SingleTouchInput: SingleTouchInput,
      Recognizer: Recognizer,
      AttrRecognizer: AttrRecognizer,
      Tap: TapRecognizer,
      Pan: PanRecognizer,
      Swipe: SwipeRecognizer,
      Pinch: PinchRecognizer,
      Rotate: RotateRecognizer,
      Press: PressRecognizer,
      on: addEventListeners,
      off: removeEventListeners,
      each: each,
      merge: merge,
      extend: extend,
      assign: assign,
      inherit: inherit,
      bindFn: bindFn,
      prefixed: prefixed
    });
    var hammer = Hammer;

    var microevent = createCommonjsModule$$1(function (module) {
    /**
     * MicroEvent - to make any js object an event emitter (server or browser)
     * 
     * - pure javascript - server compatible, browser compatible
     * - dont rely on the browser doms
     * - super simple - you get it immediatly, no mistery, no magic involved
     *
     * - create a MicroEventDebug with goodies to debug
     *   - make it safer to use
    */

    var MicroEvent	= function(){};
    MicroEvent.prototype	= {
    	bind	: function(event, fct){
    		this._events = this._events || {};
    		this._events[event] = this._events[event]	|| [];
    		this._events[event].push(fct);
    	},
    	unbind	: function(event, fct){
    		this._events = this._events || {};
    		if( event in this._events === false  )	return;
    		this._events[event].splice(this._events[event].indexOf(fct), 1);
    	},
    	trigger	: function(event /* , args... */){
    		this._events = this._events || {};
    		if( event in this._events === false  )	return;
    		for(var i = 0; i < this._events[event].length; i++){
    			this._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));
    		}
    	}
    };

    /**
     * mixin will delegate all MicroEvent.js function in the destination object
     *
     * - require('MicroEvent').mixin(Foobar) will make Foobar able to use MicroEvent
     *
     * @param {Object} the object which will support MicroEvent
    */
    MicroEvent.mixin	= function(destObject){
    	var props	= ['bind', 'unbind', 'trigger'];
    	for(var i = 0; i < props.length; i ++){
    		destObject.prototype[props[i]]	= MicroEvent.prototype[props[i]];
    	}
    };

    // export in common js
    if( 'exports' in module){
    	module.exports	= MicroEvent;
    }
    });

    var PageSpread;

    var page_spread = PageSpread =
    /*#__PURE__*/
    function () {
      function PageSpread(el) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, PageSpread);

        this.el = el;
        this.options = options;
        this.visibility = 'gone';
        this.positioned = false;
        this.active = false;
        this.id = this.options.id;
        this.type = this.options.type;
        this.pageIds = this.options.pageIds;
        this.width = this.options.width;
        this.left = this.options.left;
        this.maxZoomScale = this.options.maxZoomScale;
        return;
      }

      _createClass(PageSpread, [{
        key: "isZoomable",
        value: function isZoomable() {
          return this.getMaxZoomScale() > 1 && this.getEl().getAttribute('data-zoomable') !== 'false';
        }
      }, {
        key: "isScrollable",
        value: function isScrollable() {
          return this.getEl().classList.contains('verso--scrollable');
        }
      }, {
        key: "getEl",
        value: function getEl() {
          return this.el;
        }
      }, {
        key: "getOverlayEls",
        value: function getOverlayEls() {
          return this.getEl().querySelectorAll('.verso__overlay');
        }
      }, {
        key: "getPageEls",
        value: function getPageEls() {
          return this.getEl().querySelectorAll('.verso__page');
        }
      }, {
        key: "getRect",
        value: function getRect() {
          return this.getEl().getBoundingClientRect();
        }
      }, {
        key: "getContentRect",
        value: function getContentRect() {
          var i, len, pageEl, pageRect, rect, ref, ref1, ref2, ref3, ref4;
          rect = {
            top: null,
            left: null,
            right: null,
            bottom: null,
            width: null,
            height: null
          };
          ref = this.getPageEls();

          for (i = 0, len = ref.length; i < len; i++) {
            pageEl = ref[i];
            pageRect = pageEl.getBoundingClientRect();

            if (pageRect.top < rect.top || rect.top == null) {
              rect.top = pageRect.top;
            }

            if (pageRect.left < rect.left || rect.left == null) {
              rect.left = pageRect.left;
            }

            if (pageRect.right > rect.right || rect.right == null) {
              rect.right = pageRect.right;
            }

            if (pageRect.bottom > rect.bottom || rect.bottom == null) {
              rect.bottom = pageRect.bottom;
            }
          }

          rect.top = (ref1 = rect.top) != null ? ref1 : 0;
          rect.left = (ref2 = rect.left) != null ? ref2 : 0;
          rect.right = (ref3 = rect.right) != null ? ref3 : 0;
          rect.bottom = (ref4 = rect.bottom) != null ? ref4 : 0;
          rect.width = rect.right - rect.left;
          rect.height = rect.bottom - rect.top;
          return rect;
        }
      }, {
        key: "getId",
        value: function getId() {
          return this.id;
        }
      }, {
        key: "getType",
        value: function getType() {
          return this.type;
        }
      }, {
        key: "getPageIds",
        value: function getPageIds() {
          return this.pageIds;
        }
      }, {
        key: "getWidth",
        value: function getWidth() {
          return this.width;
        }
      }, {
        key: "getLeft",
        value: function getLeft() {
          return this.left;
        }
      }, {
        key: "getMaxZoomScale",
        value: function getMaxZoomScale() {
          return this.maxZoomScale;
        }
      }, {
        key: "getVisibility",
        value: function getVisibility() {
          return this.visibility;
        }
      }, {
        key: "setVisibility",
        value: function setVisibility(visibility) {
          if (this.visibility !== visibility) {
            this.getEl().style.display = visibility === 'visible' ? 'block' : 'none';
            this.visibility = visibility;
          }

          return this;
        }
      }, {
        key: "position",
        value: function position() {
          if (this.positioned === false) {
            this.getEl().style.left = "".concat(this.getLeft(), "%");
            this.positioned = true;
          }

          return this;
        }
      }, {
        key: "activate",
        value: function activate() {
          this.active = true;
          this.getEl().setAttribute('data-active', this.active);
        }
      }, {
        key: "deactivate",
        value: function deactivate() {
          this.active = false;
          this.getEl().setAttribute('data-active', this.active);
        }
      }]);

      return PageSpread;
    }();

    var Animation;

    var animation = Animation =
    /*#__PURE__*/
    function () {
      function Animation(el) {
        _classCallCheck(this, Animation);

        this.el = el;
        this.run = 0;
        return;
      }

      _createClass(Animation, [{
        key: "animate",
        value: function animate() {
          var _this = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

          var duration, easing, ref, ref1, ref2, ref3, ref4, run, scale, transform, _transitionEnd, x, y;

          x = (ref = options.x) != null ? ref : 0;
          y = (ref1 = options.y) != null ? ref1 : 0;
          scale = (ref2 = options.scale) != null ? ref2 : 1;
          easing = (ref3 = options.easing) != null ? ref3 : 'ease-out';
          duration = (ref4 = options.duration) != null ? ref4 : 0;
          run = ++this.run;
          transform = "translateX(".concat(x, ") translateY(").concat(y, ") scale(").concat(scale, ")");

          if (this.el.style.transform === transform) {
            callback();
          } else if (duration > 0) {
            _transitionEnd = function transitionEnd() {
              if (run !== _this.run) {
                return;
              }

              _this.el.removeEventListener('transitionend', _transitionEnd);

              _this.el.style.transition = 'none';
              callback();
            };

            this.el.addEventListener('transitionend', _transitionEnd, false);
            this.el.style.transition = "transform ".concat(easing, " ").concat(duration, "ms");
            this.el.style.transform = transform;
          } else {
            this.el.style.transition = 'none';
            this.el.style.transform = transform;
            callback();
          }

          return this;
        }
      }]);

      return Animation;
    }();

    var Animation$1, Hammer$1, MicroEvent, PageSpread$1, Verso;
    Hammer$1 = hammer;
    MicroEvent = microevent;
    PageSpread$1 = page_spread;
    Animation$1 = animation;

    Verso =
    /*#__PURE__*/
    function () {
      function Verso(el1) {
        var options1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, Verso);

        var ref, ref1, ref2, ref3, ref4, ref5;
        this.el = el1;
        this.options = options1;
        this.swipeVelocity = (ref = this.options.swipeVelocity) != null ? ref : 0.3;
        this.swipeThreshold = (ref1 = this.options.swipeThreshold) != null ? ref1 : 10;
        this.navigationDuration = (ref2 = this.options.navigationDuration) != null ? ref2 : 240;
        this.navigationPanDuration = (ref3 = this.options.navigationPanDuration) != null ? ref3 : 200;
        this.zoomDuration = (ref4 = this.options.zoomDuration) != null ? ref4 : 200;
        this.doubleTapDelay = (ref5 = this.options.doubleTapDelay) != null ? ref5 : 300;
        this.position = -1;
        this.pinching = false;
        this.panning = false;
        this.transform = {
          left: 0,
          top: 0,
          scale: 1
        };
        this.startTransform = {
          left: 0,
          top: 0,
          scale: 1
        };
        this.tap = {
          count: 0,
          delay: this.doubleTapDelay
        };
        this.scrollerEl = this.el.querySelector('.verso__scroller');
        this.pageSpreadEls = this.el.querySelectorAll('.verso__page-spread');
        this.pageSpreads = this.traversePageSpreads(this.pageSpreadEls);
        this.pageIds = this.buildPageIds(this.pageSpreads);
        this.animation = new Animation$1(this.scrollerEl);
        this.hammer = new Hammer$1.Manager(this.scrollerEl, {
          touchAction: 'none',
          enable: false,
          inputClass: this.getHammerInputClass()
        });
        this.hammer.add(new Hammer$1.Pan({
          threshold: 5,
          direction: Hammer$1.DIRECTION_ALL
        }));
        this.hammer.add(new Hammer$1.Tap({
          event: 'singletap',
          interval: 0
        }));
        this.hammer.add(new Hammer$1.Pinch());
        this.hammer.add(new Hammer$1.Press({
          time: 500
        }));
        this.hammer.on('panstart', this.onPanStart.bind(this));
        this.hammer.on('panmove', this.onPanMove.bind(this));
        this.hammer.on('panend', this.onPanEnd.bind(this));
        this.hammer.on('pancancel', this.onPanEnd.bind(this));
        this.hammer.on('singletap', this.onSingletap.bind(this));
        this.hammer.on('pinchstart', this.onPinchStart.bind(this));
        this.hammer.on('pinchmove', this.onPinchMove.bind(this));
        this.hammer.on('pinchend', this.onPinchEnd.bind(this));
        this.hammer.on('pinchcancel', this.onPinchEnd.bind(this));
        this.hammer.on('press', this.onPress.bind(this));
        this.scrollerEl.addEventListener('contextmenu', this.onContextmenu.bind(this), false);
        this.scrollerEl.addEventListener('wheel', this.onWheel.bind(this), false);
        return;
      }

      _createClass(Verso, [{
        key: "start",
        value: function start() {
          var pageId, ref;
          pageId = (ref = this.getPageSpreadPositionFromPageId(this.options.pageId)) != null ? ref : 0;
          this.hammer.set({
            enable: true
          });
          this.navigateTo(pageId, {
            duration: 0
          });
          this.resizeListener = this.onResize.bind(this);
          this.touchStartListener = this.onTouchStart.bind(this);
          this.touchEndListener = this.onTouchEnd.bind(this);
          this.el.addEventListener('touchstart', this.touchStartListener, false);
          this.el.addEventListener('touchend', this.touchEndListener, false);
          window.addEventListener('resize', this.resizeListener, false);
          return this;
        }
      }, {
        key: "destroy",
        value: function destroy() {
          this.hammer.destroy();
          this.el.removeEventListener('touchstart', this.touchStartListener);
          this.el.removeEventListener('touchend', this.touchEndListener);
          window.removeEventListener('resize', this.resizeListener);
          return this;
        }
      }, {
        key: "first",
        value: function first(options) {
          return this.navigateTo(0, options);
        }
      }, {
        key: "prev",
        value: function prev(options) {
          return this.navigateTo(this.getPosition() - 1, options);
        }
      }, {
        key: "next",
        value: function next(options) {
          return this.navigateTo(this.getPosition() + 1, options);
        }
      }, {
        key: "last",
        value: function last(options) {
          return this.navigateTo(this.getPageSpreadCount() - 1, options);
        }
      }, {
        key: "navigateTo",
        value: function navigateTo(position) {
          var _this = this;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var activePageSpread, carousel, currentPageSpread, currentPosition, duration, ref, ref1, touchAction, velocity;

          if (position < 0 || position > this.getPageSpreadCount() - 1) {
            return;
          }

          currentPosition = this.getPosition();
          currentPageSpread = this.getPageSpreadFromPosition(currentPosition);
          activePageSpread = this.getPageSpreadFromPosition(position);
          carousel = this.getCarouselFromPageSpread(activePageSpread);
          velocity = (ref = options.velocity) != null ? ref : 1;
          duration = (ref1 = options.duration) != null ? ref1 : this.navigationDuration;
          duration = duration / Math.abs(velocity);
          touchAction = activePageSpread.isScrollable() ? 'pan-y' : 'none';

          if (currentPageSpread != null) {
            currentPageSpread.deactivate();
          }

          activePageSpread.activate();
          carousel.visible.forEach(function (pageSpread) {
            return pageSpread.position().setVisibility('visible');
          });
          this.hammer.set({
            touchAction: touchAction
          });
          this.transform.left = this.getLeftTransformFromPageSpread(position, activePageSpread);
          this.setPosition(position);

          if (this.transform.scale > 1) {
            this.transform.top = 0;
            this.transform.scale = 1;
            this.trigger('zoomedOut', {
              position: currentPosition
            });
          }

          this.trigger('beforeNavigation', {
            currentPosition: currentPosition,
            newPosition: position
          });
          this.animation.animate({
            x: "".concat(this.transform.left, "%"),
            duration: duration
          }, function () {
            carousel = _this.getCarouselFromPageSpread(_this.getActivePageSpread());
            carousel.gone.forEach(function (pageSpread) {
              return pageSpread.setVisibility('gone');
            });

            _this.trigger('afterNavigation', {
              newPosition: _this.getPosition(),
              previousPosition: currentPosition
            });
          });
        }
      }, {
        key: "getPosition",
        value: function getPosition() {
          return this.position;
        }
      }, {
        key: "setPosition",
        value: function setPosition(position) {
          this.position = position;
          return this;
        }
      }, {
        key: "getLeftTransformFromPageSpread",
        value: function getLeftTransformFromPageSpread(position, pageSpread) {
          var left;
          left = 0;

          if (position === this.getPageSpreadCount() - 1) {
            left = 100 - pageSpread.getWidth() - pageSpread.getLeft();
          } else if (position > 0) {
            left = (100 - pageSpread.getWidth()) / 2 - pageSpread.getLeft();
          }

          return left;
        }
      }, {
        key: "getCarouselFromPageSpread",
        value: function getCarouselFromPageSpread(pageSpreadSubject) {
          var carousel;
          carousel = {
            visible: [],
            gone: []
          }; // Identify the page spreads that should be a part of the carousel.

          this.pageSpreads.forEach(function (pageSpread) {
            var visible;
            visible = false;

            if (pageSpread.getLeft() <= pageSpreadSubject.getLeft()) {
              if (pageSpread.getLeft() + pageSpread.getWidth() > pageSpreadSubject.getLeft() - 100) {
                visible = true;
              }
            } else {
              if (pageSpread.getLeft() - pageSpread.getWidth() < pageSpreadSubject.getLeft() + 100) {
                visible = true;
              }
            }

            if (visible === true) {
              carousel.visible.push(pageSpread);
            } else {
              carousel.gone.push(pageSpread);
            }
          });
          return carousel;
        }
      }, {
        key: "traversePageSpreads",
        value: function traversePageSpreads(els) {
          var el, id, j, left, len, maxZoomScale, pageIds, pageSpread, pageSpreads, type, width;
          pageSpreads = [];
          left = 0;

          for (j = 0, len = els.length; j < len; j++) {
            el = els[j];
            id = el.getAttribute('data-id');
            type = el.getAttribute('data-type');
            pageIds = el.getAttribute('data-page-ids');
            pageIds = pageIds != null ? pageIds.split(',').map(function (i) {
              return i;
            }) : [];
            maxZoomScale = el.getAttribute('data-max-zoom-scale');
            maxZoomScale = maxZoomScale != null ? +maxZoomScale : 1;
            width = el.getAttribute('data-width');
            width = width != null ? +width : 100;
            pageSpread = new PageSpread$1(el, {
              id: id,
              type: type,
              pageIds: pageIds,
              maxZoomScale: maxZoomScale,
              width: width,
              left: left
            });
            left += width;
            pageSpreads.push(pageSpread);
          }

          return pageSpreads;
        }
      }, {
        key: "buildPageIds",
        value: function buildPageIds(pageSpreads) {
          var pageIds;
          pageIds = {};
          pageSpreads.forEach(function (pageSpread, i) {
            pageSpread.options.pageIds.forEach(function (pageId) {
              pageIds[pageId] = pageSpread;
            });
          });
          return pageIds;
        }
      }, {
        key: "isCoordinateInsideElement",
        value: function isCoordinateInsideElement(x, y, el) {
          var rect;
          rect = el.getBoundingClientRect();
          return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;
        }
      }, {
        key: "getCoordinateInfo",
        value: function getCoordinateInfo(x, y, pageSpread) {
          var contentRect, info, j, k, len, len1, overlayEl, overlayEls, pageEl, pageEls;
          x -= this.el.offsetLeft;
          y -= this.el.offsetTop;
          info = {
            x: x,
            y: y,
            contentX: 0,
            contentY: 0,
            pageX: 0,
            pageY: 0,
            overlayEls: [],
            pageEl: null,
            isInsideContentX: false,
            isInsideContentY: false,
            isInsideContent: false
          };
          contentRect = pageSpread.getContentRect();
          overlayEls = pageSpread.getOverlayEls();
          pageEls = pageSpread.getPageEls();

          for (j = 0, len = overlayEls.length; j < len; j++) {
            overlayEl = overlayEls[j];

            if (this.isCoordinateInsideElement(x, y, overlayEl)) {
              info.overlayEls.push(overlayEl);
            }
          }

          for (k = 0, len1 = pageEls.length; k < len1; k++) {
            pageEl = pageEls[k];

            if (this.isCoordinateInsideElement(x, y, pageEl)) {
              info.pageEl = pageEl;
              break;
            }
          }

          info.contentX = (x - contentRect.left) / Math.max(1, contentRect.width);
          info.contentY = (y - contentRect.top) / Math.max(1, contentRect.height);

          if (info.pageEl != null) {
            info.isInsideContentX = info.contentX >= 0 && info.contentX <= 1;
            info.isInsideContentY = info.contentY >= 0 && info.contentY <= 1;
            info.isInsideContent = info.isInsideContentX && info.isInsideContentY;
          }

          return info;
        }
      }, {
        key: "getPageSpreadCount",
        value: function getPageSpreadCount() {
          return this.pageSpreads.length;
        }
      }, {
        key: "getActivePageSpread",
        value: function getActivePageSpread() {
          return this.getPageSpreadFromPosition(this.getPosition());
        }
      }, {
        key: "getPageSpreadFromPosition",
        value: function getPageSpreadFromPosition(position) {
          return this.pageSpreads[position];
        }
      }, {
        key: "getPageSpreadPositionFromPageId",
        value: function getPageSpreadPositionFromPageId(pageId) {
          var idx, j, len, pageSpread, ref;
          ref = this.pageSpreads;

          for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
            pageSpread = ref[idx];

            if (pageSpread.options.pageIds.indexOf(pageId) > -1) {
              return idx;
            }
          }
        }
      }, {
        key: "getPageSpreadBounds",
        value: function getPageSpreadBounds(pageSpread) {
          var pageSpreadContentRect, pageSpreadRect;
          pageSpreadRect = pageSpread.getRect();
          pageSpreadContentRect = pageSpread.getContentRect();
          return {
            left: (pageSpreadContentRect.left - pageSpreadRect.left) / pageSpreadRect.width * 100,
            top: (pageSpreadContentRect.top - pageSpreadRect.top) / pageSpreadRect.height * 100,
            width: pageSpreadContentRect.width / pageSpreadRect.width * 100,
            height: pageSpreadContentRect.height / pageSpreadRect.height * 100,
            pageSpreadRect: pageSpreadRect,
            pageSpreadContentRect: pageSpreadContentRect
          };
        }
      }, {
        key: "clipCoordinate",
        value: function clipCoordinate(coordinate, scale, size, offset) {
          if (size * scale < 100) {
            coordinate = offset * -scale + 50 - size * scale / 2;
          } else {
            coordinate = Math.min(coordinate, offset * -scale);
            coordinate = Math.max(coordinate, offset * -scale - size * scale + 100);
          }

          return coordinate;
        }
      }, {
        key: "zoomTo",
        value: function zoomTo() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var callback = arguments.length > 1 ? arguments[1] : undefined;
          var activePageSpread, carouselOffset, carouselScaledOffset, curScale, pageSpreadBounds, ref, ref1, scale, x, y;
          scale = options.scale;
          curScale = this.transform.scale;
          activePageSpread = this.getActivePageSpread();
          pageSpreadBounds = this.getPageSpreadBounds(activePageSpread);
          carouselOffset = activePageSpread.getLeft();
          carouselScaledOffset = carouselOffset * curScale;
          x = (ref = options.x) != null ? ref : 0;
          y = (ref1 = options.y) != null ? ref1 : 0;

          if (scale !== 1) {
            x -= pageSpreadBounds.pageSpreadRect.left;
            y -= pageSpreadBounds.pageSpreadRect.top;
            x = x / (pageSpreadBounds.pageSpreadRect.width / curScale) * 100;
            y = y / (pageSpreadBounds.pageSpreadRect.height / curScale) * 100;
            x = this.transform.left + carouselScaledOffset + x - x * scale / curScale;
            y = this.transform.top + y - y * scale / curScale; // Make sure the animation doesn't exceed the content bounds.

            if (options.bounds !== false && scale > 1) {
              x = this.clipCoordinate(x, scale, pageSpreadBounds.width, pageSpreadBounds.left);
              y = this.clipCoordinate(y, scale, pageSpreadBounds.height, pageSpreadBounds.top);
            }
          } else {
            x = 0;
            y = 0;
          } // Account for the page spreads left of the active one.


          x -= carouselOffset * scale;
          this.transform.left = x;
          this.transform.top = y;
          this.transform.scale = scale;
          this.animation.animate({
            x: "".concat(x, "%"),
            y: "".concat(y, "%"),
            scale: scale,
            easing: options.easing,
            duration: options.duration
          }, callback);
        }
      }, {
        key: "refresh",
        value: function refresh() {
          this.pageSpreadEls = this.el.querySelectorAll('.verso__page-spread');
          this.pageSpreads = this.traversePageSpreads(this.pageSpreadEls);
          this.pageIds = this.buildPageIds(this.pageSpreads);
          return this;
        }
      }, {
        key: "getHammerInputClass",
        value: function getHammerInputClass() {
          var mobileRegex, supportTouch;
          mobileRegex = /mobile|tablet|ip(ad|hone|od)|android/i;
          supportTouch = 'ontouchstart' in window;

          if (supportTouch && mobileRegex.test(navigator.userAgent)) {
            return Hammer$1.TouchInput;
          } else {
            return null;
          }
        } //#############

        /* Events */
        //#############

      }, {
        key: "onPanStart",
        value: function onPanStart(e) {
          var edgeThreshold, width, x; // Only allow panning if zoomed in or doing a horizontal pan.
          // This ensures vertical scrolling works for scrollable page spreads.

          if (this.transform.scale > 1 || e.direction === Hammer$1.DIRECTION_LEFT || e.direction === Hammer$1.DIRECTION_RIGHT) {
            x = e.center.x;
            edgeThreshold = 30;
            width = this.scrollerEl.offsetWidth; // Prevent panning when edge-swiping on iOS.

            if (x > edgeThreshold && x < width - edgeThreshold) {
              this.startTransform.left = this.transform.left;
              this.startTransform.top = this.transform.top;
              this.panning = true;
              this.trigger('panStart');
            }
          }
        }
      }, {
        key: "onPanMove",
        value: function onPanMove(e) {
          var activePageSpread, carouselOffset, carouselScaledOffset, pageSpreadBounds, scale, x, y;

          if (this.pinching === true || this.panning === false) {
            return;
          }

          if (this.transform.scale > 1) {
            activePageSpread = this.getActivePageSpread();
            carouselOffset = activePageSpread.getLeft();
            carouselScaledOffset = carouselOffset * this.transform.scale;
            pageSpreadBounds = this.getPageSpreadBounds(activePageSpread);
            scale = this.transform.scale;
            x = this.startTransform.left + carouselScaledOffset + e.deltaX / this.scrollerEl.offsetWidth * 100;
            y = this.startTransform.top + e.deltaY / this.scrollerEl.offsetHeight * 100;
            x = this.clipCoordinate(x, scale, pageSpreadBounds.width, pageSpreadBounds.left);
            y = this.clipCoordinate(y, scale, pageSpreadBounds.height, pageSpreadBounds.top);
            x -= carouselScaledOffset;
            this.transform.left = x;
            this.transform.top = y;
            this.animation.animate({
              x: "".concat(x, "%"),
              y: "".concat(y, "%"),
              scale: scale,
              easing: 'linear'
            });
          } else {
            x = this.transform.left + e.deltaX / this.scrollerEl.offsetWidth * 100;
            this.animation.animate({
              x: "".concat(x, "%"),
              easing: 'linear'
            });
          }
        }
      }, {
        key: "onPanEnd",
        value: function onPanEnd(e) {
          var position, velocity;

          if (this.panning === false) {
            return;
          }

          this.panning = false;
          this.trigger('panEnd');

          if (this.transform.scale === 1 && this.pinching === false) {
            position = this.getPosition();
            velocity = e.overallVelocityX;

            if (Math.abs(velocity) >= this.swipeVelocity) {
              if (Math.abs(e.deltaX) >= this.swipeThreshold) {
                if (e.offsetDirection === Hammer$1.DIRECTION_LEFT) {
                  this.next({
                    velocity: velocity,
                    duration: this.navigationPanDuration
                  });
                } else if (e.offsetDirection === Hammer$1.DIRECTION_RIGHT) {
                  this.prev({
                    velocity: velocity,
                    duration: this.navigationPanDuration
                  });
                }
              }
            }

            if (position === this.getPosition()) {
              this.animation.animate({
                x: "".concat(this.transform.left, "%"),
                duration: this.navigationPanDuration
              });
              this.trigger('attemptedNavigation', {
                position: this.getPosition()
              });
            }
          }
        }
      }, {
        key: "onPinchStart",
        value: function onPinchStart(e) {
          if (!this.getActivePageSpread().isZoomable()) {
            return;
          }

          this.pinching = true;
          this.el.setAttribute('data-pinching', true);
          this.startTransform.scale = this.transform.scale;
        }
      }, {
        key: "onPinchMove",
        value: function onPinchMove(e) {
          if (this.pinching === false) {
            return;
          }

          this.zoomTo({
            x: e.center.x,
            y: e.center.y,
            scale: this.startTransform.scale * e.scale,
            bounds: false,
            easing: 'linear'
          });
        }
      }, {
        key: "onPinchEnd",
        value: function onPinchEnd(e) {
          var _this2 = this;

          var activePageSpread, maxZoomScale, position, scale;

          if (this.pinching === false) {
            return;
          }

          activePageSpread = this.getActivePageSpread();
          maxZoomScale = activePageSpread.getMaxZoomScale();
          scale = Math.max(1, Math.min(this.transform.scale, maxZoomScale));
          position = this.getPosition();

          if (this.startTransform.scale === 1 && scale > 1) {
            this.trigger('zoomedIn', {
              position: position
            });
          } else if (this.startTransform.scale > 1 && scale === 1) {
            this.trigger('zoomedOut', {
              position: position
            });
          }

          this.zoomTo({
            x: e.center.x,
            y: e.center.y,
            scale: scale,
            duration: this.zoomDuration
          }, function () {
            _this2.pinching = false;

            _this2.el.setAttribute('data-pinching', false);
          });
        }
      }, {
        key: "onPress",
        value: function onPress(e) {
          this.trigger('pressed', this.getCoordinateInfo(e.center.x, e.center.y, this.getActivePageSpread()));
        }
      }, {
        key: "onContextmenu",
        value: function onContextmenu(e) {
          e.preventDefault();
          this.trigger('contextmenu', this.getCoordinateInfo(e.clientX, e.clientY, this.getActivePageSpread()));
          return false;
        }
      }, {
        key: "onWheel",
        value: function onWheel(e) {
          var _this3 = this;

          var activePageSpread, position, scale;
          activePageSpread = this.getActivePageSpread();

          if (activePageSpread.isZoomable() === false) {
            return;
          }

          if (e.deltaY > 0 && this.transform.scale === 1) {
            scale = activePageSpread.getMaxZoomScale();
            position = this.getPosition();
            this.zoomTo({
              x: e.clientX,
              y: e.clientY,
              scale: scale,
              duration: this.zoomDuration
            }, function () {
              _this3.trigger('zoomedIn', {
                position: position
              });
            });
          } else if (e.deltaY < 0 && this.transform.scale > 1) {
            position = this.getPosition();
            this.zoomTo({
              x: e.clientX,
              y: e.clientY,
              scale: 1,
              duration: this.zoomDuration
            }, function () {
              _this3.trigger('zoomedOut', {
                position: position
              });
            });
          }
        }
      }, {
        key: "onSingletap",
        value: function onSingletap(e) {
          var _this4 = this;

          var activePageSpread, coordinateInfo, maxZoomScale, position, scale, zoomEvent, zoomedIn;
          activePageSpread = this.getActivePageSpread();
          coordinateInfo = this.getCoordinateInfo(e.center.x, e.center.y, activePageSpread);
          clearTimeout(this.tap.timeout);

          if (this.tap.count === 1) {
            this.tap.count = 0;
            this.trigger('doubleClicked', coordinateInfo);

            if (activePageSpread.isZoomable()) {
              maxZoomScale = activePageSpread.getMaxZoomScale();
              zoomedIn = this.transform.scale > 1;
              scale = zoomedIn ? 1 : maxZoomScale;
              zoomEvent = zoomedIn ? 'zoomedOut' : 'zoomedIn';
              position = this.getPosition();
              this.zoomTo({
                x: e.center.x,
                y: e.center.y,
                scale: scale,
                duration: this.zoomDuration
              }, function () {
                _this4.trigger(zoomEvent, {
                  position: position
                });
              });
            }
          } else {
            this.tap.count++;
            this.tap.timeout = setTimeout(function () {
              _this4.tap.count = 0;

              _this4.trigger('clicked', coordinateInfo);
            }, this.tap.delay);
          }
        }
      }, {
        key: "onTouchStart",
        value: function onTouchStart(e) {
          if (!this.getActivePageSpread().isScrollable()) {
            e.preventDefault();
          }
        }
      }, {
        key: "onTouchEnd",
        value: function onTouchEnd(e) {
          if (!this.getActivePageSpread().isScrollable()) {
            e.preventDefault();
          }
        }
      }, {
        key: "onResize",
        value: function onResize() {
          var activePageSpread, position;

          if (this.transform.scale > 1) {
            position = this.getPosition();
            activePageSpread = this.getActivePageSpread();
            this.transform.left = this.getLeftTransformFromPageSpread(position, activePageSpread);
            this.transform.top = 0;
            this.transform.scale = 1;
            this.zoomTo({
              x: this.transform.left,
              y: this.transform.top,
              scale: this.transform.scale,
              duration: 0
            });
            this.trigger('zoomedOut', {
              position: position
            });
          }
        }
      }]);

      return Verso;
    }();

    MicroEvent.mixin(Verso);
    var verso = Verso;

    return verso;

  }));

  });

  var MicroEvent$2, PagedPublicationPageSpread, SGN$a;
  MicroEvent$2 = microevent;
  SGN$a = sgn;

  PagedPublicationPageSpread =
  /*#__PURE__*/
  function () {
    function PagedPublicationPageSpread() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, PagedPublicationPageSpread);

      this.options = options;
      this.contentsRendered = false;
      this.hotspotsRendered = false;
      this.el = this.renderEl();
      return;
    }

    _createClass(PagedPublicationPageSpread, [{
      key: "getId",
      value: function getId() {
        return this.options.id;
      }
    }, {
      key: "getEl",
      value: function getEl() {
        return this.el;
      }
    }, {
      key: "getPages",
      value: function getPages() {
        return this.options.pages;
      }
    }, {
      key: "renderEl",
      value: function renderEl() {
        var el, pageIds;
        el = document.createElement('div');
        pageIds = this.getPages().map(function (page) {
          return page.id;
        });
        el.className = 'verso__page-spread sgn-pp__page-spread';
        el.setAttribute('data-id', this.getId());
        el.setAttribute('data-type', 'page');
        el.setAttribute('data-width', this.options.width);
        el.setAttribute('data-page-ids', pageIds.join(','));
        el.setAttribute('data-max-zoom-scale', this.options.maxZoomScale);
        el.setAttribute('data-zoomable', false);
        return el;
      }
    }, {
      key: "renderContents",
      value: function renderContents() {
        var _this = this;

        var el, id, imageLoads, pageCount, pages;
        id = this.getId();
        el = this.getEl();
        pages = this.getPages();
        pageCount = pages.length;
        imageLoads = 0;
        pages.forEach(function (page, i) {
          var image, loaderEl, pageEl;
          image = page.images.medium;
          pageEl = document.createElement('div');
          loaderEl = document.createElement('div');
          pageEl.className = 'sgn-pp__page verso__page';

          if (page.id != null) {
            pageEl.setAttribute('data-id', page.id);
          }

          if (pageCount === 2) {
            pageEl.className += i === 0 ? ' verso-page--verso' : ' verso-page--recto';
          }

          pageEl.appendChild(loaderEl);
          el.appendChild(pageEl);
          loaderEl.className = 'sgn-pp-page__loader';
          loaderEl.innerHTML = "<span>".concat(page.label, "</span>");
          SGN$a.util.loadImage(image, function (err, width, height) {
            var isComplete;

            if (err == null) {
              isComplete = ++imageLoads === pageCount;
              pageEl.style.backgroundImage = "url(".concat(image, ")");
              pageEl.setAttribute('data-width', width);
              pageEl.setAttribute('data-height', height);
              pageEl.innerHTML = '&nbsp;';

              if (isComplete) {
                el.setAttribute('data-zoomable', true);
              }

              _this.trigger('pageLoaded', {
                pageSpreadId: id,
                page: page
              });

              if (isComplete) {
                _this.trigger('pagesLoaded', {
                  pageSpreadId: id,
                  pages: pages
                });
              }
            } else {
              loaderEl.innerHTML = '<span>!</span>';
            }
          });
        });
        this.contentsRendered = true;
        return this;
      }
    }, {
      key: "clearContents",
      value: function clearContents(pageSpread, versoPageSpread) {
        this.el.innerHTML = '';
        this.contentsRendered = false;
        return this;
      }
    }, {
      key: "zoomIn",
      value: function zoomIn() {
        var _this2 = this;

        var pageEls, pages;
        pageEls = [].slice.call(this.el.querySelectorAll('.sgn-pp__page'));
        pages = this.getPages();
        pageEls.forEach(function (pageEl) {
          var id, image, page;
          id = pageEl.getAttribute('data-id');
          page = pages.find(function (page) {
            return page.id === id;
          });
          image = page.images.large;
          SGN$a.util.loadImage(image, function (err) {
            if (err == null && _this2.el.getAttribute('data-active') === 'true') {
              pageEl.setAttribute('data-image', pageEl.style.backgroundImage);
              pageEl.style.backgroundImage = "url(".concat(image, ")");
            }
          });
        });
      }
    }, {
      key: "zoomOut",
      value: function zoomOut() {
        var pageEls;
        pageEls = [].slice.call(this.el.querySelectorAll('.sgn-pp__page[data-image]'));
        pageEls.forEach(function (pageEl) {
          pageEl.style.backgroundImage = pageEl.getAttribute('data-image');
          pageEl.removeAttribute('data-image');
        });
      }
    }]);

    return PagedPublicationPageSpread;
  }();

  MicroEvent$2.mixin(PagedPublicationPageSpread);
  var pageSpread = PagedPublicationPageSpread;

  var MicroEvent$3, PageSpread, PagedPublicationPageSpreads, SGN$b;
  MicroEvent$3 = microevent;
  PageSpread = pageSpread;
  SGN$b = sgn;

  PagedPublicationPageSpreads =
  /*#__PURE__*/
  function () {
    function PagedPublicationPageSpreads(options) {
      _classCallCheck(this, PagedPublicationPageSpreads);

      this.options = options;
      this.collection = [];
      this.ids = {};
      return;
    }

    _createClass(PagedPublicationPageSpreads, [{
      key: "get",
      value: function get(id) {
        return this.ids[id];
      }
    }, {
      key: "getFrag",
      value: function getFrag() {
        var frag;
        frag = document.createDocumentFragment();
        this.collection.forEach(function (pageSpread$$1) {
          return frag.appendChild(pageSpread$$1.el);
        });
        return frag;
      }
    }, {
      key: "update",
      value: function update() {
        var _this = this;

        var pageMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'single';
        var firstPage, ids, lastPage, maxZoomScale, midstPageSpreads, pageSpreads, pages, width;
        pageSpreads = [];
        ids = {};
        pages = this.options.pages.slice();
        width = this.options.width;
        maxZoomScale = this.options.maxZoomScale;

        if (pageMode === 'single') {
          pages.forEach(function (page) {
            return pageSpreads.push([page]);
          });
        } else {
          firstPage = pages.shift();
          lastPage = pages.length % 2 === 1 ? pages.pop() : null;
          midstPageSpreads = SGN$b.util.chunk(pages, 2);

          if (firstPage != null) {
            pageSpreads.push([firstPage]);
          }

          midstPageSpreads.forEach(function (midstPages) {
            return pageSpreads.push(midstPages.map(function (page) {
              return page;
            }));
          });

          if (lastPage != null) {
            pageSpreads.push([lastPage]);
          }
        }

        this.collection = pageSpreads.map(function (pages, i) {
          var id, pageSpread$$1;
          id = "".concat(pageMode, "-").concat(i);
          pageSpread$$1 = new PageSpread({
            width: width,
            maxZoomScale: maxZoomScale,
            pages: pages,
            id: id
          });
          pageSpread$$1.bind('pageLoaded', function (e) {
            return _this.trigger('pageLoaded', e);
          });
          pageSpread$$1.bind('pagesLoaded', function (e) {
            return _this.trigger('pagesLoaded', e);
          });
          ids[id] = pageSpread$$1;
          return pageSpread$$1;
        });
        this.ids = ids;
        return this;
      }
    }]);

    return PagedPublicationPageSpreads;
  }();

  MicroEvent$3.mixin(PagedPublicationPageSpreads);
  var pageSpreads = PagedPublicationPageSpreads;

  var MicroEvent$4, PageSpreads, PagedPublicationCore, SGN$c, Verso, clientLocalStorage$1;
  MicroEvent$4 = microevent;
  Verso = verso;
  PageSpreads = pageSpreads;
  clientLocalStorage$1 = clientLocal;
  SGN$c = sgn;

  PagedPublicationCore = function () {
    var PagedPublicationCore =
    /*#__PURE__*/
    function () {
      function PagedPublicationCore(el) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, PagedPublicationCore);

        this.options = this.makeOptions(options, this.defaults);
        this.pageId = this.getOption('pageId');
        this.els = {
          root: el,
          pages: el.querySelector('.sgn-pp__pages'),
          verso: el.querySelector('.verso')
        };
        this.pageMode = this.getPageMode();
        this.pageSpreads = new PageSpreads({
          pages: this.getOption('pages'),
          maxZoomScale: this.getOption('pageSpreadMaxZoomScale'),
          width: this.getOption('pageSpreadWidth')
        });
        this.pageSpreads.bind('pageLoaded', this.pageLoaded.bind(this));
        this.pageSpreads.bind('pagesLoaded', this.pagesLoaded.bind(this));
        this.setColor(this.getOption('color')); // It's important to insert the page spreads before instantiating Verso.

        this.els.pages.parentNode.insertBefore(this.pageSpreads.update(this.pageMode).getFrag(), this.els.pages);
        this.verso = this.createVerso();
        this.bind('started', this.start.bind(this));
        this.bind('destroyed', this.destroy.bind(this));
        return;
      }

      _createClass(PagedPublicationCore, [{
        key: "start",
        value: function start() {
          this.getVerso().start();
          this.resizeListener = SGN$c.util.throttle(this.resize, this.getOption('resizeDelay'), this);
          this.unloadListener = this.unload.bind(this);
          window.addEventListener('resize', this.resizeListener, false);
          window.addEventListener('beforeunload', this.unloadListener, false);
          this.els.root.setAttribute('data-started', '');
          this.els.root.setAttribute('tabindex', '-1');
          this.els.root.focus();
        }
      }, {
        key: "destroy",
        value: function destroy() {
          var i, len, pageSpreadEl, pageSpreadEls, verso$$1;
          verso$$1 = this.getVerso();
          pageSpreadEls = verso$$1.el.querySelectorAll('.sgn-pp__page-spread');
          this.els.root.removeAttribute('data-started');
          this.els.root.removeAttribute('data-idle');
          this.els.root.removeAttribute('data-navigating');
          this.els.root.removeAttribute('data-color-brightness');
          this.els.root.removeAttribute('data-zoomed-in');
          this.els.root.style.backgroundColor = '#ffffff';

          for (i = 0, len = pageSpreadEls.length; i < len; i++) {
            pageSpreadEl = pageSpreadEls[i];
            pageSpreadEl.parentNode.removeChild(pageSpreadEl);
          }

          verso$$1.destroy();
          window.removeEventListener('resize', this.resizeListener, false);
          window.removeEventListener('beforeunload', this.unloadListener, false);
        }
      }, {
        key: "makeOptions",
        value: function makeOptions(options, defaults) {
          var key, opts, ref, value;
          opts = {};

          for (key in options) {
            value = options[key];
            opts[key] = (ref = options[key]) != null ? ref : defaults[key];
          }

          return opts;
        }
      }, {
        key: "getOption",
        value: function getOption(key) {
          return this.options[key];
        }
      }, {
        key: "setColor",
        value: function setColor(color) {
          this.els.root.setAttribute('data-color-brightness', SGN$c.util.getColorBrightness(color));
          this.els.root.style.backgroundColor = color;
        }
      }, {
        key: "createVerso",
        value: function createVerso() {
          var verso$$1;
          verso$$1 = new Verso(this.els.verso, {
            pageId: this.pageId
          });
          verso$$1.pageSpreads.forEach(this.overridePageSpreadContentRect.bind(this));
          verso$$1.bind('beforeNavigation', this.beforeNavigation.bind(this));
          verso$$1.bind('afterNavigation', this.afterNavigation.bind(this));
          verso$$1.bind('attemptedNavigation', this.attemptedNavigation.bind(this));
          verso$$1.bind('clicked', this.clicked.bind(this));
          verso$$1.bind('doubleClicked', this.doubleClicked.bind(this));
          verso$$1.bind('pressed', this.pressed.bind(this));
          verso$$1.bind('contextmenu', this.contextmenu.bind(this));
          verso$$1.bind('panStart', this.panStart.bind(this));
          verso$$1.bind('panEnd', this.panEnd.bind(this));
          verso$$1.bind('zoomedIn', this.zoomedIn.bind(this));
          verso$$1.bind('zoomedOut', this.zoomedOut.bind(this));
          return verso$$1;
        }
      }, {
        key: "getVerso",
        value: function getVerso() {
          return this.verso;
        }
      }, {
        key: "getContentRect",
        value: function getContentRect(pageSpread) {
          var actualHeight, actualWidth, clientRect, imageRatio, pageCount, pageEl, pageEls, pageHeight, pageWidth, rect, scale;
          rect = {
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            width: 0,
            height: 0
          };
          pageEls = pageSpread.getPageEls();
          pageEl = pageEls[0];
          pageCount = pageEls.length;

          if (!pageCount) {
            return rect;
          }

          scale = this.getVerso().transform.scale;
          pageWidth = pageEl.offsetWidth * pageCount * scale;
          pageHeight = pageEl.offsetHeight * scale;
          imageRatio = +pageEl.getAttribute('data-height') / (+pageEl.getAttribute('data-width') * pageCount);
          actualHeight = pageHeight;
          actualWidth = actualHeight / imageRatio;
          actualWidth = Math.min(pageWidth, actualWidth);
          actualHeight = actualWidth * imageRatio;
          clientRect = pageEl.getBoundingClientRect();
          rect.width = actualWidth;
          rect.height = actualHeight;
          rect.top = clientRect.top + (pageHeight - actualHeight) / 2;
          rect.left = clientRect.left + (pageWidth - actualWidth) / 2;
          rect.right = rect.width + rect.left;
          rect.bottom = rect.height + rect.top;
          return rect;
        }
      }, {
        key: "formatProgressLabel",
        value: function formatProgressLabel(pageSpread) {
          var label, pageCount, pageIds, pageLabels, pages, ref;
          pages = (ref = pageSpread != null ? pageSpread.options.pages : void 0) != null ? ref : [];
          pageIds = pages.map(function (page) {
            return page.id;
          });
          pageLabels = pages.map(function (page) {
            return page.label;
          });
          pageCount = this.getOption('pages').length;
          label = pageIds.length > 0 ? pageLabels.join('-') + ' / ' + pageCount : null;
          return label;
        }
      }, {
        key: "renderPageSpreads",
        value: function renderPageSpreads() {
          var _this = this;

          this.getVerso().pageSpreads.forEach(function (pageSpread) {
            var match, visibility;
            visibility = pageSpread.getVisibility();
            match = _this.pageSpreads.get(pageSpread.getId());

            if (match != null) {
              if (visibility === 'visible' && match.contentsRendered === false) {
                setTimeout(match.renderContents.bind(match), 0);
              }

              if (visibility === 'gone' && match.contentsRendered === true) {
                setTimeout(match.clearContents.bind(match), 0);
              }
            }
          });
          return this;
        }
      }, {
        key: "findPage",
        value: function findPage(pageId) {
          return this.getOption('pages').find(function (page) {
            return page.id === pageId;
          });
        }
      }, {
        key: "pageLoaded",
        value: function pageLoaded(e) {
          this.trigger('pageLoaded', e);
        }
      }, {
        key: "pagesLoaded",
        value: function pagesLoaded(e) {
          this.trigger('pagesLoaded', e);
        }
      }, {
        key: "beforeNavigation",
        value: function beforeNavigation(e) {
          var newSpreadEl, pageSpread, pageSpreadCount, position, progress, progressLabel, theVerso, versoPageSpread;
          position = e.newPosition;
          theVerso = this.getVerso();
          versoPageSpread = theVerso.getPageSpreadFromPosition(position);
          pageSpread = this.pageSpreads.get(versoPageSpread.getId());
          pageSpreadCount = theVerso.getPageSpreadCount();
          newSpreadEl = theVerso.pageSpreadEls[e.newPosition];
          progress = position / (pageSpreadCount - 1) * 100;
          progressLabel = this.formatProgressLabel(pageSpread);
          this.els.root.setAttribute('data-navigating', true);
          this.renderPageSpreads();
          this.resetIdleTimer();
          this.startIdleTimer();
          this.trigger('beforeNavigation', {
            verso: e,
            pageSpread: pageSpread,
            newSpreadEl: newSpreadEl,
            progress: progress,
            progressLabel: progressLabel,
            pageSpreadCount: pageSpreadCount,
            newPositionIsEnd: e.newPosition + 1 === pageSpreadCount
          });
        }
      }, {
        key: "afterNavigation",
        value: function afterNavigation(e) {
          var newSpreadEl, pageSpread, pageSpreadCount, position, theVerso, versoPageSpread;
          position = e.newPosition;
          theVerso = this.getVerso();
          versoPageSpread = theVerso.getPageSpreadFromPosition(position);
          pageSpread = this.pageSpreads.get(versoPageSpread.getId());
          pageSpreadCount = theVerso.getPageSpreadCount();
          newSpreadEl = theVerso.pageSpreadEls[e.newPosition];
          this.els.root.setAttribute('data-navigating', false);
          this.trigger('afterNavigation', {
            verso: e,
            pageSpread: pageSpread,
            pageSpreadCount: pageSpreadCount,
            newSpreadEl: newSpreadEl,
            newPositionIsEnd: e.newPosition + 1 === pageSpreadCount
          });
        }
      }, {
        key: "attemptedNavigation",
        value: function attemptedNavigation(e) {
          this.trigger('attemptedNavigation', {
            verso: e
          });
        }
      }, {
        key: "clicked",
        value: function clicked(e) {
          var page, pageId;

          if (e.isInsideContent) {
            pageId = e.pageEl.getAttribute('data-id');
            page = this.findPage(pageId);
            this.trigger('clicked', {
              verso: e,
              page: page
            });
          }
        }
      }, {
        key: "doubleClicked",
        value: function doubleClicked(e) {
          var page, pageId;

          if (e.isInsideContent) {
            pageId = e.pageEl.getAttribute('data-id');
            page = this.findPage(pageId);
            this.trigger('doubleClicked', {
              verso: e,
              page: page
            });
          }
        }
      }, {
        key: "pressed",
        value: function pressed(e) {
          var page, pageId;

          if (e.isInsideContent) {
            pageId = e.pageEl.getAttribute('data-id');
            page = this.findPage(pageId);
            this.trigger('pressed', {
              verso: e,
              page: page
            });
          }
        }
      }, {
        key: "contextmenu",
        value: function contextmenu(e) {
          var page, pageId;

          if (e.isInsideContent) {
            pageId = e.pageEl.getAttribute('data-id');
            page = this.findPage(pageId);
            this.trigger('contextmenu', {
              verso: e,
              page: page
            });
          }
        }
      }, {
        key: "panStart",
        value: function panStart() {
          this.resetIdleTimer();
          this.trigger('panStart', {
            scale: this.getVerso().transform.scale
          });
        }
      }, {
        key: "panEnd",
        value: function panEnd() {
          this.startIdleTimer();
          this.trigger('panEnd');
        }
      }, {
        key: "zoomedIn",
        value: function zoomedIn(e) {
          var pageSpread, position, versoPageSpread;
          position = e.position;
          versoPageSpread = this.getVerso().getPageSpreadFromPosition(position);
          pageSpread = this.pageSpreads.get(versoPageSpread.getId());

          if (pageSpread != null) {
            pageSpread.zoomIn();
          }

          this.els.root.setAttribute('data-zoomed-in', true);
          this.trigger('zoomedIn', {
            verso: e,
            pageSpread: pageSpread
          });
        }
      }, {
        key: "zoomedOut",
        value: function zoomedOut(e) {
          var pageSpread, position, versoPageSpread;
          position = e.position;
          versoPageSpread = this.getVerso().getPageSpreadFromPosition(position);
          pageSpread = this.pageSpreads.get(versoPageSpread.getId());

          if (pageSpread != null) {
            pageSpread.zoomOut();
          }

          this.els.root.setAttribute('data-zoomed-in', false);
          this.trigger('zoomedOut', {
            verso: e,
            pageSpread: pageSpread
          });
        }
      }, {
        key: "getPageMode",
        value: function getPageMode() {
          var height, pageMode, width;
          pageMode = this.getOption('pageMode');

          if (pageMode == null) {
            width = this.els.root.offsetWidth;
            height = this.els.root.offsetHeight;
            pageMode = height / width < 0.8 ? 'double' : 'single';
          }

          return pageMode;
        }
      }, {
        key: "resetIdleTimer",
        value: function resetIdleTimer() {
          clearTimeout(this.idleTimeout);
          this.els.root.setAttribute('data-idle', false);
          return this;
        }
      }, {
        key: "startIdleTimer",
        value: function startIdleTimer() {
          var _this2 = this;

          this.idleTimeout = setTimeout(function () {
            _this2.els.root.setAttribute('data-idle', true);
          }, this.getOption('idleDelay'));
          return this;
        }
      }, {
        key: "switchPageMode",
        value: function switchPageMode(pageMode) {
          var i, len, pageIds, pageSpreadEl, pageSpreadEls, verso$$1;

          if (this.pageMode === pageMode) {
            return this;
          }

          verso$$1 = this.getVerso();
          pageIds = verso$$1.getPageSpreadFromPosition(verso$$1.getPosition()).getPageIds();
          pageSpreadEls = this.getVerso().el.querySelectorAll('.sgn-pp__page-spread');
          this.pageMode = pageMode;
          this.pageSpreads.update(this.pageMode);

          for (i = 0, len = pageSpreadEls.length; i < len; i++) {
            pageSpreadEl = pageSpreadEls[i];
            pageSpreadEl.parentNode.removeChild(pageSpreadEl);
          }

          this.els.pages.parentNode.insertBefore(this.pageSpreads.getFrag(), this.els.pages);
          verso$$1.refresh();
          verso$$1.navigateTo(verso$$1.getPageSpreadPositionFromPageId(pageIds[0]), {
            duration: 0
          });
          verso$$1.pageSpreads.forEach(this.overridePageSpreadContentRect.bind(this));
          return this;
        }
      }, {
        key: "overridePageSpreadContentRect",
        value: function overridePageSpreadContentRect(pageSpread) {
          var _this3 = this;

          if (pageSpread.getType() === 'page') {
            return pageSpread.getContentRect = function () {
              return _this3.getContentRect(pageSpread);
            };
          }
        }
      }, {
        key: "resize",
        value: function resize() {
          var pageMode;
          pageMode = this.getPageMode();

          if (this.getOption('pageMode') == null && pageMode !== this.pageMode) {
            this.switchPageMode(pageMode);
          } else {
            this.trigger('resized');
          }
        }
      }, {
        key: "unload",
        value: function unload() {
          this.trigger('disappeared');
        }
      }]);

      return PagedPublicationCore;
    }();

    
    PagedPublicationCore.prototype.defaults = {
      pages: [],
      pageSpreadWidth: 100,
      pageSpreadMaxZoomScale: 2.3,
      idleDelay: 1000,
      resizeDelay: 400,
      color: '#ffffff'
    };
    return PagedPublicationCore;
  }.call(commonjsGlobal);

  MicroEvent$4.mixin(PagedPublicationCore);
  var core$2 = PagedPublicationCore;

  var MicroEvent$5, Mustache$1, PagedPublicationHotspots;
  MicroEvent$5 = microevent;
  Mustache$1 = mustache;

  PagedPublicationHotspots =
  /*#__PURE__*/
  function () {
    function PagedPublicationHotspots() {
      _classCallCheck(this, PagedPublicationHotspots);

      this.currentPageSpreadId = null;
      this.pageSpreadsLoaded = {};
      this.cache = {};
      this.bind('hotspotsReceived', this.hotspotsReceived.bind(this));
      this.bind('afterNavigation', this.afterNavigation.bind(this));
      this.bind('pagesLoaded', this.pagesLoaded.bind(this));
      this.bind('resized', this.resized.bind(this));
      return;
    }

    _createClass(PagedPublicationHotspots, [{
      key: "renderHotspots",
      value: function renderHotspots(data) {
        var boundingRect, contentRect, el, frag, hotspot, hotspotEl, hotspotEls, i, id, len, pageSpreadEl, position, ref;
        frag = document.createDocumentFragment();
        contentRect = data.versoPageSpread.getContentRect();
        pageSpreadEl = data.pageSpread.getEl();
        hotspotEls = pageSpreadEl.querySelectorAll('.sgn-pp__hotspot');
        boundingRect = pageSpreadEl.getBoundingClientRect();

        for (i = 0, len = hotspotEls.length; i < len; i++) {
          hotspotEl = hotspotEls[i];
          hotspotEl.parentNode.removeChild(hotspotEl);
        }

        ref = data.hotspots;

        for (id in ref) {
          hotspot = ref[id];
          position = this.getPosition(data.pages, data.ratio, hotspot);
          el = this.renderHotspot(hotspot, position, contentRect, boundingRect);
          frag.appendChild(el);
        }

        pageSpreadEl.appendChild(frag);
        return this;
      }
    }, {
      key: "renderHotspot",
      value: function renderHotspot(hotspot, position, contentRect, boundingRect) {
        var el, height, left, top, width;
        el = document.createElement('div');
        top = Math.round(contentRect.height / 100 * position.top);
        left = Math.round(contentRect.width / 100 * position.left);
        width = Math.round(contentRect.width / 100 * position.width);
        height = Math.round(contentRect.height / 100 * position.height);
        top += Math.round(contentRect.top);
        left += Math.round(contentRect.left);
        top -= boundingRect.top;
        left -= boundingRect.left;
        el.className = 'sgn-pp__hotspot verso__overlay';

        if (hotspot.id != null) {
          el.setAttribute('data-id', hotspot.id);
        }

        if (hotspot.type != null) {
          el.setAttribute('data-type', hotspot.type);
        }

        el.innerHTML = Mustache$1.render('', hotspot);
        el.style.top = "".concat(top, "px");
        el.style.left = "".concat(left, "px");
        el.style.width = "".concat(width, "px");
        el.style.height = "".concat(height, "px");
        return el;
      }
    }, {
      key: "getPosition",
      value: function getPosition(pages, ratio, hotspot) {
        var height, maxX, maxY, minX, minY, pageNumber, pageNumbers, width;
        minX = null;
        minY = null;
        maxX = null;
        maxY = null;
        pageNumbers = pages.map(function (page) {
          return page.pageNumber;
        });

        for (pageNumber in hotspot.locations) {
          if (pageNumbers.indexOf(+pageNumber) === -1) {
            continue;
          }

          hotspot.locations[pageNumber].forEach(function (coords) {
            var x, y;
            x = coords[0];
            y = coords[1];

            if (pages[1] && pageNumbers[1] === +pageNumber) {
              x += 1;
            }

            x /= pages.length;

            if (minX == null) {
              minX = maxX = x;
              minY = maxY = y;
            }

            if (x < minX) {
              minX = x;
            }

            if (x > maxX) {
              maxX = x;
            }

            if (y < minY) {
              minY = y;
            }

            if (y > maxY) {
              return maxY = y;
            }
          });
        }

        width = maxX - minX;
        height = maxY - minY;
        return {
          top: minY / ratio * 100,
          left: minX * 100,
          width: width * 100,
          height: height / ratio * 100
        };
      }
    }, {
      key: "requestHotspots",
      value: function requestHotspots(pageSpreadId, pages) {
        this.trigger('hotspotsRequested', {
          id: pageSpreadId,
          pages: pages
        });
      }
    }, {
      key: "hotspotsReceived",
      value: function hotspotsReceived(e) {
        var pageSpreadId;
        pageSpreadId = e.pageSpread.getId();
        this.setCache(pageSpreadId, e);
        this.renderHotspots(e);
      }
    }, {
      key: "getCache",
      value: function getCache(pageSpreadId) {
        return this.cache[pageSpreadId];
      }
    }, {
      key: "setCache",
      value: function setCache(pageSpreadId, data) {
        this.cache[pageSpreadId] = data;
        return this;
      }
    }, {
      key: "afterNavigation",
      value: function afterNavigation(e) {
        var id;

        if (e.pageSpread == null) {
          return;
        }

        id = e.pageSpread.getId();
        this.currentPageSpreadId = id;

        if (this.pageSpreadsLoaded[id]) {
          this.requestHotspots(id, e.pageSpread.getPages());
        }
      }
    }, {
      key: "pagesLoaded",
      value: function pagesLoaded(e) {
        this.pageSpreadsLoaded[e.pageSpreadId] = true;

        if (this.currentPageSpreadId === e.pageSpreadId) {
          this.requestHotspots(e.pageSpreadId, e.pages);
        }
      }
    }, {
      key: "resized",
      value: function resized(e) {
        var data;
        data = this.getCache(this.currentPageSpreadId);

        if (data != null) {
          this.renderHotspots(data);
        }
      }
    }]);

    return PagedPublicationHotspots;
  }();

  MicroEvent$5.mixin(PagedPublicationHotspots);
  var hotspots = PagedPublicationHotspots;

  var keyCodes = {
    ESC: 27,
    ARROW_RIGHT: 39,
    ARROW_LEFT: 37,
    SPACE: 32,
    NUMBER_ONE: 49
  };
  var keyCodes_1 = keyCodes.ESC;
  var keyCodes_2 = keyCodes.ARROW_RIGHT;
  var keyCodes_3 = keyCodes.ARROW_LEFT;
  var keyCodes_4 = keyCodes.SPACE;
  var keyCodes_5 = keyCodes.NUMBER_ONE;

  var MicroEvent$6, PagedPublicationControls, SGN$d, keyCodes$1;
  MicroEvent$6 = microevent;
  SGN$d = sgn;
  keyCodes$1 = keyCodes;

  PagedPublicationControls =
  /*#__PURE__*/
  function () {
    function PagedPublicationControls(el) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, PagedPublicationControls);

      this.options = options;
      this.els = {
        root: el,
        progress: el.querySelector('.sgn-pp__progress'),
        progressBar: el.querySelector('.sgn-pp-progress__bar'),
        progressLabel: el.querySelector('.sgn-pp__progress-label'),
        prevControl: el.querySelector('.sgn-pp__control[data-direction=prev]'),
        nextControl: el.querySelector('.sgn-pp__control[data-direction=next]'),
        close: el.querySelector('.sgn-pp--close')
      };
      this.keyDownListener = SGN$d.util.throttle(this.keyDown, 150, this);

      if (this.options.keyboard === true) {
        this.els.root.addEventListener('keydown', this.keyDownListener, false);
      }

      if (this.els.prevControl != null) {
        this.els.prevControl.addEventListener('mousedown', this.prevClicked.bind(this), false);
      }

      if (this.els.nextControl != null) {
        this.els.nextControl.addEventListener('mousedown', this.nextClicked.bind(this), false);
      }

      if (this.els.close != null) {
        this.els.close.addEventListener('mousedown', this.closeClicked.bind(this), false);
      }

      this.bind('beforeNavigation', this.beforeNavigation.bind(this));
      return;
    }

    _createClass(PagedPublicationControls, [{
      key: "destroy",
      value: function destroy() {
        this.els.root.removeEventListener('keydown', this.keyDownListener);
      }
    }, {
      key: "beforeNavigation",
      value: function beforeNavigation(e) {
        var showProgress, visibilityClassName;
        showProgress = typeof e.progressLabel === 'string' && e.progressLabel.length > 0;
        visibilityClassName = 'sgn-pp--hidden';

        if (this.els.progress != null && this.els.progressBar != null) {
          this.els.progressBar.style.width = "".concat(e.progress, "%");

          if (showProgress === true) {
            this.els.progress.classList.remove(visibilityClassName);
          } else {
            this.els.progress.classList.add(visibilityClassName);
          }
        }

        if (this.els.progressLabel != null) {
          if (showProgress === true) {
            this.els.progressLabel.textContent = e.progressLabel;
            this.els.progressLabel.classList.remove(visibilityClassName);
          } else {
            this.els.progressLabel.classList.add(visibilityClassName);
          }
        }

        if (this.els.prevControl != null) {
          if (e.verso.newPosition === 0) {
            this.els.prevControl.classList.add(visibilityClassName);
          } else {
            this.els.prevControl.classList.remove(visibilityClassName);
          }
        }

        if (this.els.nextControl != null) {
          if (e.verso.newPosition === e.pageSpreadCount - 1) {
            this.els.nextControl.classList.add(visibilityClassName);
          } else {
            this.els.nextControl.classList.remove(visibilityClassName);
          }
        }
      }
    }, {
      key: "prevClicked",
      value: function prevClicked(e) {
        e.preventDefault();
        this.trigger('prev');
      }
    }, {
      key: "nextClicked",
      value: function nextClicked(e) {
        e.preventDefault();
        this.trigger('next');
      }
    }, {
      key: "closeClicked",
      value: function closeClicked(e) {
        e.preventDefault();
        this.trigger('close');
      }
    }, {
      key: "keyDown",
      value: function keyDown(e) {
        var keyCode;
        keyCode = e.keyCode;

        if (keyCodes$1.ARROW_LEFT === keyCode) {
          this.trigger('prev', {
            duration: 0
          });
        } else if (keyCodes$1.ARROW_RIGHT === keyCode || keyCodes$1.SPACE === keyCode) {
          this.trigger('next', {
            duration: 0
          });
        } else if (keyCodes$1.NUMBER_ONE === keyCode) {
          this.trigger('first', {
            duration: 0
          });
        }
      }
    }]);

    return PagedPublicationControls;
  }();

  MicroEvent$6.mixin(PagedPublicationControls);
  var controls = PagedPublicationControls;

  var MicroEvent$7, PagedPublicationEventTracking;
  MicroEvent$7 = microevent;

  PagedPublicationEventTracking =
  /*#__PURE__*/
  function () {
    function PagedPublicationEventTracking(eventTracker, id) {
      _classCallCheck(this, PagedPublicationEventTracking);

      this.eventTracker = eventTracker;
      this.id = id;
      this.hidden = true;
      this.pageSpread = null;
      this.bind('appeared', this.appeared.bind(this));
      this.bind('disappeared', this.disappeared.bind(this));
      this.bind('beforeNavigation', this.beforeNavigation.bind(this));
      this.bind('afterNavigation', this.afterNavigation.bind(this));
      this.bind('attemptedNavigation', this.attemptedNavigation.bind(this));
      this.bind('panStart', this.panStart.bind(this));
      this.bind('destroyed', this.destroy.bind(this));
      return;
    }

    _createClass(PagedPublicationEventTracking, [{
      key: "destroy",
      value: function destroy() {
        this.pageSpreadDisappeared();
      }
    }, {
      key: "trackOpened",
      value: function trackOpened(properties) {
        if (this.eventTracker == null) {
          return this;
        }

        this.eventTracker.trackPagedPublicationOpened({
          'pp.id': this.id,
          'vt': this.eventTracker.createViewToken(this.id)
        });
        return this;
      }
    }, {
      key: "trackPageSpreadDisappeared",
      value: function trackPageSpreadDisappeared(pageNumbers) {
        var _this = this;

        if (this.eventTracker == null) {
          return this;
        }

        pageNumbers.forEach(function (pageNumber) {
          _this.eventTracker.trackPagedPublicationPageDisappeared({
            'pp.id': _this.id,
            'ppp.n': pageNumber,
            'vt': _this.eventTracker.createViewToken(_this.id, pageNumber)
          });
        });
        return this;
      }
    }, {
      key: "appeared",
      value: function appeared(e) {
        this.pageSpreadAppeared(e.pageSpread);
      }
    }, {
      key: "disappeared",
      value: function disappeared() {
        this.pageSpreadDisappeared();
      }
    }, {
      key: "beforeNavigation",
      value: function beforeNavigation() {
        this.pageSpreadDisappeared();
      }
    }, {
      key: "afterNavigation",
      value: function afterNavigation(e) {
        this.pageSpreadAppeared(e.pageSpread);
      }
    }, {
      key: "attemptedNavigation",
      value: function attemptedNavigation(e) {
        this.pageSpreadAppeared(e.pageSpread);
      }
    }, {
      key: "panStart",
      value: function panStart(e) {
        if (e.scale === 1) {
          this.pageSpreadDisappeared();
        }
      }
    }, {
      key: "pageSpreadAppeared",
      value: function pageSpreadAppeared(pageSpread) {
        if (pageSpread != null && this.hidden === true) {
          this.pageSpread = pageSpread;
          this.hidden = false;
        }
      }
    }, {
      key: "pageSpreadDisappeared",
      value: function pageSpreadDisappeared() {
        if (this.pageSpread != null && this.hidden === false) {
          this.trackPageSpreadDisappeared(this.pageSpread.getPages().map(function (page) {
            return page.pageNumber;
          }));
          this.hidden = true;
          this.pageSpread = null;
        }
      }
    }]);

    return PagedPublicationEventTracking;
  }();

  MicroEvent$7.mixin(PagedPublicationEventTracking);
  var eventTracking = PagedPublicationEventTracking;

  var Controls, Core, EventTracking, Hotspots, MicroEvent$8, SGN$e, Viewer;
  MicroEvent$8 = microevent;
  SGN$e = sgn;
  Core = core$2;
  Hotspots = hotspots;
  Controls = controls;
  EventTracking = eventTracking;

  Viewer =
  /*#__PURE__*/
  function () {
    function Viewer(el) {
      var options1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Viewer);

      this.el = el;
      this.options = options1;
      this._core = new Core(this.el, {
        id: this.options.id,
        pages: this.options.pages,
        pageSpreadWidth: this.options.pageSpreadWidth,
        pageSpreadMaxZoomScale: this.options.pageSpreadMaxZoomScale,
        pageId: this.options.pageId,
        idleDelay: this.options.idleDelay,
        resizeDelay: this.options.resizeDelay,
        color: this.options.color
      });
      this._hotspots = new Hotspots();
      this._controls = new Controls(this.el, {
        keyboard: this.options.keyboard
      });
      this._eventTracking = new EventTracking(this.options.eventTracker, this.options.id);
      this.viewSession = SGN$e.util.uuid();
      this.hotspots = null;
      this.hotspotQueue = [];
      this.popover = null;

      this._setupEventListeners();

      return;
    }

    _createClass(Viewer, [{
      key: "start",
      value: function start() {
        this._eventTracking.trackOpened();

        this._core.trigger('started');

        return this;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this._core.trigger('destroyed');

        this._hotspots.trigger('destroyed');

        this._controls.trigger('destroyed');

        this._eventTracking.trigger('destroyed');

        this.trigger('destroyed');
        return this;
      }
    }, {
      key: "navigateTo",
      value: function navigateTo(position, options) {
        this.navigateToIndex(position, options);
        return this;
      }
    }, {
      key: "navigateToIndex",
      value: function navigateToIndex(position, options) {
        this._core.getVerso().navigateTo(position, options);

        return this;
      }
    }, {
      key: "navigateToPageId",
      value: function navigateToPageId(pageId, options) {
        var position;
        position = this._core.getVerso().getPageSpreadPositionFromPageId(pageId);
        return this._core.getVerso().navigateTo(position, options);
      }
    }, {
      key: "first",
      value: function first(options) {
        this._core.getVerso().first(options);

        return this;
      }
    }, {
      key: "prev",
      value: function prev(options) {
        this._core.getVerso().prev(options);

        return this;
      }
    }, {
      key: "next",
      value: function next(options) {
        this._core.getVerso().next(options);

        return this;
      }
    }, {
      key: "last",
      value: function last(options) {
        this._core.getVerso().last(options);

        return this;
      }
    }, {
      key: "_setupEventListeners",
      value: function _setupEventListeners() {
        var _this = this;

        this._controls.bind('prev', function (e) {
          _this.prev(e);
        });

        this._controls.bind('next', function (e) {
          _this.next(e);
        });

        this._controls.bind('first', function (e) {
          _this.first(e);
        });

        this._controls.bind('last', function (e) {
          _this.last(e);
        });

        this._controls.bind('close', function (e) {
          _this.destroy(e);
        });

        this._hotspots.bind('hotspotsRequested', function (e) {
          _this.trigger('hotspotsRequested', e);
        });

        this._core.bind('appeared', function (e) {
          _this._eventTracking.trigger('appeared', e);

          _this.trigger('appeared', e);
        });

        this._core.bind('disappeared', function (e) {
          _this._eventTracking.trigger('disappeared', e);

          _this.trigger('disappeared', e);
        });

        this._core.bind('beforeNavigation', function (e) {
          _this._eventTracking.trigger('beforeNavigation', e);

          _this._controls.trigger('beforeNavigation', e);

          _this.trigger('beforeNavigation', e);
        });

        this._core.bind('afterNavigation', function (e) {
          _this._eventTracking.trigger('afterNavigation', e);

          _this._hotspots.trigger('afterNavigation', e);

          _this.trigger('afterNavigation', e);
        });

        this._core.bind('attemptedNavigation', function (e) {
          _this._eventTracking.trigger('attemptedNavigation', e);

          _this.trigger('attemptedNavigation', e);
        });

        this._core.bind('clicked', function (e) {
          _this._eventTracking.trigger('clicked', e);

          _this.trigger('clicked', e);
        });

        this._core.bind('doubleClicked', function (e) {
          _this._eventTracking.trigger('doubleClicked', e);

          _this.trigger('doubleClicked', e);
        });

        this._core.bind('contextmenu', function (e) {
          _this.trigger('contextmenu', e);
        });

        this._core.bind('pressed', function (e) {
          _this._eventTracking.trigger('pressed', e);

          _this.trigger('pressed', e);
        });

        this._core.bind('panStart', function (e) {
          _this._eventTracking.trigger('panStart', e);

          _this.trigger('panStart', e);
        });

        this._core.bind('zoomedIn', function (e) {
          _this._eventTracking.trigger('zoomedIn', e);

          _this.trigger('zoomedIn', e);
        });

        this._core.bind('zoomedOut', function (e) {
          _this._eventTracking.trigger('zoomedOut', e);

          _this.trigger('zoomedOut', e);
        });

        this._core.bind('pageLoaded', function (e) {
          _this._eventTracking.trigger('pageLoaded', e);

          _this.trigger('pageLoaded', e);
        });

        this._core.bind('pagesLoaded', function (e) {
          _this._hotspots.trigger('pagesLoaded', e);

          _this.trigger('pagesLoaded', e);
        });

        this._core.bind('resized', function (e) {
          _this._hotspots.trigger('resized');

          _this.trigger('resized', e);
        });

        this.bind('hotspotsRequested', this.hotspotsRequested.bind(this));
        this.bind('beforeNavigation', this.beforeNavigation.bind(this));
        this.bind('clicked', this.clicked.bind(this));
        this.bind('contextmenu', this.contextmenu.bind(this));
        this.bind('pressed', this.pressed.bind(this));
      }
    }, {
      key: "pickHotspot",
      value: function pickHotspot(e, callback) {
        var _this2 = this;

        var hotspots$$1;

        if (this.hotspots == null) {
          return;
        }

        if (this.popover != null) {
          this.popover.destroy();
          this.popover = null;
        }

        hotspots$$1 = e.verso.overlayEls.map(function (overlayEl) {
          return _this2.hotspots[overlayEl.getAttribute('data-id')];
        });

        if (hotspots$$1.length === 1) {
          callback(hotspots$$1[0]);
        } else if (hotspots$$1.length > 1) {
          this.popover = SGN$e.CoreUIKit.singleChoicePopover({
            el: this.el,
            header: SGN$e.translations.t('paged_publication.hotspot_picker.header'),
            x: e.verso.x,
            y: e.verso.y,
            items: hotspots$$1.filter(function (hotspot) {
              return hotspot.type === 'offer';
            }).map(function (hotspot) {
              return {
                id: hotspot.id,
                title: hotspot.offer.heading,
                subtitle: hotspot.offer.pricing.currency + '' + hotspot.offer.pricing.price
              };
            })
          }, function (e) {
            callback(_this2.hotspots[e.id]);
          });
        }
      }
    }, {
      key: "processHotspotQueue",
      value: function processHotspotQueue() {
        var _this3 = this;

        if (this.hotspots == null) {
          return;
        }

        this.hotspotQueue = this.hotspotQueue.filter(function (hotspotRequest) {
          var hotspot, hotspots$$1, i, id, len, page, ref, ref1, versoPageSpread;
          hotspots$$1 = {};
          versoPageSpread = _this3._core.getVerso().pageSpreads.find(function (pageSpread) {
            return pageSpread.getId() === hotspotRequest.id;
          });
          ref = _this3.hotspots;

          for (id in ref) {
            hotspot = ref[id];

            if (hotspots$$1[id] != null) {
              continue;
            }

            ref1 = hotspotRequest.pages;

            for (i = 0, len = ref1.length; i < len; i++) {
              page = ref1[i];

              if (hotspot.locations[page.pageNumber] != null) {
                hotspots$$1[id] = {
                  type: hotspot.type,
                  id: hotspot.id,
                  locations: hotspot.locations
                };
                break;
              }
            }
          }

          _this3._hotspots.trigger('hotspotsReceived', {
            pageSpread: _this3._core.pageSpreads.get(hotspotRequest.id),
            versoPageSpread: versoPageSpread,
            ratio: _this3.options.hotspotRatio,
            pages: hotspotRequest.pages,
            hotspots: hotspots$$1
          });

          return false;
        });
      }
    }, {
      key: "hotspotsRequested",
      value: function hotspotsRequested(e) {
        this.hotspotQueue.push(e);
        this.processHotspotQueue();
      }
    }, {
      key: "applyHotspots",
      value: function applyHotspots() {
        var hotspots$$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.hotspots = hotspots$$1;
        this.processHotspotQueue();
      }
    }, {
      key: "beforeNavigation",
      value: function beforeNavigation() {
        if (this.popover != null) {
          this.popover.destroy();
        }
      }
    }, {
      key: "clicked",
      value: function clicked(e) {
        var _this4 = this;

        this.pickHotspot(e, function (hotspot) {
          _this4.trigger('hotspotClicked', hotspot);
        });
      }
    }, {
      key: "contextmenu",
      value: function contextmenu(e) {
        var _this5 = this;

        this.pickHotspot(e, function (hotspot) {
          _this5.trigger('hotspotContextmenu', hotspot);
        });
      }
    }, {
      key: "pressed",
      value: function pressed(e) {
        var _this6 = this;

        this.pickHotspot(e, function (hotspot) {
          _this6.trigger('hotspotPressed', hotspot);
        });
      }
    }]);

    return Viewer;
  }();

  MicroEvent$8.mixin(Viewer);
  var viewer = Viewer;

  var Bootstrapper, MicroEvent$9, SGN$f;
  MicroEvent$9 = microevent;
  SGN$f = core;

  var bootstrapper = Bootstrapper =
  /*#__PURE__*/
  function () {
    function Bootstrapper() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Bootstrapper);

      this.options = options;
      return;
    }

    _createClass(Bootstrapper, [{
      key: "createViewer",
      value: function createViewer(data) {
        return new SGN$f.PagedPublicationKit.Viewer(this.options.el, {
          id: this.options.id,
          ownedBy: data.details.dealer_id,
          color: '#' + data.details.branding.pageflip.color,
          hotspotRatio: data.details.dimensions.height,
          keyboard: true,
          pageId: this.options.pageId,
          eventTracker: this.options.eventTracker,
          pages: this.transformPages(data.pages)
        });
      }
    }, {
      key: "transformPages",
      value: function transformPages(pages) {
        return pages.map(function (page, i) {
          var pageNumber;
          pageNumber = i + 1;
          return {
            id: 'page' + pageNumber,
            label: pageNumber + '',
            pageNumber: pageNumber,
            images: {
              medium: page.view,
              large: page.zoom
            }
          };
        });
      }
    }, {
      key: "applyHotspots",
      value: function applyHotspots(viewer, hotspots) {
        var obj;
        obj = {};
        hotspots.forEach(function (hotspot) {
          return obj[hotspot.id] = hotspot;
        });
        viewer.applyHotspots(obj);
      }
    }, {
      key: "fetch",
      value: function fetch(callback) {
        callback = callback.bind(this);
        SGN$f.util.async.parallel([this.fetchDetails.bind(this), this.fetchPages.bind(this)], function (result) {
          var data;
          data = {
            details: result[0][1],
            pages: result[1][1]
          };

          if (result[0][0] != null) {
            callback(result[0][0]);
          } else if (result[1][0] != null) {
            callback(result[1][0]);
          } else if (data.details != null && data.pages != null) {
            callback(null, data);
          } else {
            callback(new Error());
          }
        });
      }
    }, {
      key: "fetchDetails",
      value: function fetchDetails(callback) {
        SGN$f.CoreKit.request({
          url: "/v2/catalogs/".concat(this.options.id)
        }, callback);
      }
    }, {
      key: "fetchPages",
      value: function fetchPages(callback) {
        SGN$f.CoreKit.request({
          url: "/v2/catalogs/".concat(this.options.id, "/pages")
        }, callback);
      }
    }, {
      key: "fetchHotspots",
      value: function fetchHotspots(callback) {
        SGN$f.CoreKit.request({
          url: "/v2/catalogs/".concat(this.options.id, "/hotspots")
        }, callback);
      }
    }]);

    return Bootstrapper;
  }();

  var pagedPublication = {
    Viewer: viewer,
    Bootstrapper: bootstrapper
  };
  var pagedPublication_1 = pagedPublication.Viewer;
  var pagedPublication_2 = pagedPublication.Bootstrapper;

  var quot = /"/g;
  // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
  var createHTML = function (string, tag, attribute, value) {
    var S = String(_defined(string));
    var p1 = '<' + tag;
    if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
    return p1 + '>' + S + '</' + tag + '>';
  };
  var _stringHtml = function (NAME, exec) {
    var O = {};
    O[NAME] = exec(createHTML);
    _export(_export.P + _export.F * _fails(function () {
      var test = ''[NAME]('"');
      return test !== test.toLowerCase() || test.split('"').length > 3;
    }), 'String', O);
  };

  'use strict';
  // B.2.3.10 String.prototype.link(url)
  _stringHtml('link', function (createHTML) {
    return function link(url) {
      return createHTML(this, 'a', 'href', url);
    };
  });

  var es6_string_link = {

  };

  var incito = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
    'object' === 'object' && 'object' !== 'undefined' ? module.exports = factory(web_dom_iterable, es6_array_iterator, es6_regexp_replace, es6_string_link, es6_function_name, es6_regexp_split) :
    typeof undefined === 'function' && undefined.amd ? undefined(['core-js/modules/web.dom.iterable', 'core-js/modules/es6.array.iterator', 'core-js/modules/es6.regexp.replace', 'core-js/modules/es6.string.link', 'core-js/modules/es6.function.name', 'core-js/modules/es6.regexp.split'], factory) :
    (global = global || self, global.Incito = factory());
  }(commonjsGlobal, function () { 'use strict';

    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function (obj) {
          return typeof obj;
        };
      } else {
        _typeof = function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (typeof call === "object" || typeof call === "function")) {
        return call;
      }

      return _assertThisInitialized(self);
    }

    var commonjsGlobal$$1 = typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule$$1(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var microevent = createCommonjsModule$$1(function (module) {
    /**
     * MicroEvent - to make any js object an event emitter (server or browser)
     * 
     * - pure javascript - server compatible, browser compatible
     * - dont rely on the browser doms
     * - super simple - you get it immediatly, no mistery, no magic involved
     *
     * - create a MicroEventDebug with goodies to debug
     *   - make it safer to use
    */

    var MicroEvent	= function(){};
    MicroEvent.prototype	= {
    	bind	: function(event, fct){
    		this._events = this._events || {};
    		this._events[event] = this._events[event]	|| [];
    		this._events[event].push(fct);
    	},
    	unbind	: function(event, fct){
    		this._events = this._events || {};
    		if( event in this._events === false  )	return;
    		this._events[event].splice(this._events[event].indexOf(fct), 1);
    	},
    	trigger	: function(event /* , args... */){
    		this._events = this._events || {};
    		if( event in this._events === false  )	return;
    		for(var i = 0; i < this._events[event].length; i++){
    			this._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));
    		}
    	}
    };

    /**
     * mixin will delegate all MicroEvent.js function in the destination object
     *
     * - require('MicroEvent').mixin(Foobar) will make Foobar able to use MicroEvent
     *
     * @param {Object} the object which will support MicroEvent
    */
    MicroEvent.mixin	= function(destObject){
    	var props	= ['bind', 'unbind', 'trigger'];
    	for(var i = 0; i < props.length; i ++){
    		destObject.prototype[props[i]]	= MicroEvent.prototype[props[i]];
    	}
    };

    // export in common js
    if( 'exports' in module){
    	module.exports	= MicroEvent;
    }
    });

    var utils;
    utils = {
      formatUnit: function formatUnit(unit) {
        if (unit == null) {
          return 0;
        } else if (typeof unit === 'number') {
          return "".concat(unit, "px");
        } else if (typeof unit === 'string') {
          return unit.replace('dp', 'px');
        } else {
          return 0;
        }
      },
      isDefinedStr: function isDefinedStr(value) {
        return typeof value === 'string' && value.length > 0;
      },
      escapeHTML: function escapeHTML() {
        var unsafe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        return unsafe.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
      },
      throttle: function throttle(fn, delay) {
        var timer;

        if (delay === 0) {
          return fn;
        }

        timer = false;
        return function () {
          if (timer) {
            return;
          }

          timer = true;
          return setTimeout(function () {
            timer = false;
            fn.apply(void 0, arguments);
          }, delay);
        };
      }
    };
    var utils_1 = utils;

    var View,
        utils$1,
        indexOf = [].indexOf;
    utils$1 = utils_1;

    var view = View = function () {
      var View =
      /*#__PURE__*/
      function () {
        function View() {
          var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          _classCallCheck(this, View);

          this.attrs = attrs;
          this.el = this.createElement();
          this.setAttributes();
          return;
        }

        _createClass(View, [{
          key: "render",
          value: function render() {
            return this;
          }
        }, {
          key: "createElement",
          value: function createElement() {
            var className, el, ref;
            el = document.createElement(this.tagName);
            className = (ref = this.className) != null ? ref : '';
            el.className = 'incito__view ' + className;
            return el;
          }
        }, {
          key: "setAttributes",
          value: function setAttributes() {
            var _this = this;

            var ref, ref1, shadow, strokeStyles, transforms; // Identifier.

            if (utils$1.isDefinedStr(this.attrs.id)) {
              this.el.setAttribute('data-id', this.attrs.id);
            } // Role.


            if (utils$1.isDefinedStr(this.attrs.role)) {
              this.el.setAttribute('data-role', this.attrs.role);
            } // Accessibility label.


            if (utils$1.isDefinedStr(this.attrs.accessibility_label)) {
              this.el.setAttribute('aria-label', this.attrs.accessibility_label);
            } // Accessibility visibility.


            if (this.attrs.accessibility_hidden === true) {
              this.el.setAttribute('aria-hidden', true);
            } // Title.


            if (utils$1.isDefinedStr(this.attrs.title)) {
              this.el.setAttribute('title', this.attrs.title);
            } // Gravity.


            if (utils$1.isDefinedStr(this.attrs.gravity)) {
              this.el.setAttribute('data-gravity', this.attrs.gravity);
            } // Link.


            if (utils$1.isDefinedStr(this.attrs.link)) {
              this.el.setAttribute('data-link', '');
              this.el.addEventListener('click', function () {
                window.open(_this.attrs.link, '_blank');
              }, false);
            } // Width.


            if (this.attrs.layout_width === 'match_parent') {
              this.el.style.width = '100%';
            } else if (this.attrs.layout_width === 'wrap_content') {
              this.el.style.display = 'inline-block';
            } else if (this.attrs.layout_width != null) {
              this.el.style.width = utils$1.formatUnit(this.attrs.layout_width);
            } // Height.


            if (this.attrs.layout_height === 'match_parent') {
              this.el.style.height = '100%';
            } else if (this.attrs.layout_height === 'wrap_content') {
              this.el.style.height = 'auto';
            } else if (this.attrs.layout_height != null) {
              this.el.style.height = utils$1.formatUnit(this.attrs.layout_height);
            } // Min width.


            if (this.attrs.min_width != null) {
              this.el.style.minWidth = utils$1.formatUnit(this.attrs.min_width);
            } // Max width.


            if (this.attrs.max_width != null) {
              this.el.style.maxWidth = utils$1.formatUnit(this.attrs.max_width);
            } // Min height.


            if (this.attrs.min_height != null) {
              this.el.style.minHeight = utils$1.formatUnit(this.attrs.min_height);
            } // Max height.


            if (this.attrs.max_height != null) {
              this.el.style.maxHeight = utils$1.formatUnit(this.attrs.max_height);
            } // Position in relation to parent.


            if (this.attrs.layout_top != null) {
              this.el.style.top = utils$1.formatUnit(this.attrs.layout_top);
            }

            if (this.attrs.layout_left != null) {
              this.el.style.left = utils$1.formatUnit(this.attrs.layout_left);
            }

            if (this.attrs.layout_right != null) {
              this.el.style.right = utils$1.formatUnit(this.attrs.layout_right);
            }

            if (this.attrs.layout_bottom != null) {
              this.el.style.bottom = utils$1.formatUnit(this.attrs.layout_bottom);
            } // Background.


            if (utils$1.isDefinedStr(this.attrs.background_color)) {
              this.el.style.backgroundColor = this.attrs.background_color;
            }

            if (utils$1.isDefinedStr(this.attrs.background_image)) {
              this.el.setAttribute('data-src', this.attrs.background_image);
              this.lazyload = true;
            }

            if ((ref = this.attrs.background_tile_mode) === 'repeat_x' || ref === 'repeat_y' || ref === 'repeat') {
              this.el.style.backgroundRepeat = this.attrs.background_tile_mode.replace('_', '-');
            }

            if (utils$1.isDefinedStr(this.attrs.background_image_position)) {
              this.el.style.backgroundPosition = this.attrs.background_image_position.replace('_', ' ');
            }

            if (this.attrs.background_image_scale_type === 'center_crop') {
              this.el.style.backgroundSize = 'cover';
            } else if (this.attrs.background_image_scale_type === 'center_inside') {
              this.el.style.backgroundSize = 'contain';
            } // Margin.


            if (this.attrs.layout_margin != null) {
              this.el.style.margin = utils$1.formatUnit(this.attrs.layout_margin);
            }

            if (this.attrs.layout_margin_top != null) {
              this.el.style.marginTop = utils$1.formatUnit(this.attrs.layout_margin_top);
            }

            if (this.attrs.layout_margin_left != null) {
              this.el.style.marginLeft = utils$1.formatUnit(this.attrs.layout_margin_left);
            }

            if (this.attrs.layout_margin_right != null) {
              this.el.style.marginRight = utils$1.formatUnit(this.attrs.layout_margin_right);
            }

            if (this.attrs.layout_margin_bottom != null) {
              this.el.style.marginBottom = utils$1.formatUnit(this.attrs.layout_margin_bottom);
            } // Padding.


            if (this.attrs.padding != null) {
              this.el.style.padding = utils$1.formatUnit(this.attrs.padding);
            }

            if (this.attrs.padding_top != null) {
              this.el.style.paddingTop = utils$1.formatUnit(this.attrs.padding_top);
            }

            if (this.attrs.padding_left != null) {
              this.el.style.paddingLeft = utils$1.formatUnit(this.attrs.padding_left);
            }

            if (this.attrs.padding_right != null) {
              this.el.style.paddingRight = utils$1.formatUnit(this.attrs.padding_right);
            }

            if (this.attrs.padding_bottom != null) {
              this.el.style.paddingBottom = utils$1.formatUnit(this.attrs.padding_bottom);
            } // Corner radius.


            if (this.attrs.corner_radius != null) {
              this.el.style.borderRadius = utils$1.formatUnit(this.attrs.corner_radius);
            }

            if (this.attrs.corner_top_left_radius != null) {
              this.el.style.borderTopLeftRadius = utils$1.formatUnit(this.attrs.corner_top_left_radius);
            }

            if (this.attrs.corner_top_right_radius != null) {
              this.el.style.borderTopRightRadius = utils$1.formatUnit(this.attrs.corner_top_right_radius);
            }

            if (this.attrs.corner_bottom_left_radius != null) {
              this.el.style.borderBottomLeftRadius = utils$1.formatUnit(this.attrs.corner_bottom_left_radius);
            }

            if (this.attrs.corner_bottom_right_radius != null) {
              this.el.style.borderBottomRightRadius = utils$1.formatUnit(this.attrs.corner_bottom_right_radius);
            } // Clip children.


            if (this.attrs.clip_children === false) {
              this.el.style.overflow = 'visible';
            } // Shadow.


            shadow = this.getShadow();

            if (shadow != null) {
              this.el.style.boxShadow = "".concat(shadow.dx, "px ").concat(shadow.dy, "px ").concat(shadow.radius, "px ").concat(shadow.color);
            } // Stroke.


            strokeStyles = ['solid', 'dotted', 'dashed'];

            if (this.attrs.stroke_width != null) {
              this.el.style.borderWidth = utils$1.formatUnit(this.attrs.stroke_width);
            }

            if (this.attrs.stroke_color != null) {
              this.el.style.borderColor = this.attrs.stroke_color;
            }

            if (ref1 = this.attrs.stroke_style, indexOf.call(strokeStyles, ref1) >= 0) {
              this.el.style.borderStyle = this.attrs.stroke_style;
            }

            if (this.attrs.stroke_top_width != null) {
              this.el.style.borderTopWidth = utils$1.formatUnit(this.attrs.stroke_top_width);
            }

            if (this.attrs.stroke_top_color != null) {
              this.el.style.borderTopColor = this.attrs.stroke_top_color;
            }

            if (this.attrs.stroke_left_width != null) {
              this.el.style.borderLeftWidth = utils$1.formatUnit(this.attrs.stroke_left_width);
            }

            if (this.attrs.stroke_left_color != null) {
              this.el.style.borderLeftColor = this.attrs.stroke_left_color;
            }

            if (this.attrs.stroke_right_width != null) {
              this.el.style.borderRightWidth = utils$1.formatUnit(this.attrs.stroke_right_width);
            }

            if (this.attrs.stroke_right_color != null) {
              this.el.style.borderRightColor = this.attrs.stroke_right_color;
            }

            if (this.attrs.stroke_bottom_width != null) {
              this.el.style.borderBottomWidth = utils$1.formatUnit(this.attrs.stroke_bottom_width);
            }

            if (this.attrs.stroke_bottom_color != null) {
              this.el.style.borderBottomColor = this.attrs.stroke_bottom_color;
            } // Flex.


            if (typeof this.attrs.layout_flex_shrink === 'number') {
              this.el.style.flexShrink = this.attrs.layout_flex_shrink;
              this.el.style.msFlexShrink = this.attrs.layout_flex_shrink;
            }

            if (typeof this.attrs.layout_flex_grow === 'number') {
              this.el.style.flexGrow = this.attrs.layout_flex_grow;
              this.el.style.msFlexGrow = this.attrs.layout_flex_grow;
            }

            if (this.attrs.layout_flex_basis != null) {
              this.el.style.flexBasis = utils$1.formatUnit(this.attrs.layout_flex_basis);
              this.el.style.msFlexBasis = utils$1.formatUnit(this.attrs.layout_flex_basis);
            } // Transforms.


            transforms = this.getTransforms();

            if (transforms.length > 0) {
              this.el.style.transform = transforms.join(' ');
            } // Transform origin.


            if (Array.isArray(this.attrs.transform_origin) && this.attrs.transform_origin.length === 2) {
              this.el.style.transformOrigin = [utils$1.formatUnit(this.attrs.transform_origin[0]), utils$1.formatUnit(this.attrs.transform_origin[1])].join(' ');
            }
          }
        }, {
          key: "getTransforms",
          value: function getTransforms() {
            var transforms, translateX, translateY;
            transforms = [];
            translateX = utils$1.formatUnit(this.attrs.transform_translate_x);
            translateY = utils$1.formatUnit(this.attrs.transform_translate_y);

            if (translateX !== 0) {
              transforms.push("translateX(".concat(translateX, ")"));
            }

            if (translateY !== 0) {
              transforms.push("translateY(".concat(translateY, ")"));
            }

            if (typeof this.attrs.transform_rotate === 'number' && this.attrs.transform_rotate !== 0) {
              transforms.push("rotate(".concat(this.attrs.transform_rotate, "deg)"));
            }

            if (typeof this.attrs.transform_scale === 'number' && this.attrs.transform_scale !== 1) {
              transforms.push("scale(".concat(this.attrs.transform_scale, ")"));
            }

            return transforms;
          }
        }, {
          key: "getShadow",
          value: function getShadow() {
            var color, dx, dy, radius;

            if (utils$1.isDefinedStr(this.attrs.shadow_color)) {
              dx = typeof this.attrs.shadow_dx === 'number' ? this.attrs.shadow_dx : 0;
              dy = typeof this.attrs.shadow_dy === 'number' ? this.attrs.shadow_dy : 0;
              radius = typeof this.attrs.shadow_radius === 'number' ? this.attrs.shadow_radius : 0;
              color = this.attrs.shadow_color;
              return {
                dx: dx,
                dy: dy,
                radius: radius,
                color: color
              };
            }
          }
        }]);

        return View;
      }();
      View.prototype.tagName = 'div';
      View.prototype.className = null;
      return View;
    }.call(commonjsGlobal$$1);

    var Image, View$1, utils$2;
    View$1 = view;
    utils$2 = utils_1;

    var image = Image = function () {
      var Image =
      /*#__PURE__*/
      function (_View) {
        _inherits(Image, _View);

        function Image() {
          _classCallCheck(this, Image);

          return _possibleConstructorReturn(this, _getPrototypeOf(Image).apply(this, arguments));
        }

        _createClass(Image, [{
          key: "render",
          value: function render() {
            if (utils$2.isDefinedStr(this.attrs.src)) {
              this.el.setAttribute('data-src', this.attrs.src);
            }

            if (utils$2.isDefinedStr(this.attrs.label)) {
              this.el.setAttribute('alt', this.attrs.label);
            } else {
              this.el.setAttribute('alt', '');
            }

            return this;
          }
        }]);

        return Image;
      }(View$1);
      Image.prototype.tagName = 'img';
      Image.prototype.className = 'incito__image-view';
      Image.prototype.lazyload = true;
      return Image;
    }.call(commonjsGlobal$$1);

    var TextView,
        View$2,
        utils$3,
        indexOf$1 = [].indexOf;
    View$2 = view;
    utils$3 = utils_1;

    var text = TextView = function () {
      var TextView =
      /*#__PURE__*/
      function (_View) {
        _inherits(TextView, _View);

        function TextView() {
          _classCallCheck(this, TextView);

          return _possibleConstructorReturn(this, _getPrototypeOf(TextView).apply(this, arguments));
        }

        _createClass(TextView, [{
          key: "render",
          value: function render() {
            var parsedText, text, textShadow, textStyles;

            if (typeof this.attrs.text !== 'string') {
              return this;
            }

            textStyles = (this.attrs.text_style || '').split('|');
            text = this.attrs.text;

            if (Array.isArray(this.attrs.spans) && this.attrs.spans.length > 0) {
              parsedText = this.parseSpans(text, this.attrs.spans);
              text = parsedText.map(function (item) {
                var escapedText, spanName;
                escapedText = utils$3.escapeHTML(item.text || '');

                if (item.span != null && item.span.name === 'link' && item.span.url != null) {
                  return '<a href="' + encodeURI(item.span.url) + '" rel="external" target="_blank">' + escapedText + '</a>';
                } else if (item.span != null && item.span.name != null) {
                  spanName = item.span.name;
                  return '<span data-name="' + spanName + '">' + escapedText + '</span>';
                } else {
                  return escapedText;
                }
              });
              text = text.join('');
            } else {
              text = utils$3.escapeHTML(text);
            }

            if (this.attrs.text_prevent_widow) {
              this.el.innerHTML = text.replace(/\&nbsp;([^\s]+)$/, ' $1').replace(/\s([^\s]+)\s*$/, '&nbsp;$1');
            } else {
              this.el.innerHTML = text;
            } // Font family.


            if (Array.isArray(this.attrs.font_family) && this.attrs.font_family.length > 0) {
              this.el.style.fontFamily = this.attrs.font_family.join(', ');
            } // Text size.


            if (this.attrs.text_size != null) {
              this.el.style.fontSize = "".concat(this.attrs.text_size, "px");
            } // Line height.


            if (this.attrs.line_spacing_multiplier != null) {
              this.el.style.lineHeight = this.attrs.line_spacing_multiplier;
            } // Text color.


            if (this.attrs.text_color != null) {
              this.el.style.color = this.attrs.text_color;
            } // Text styles.


            if (indexOf$1.call(textStyles, 'bold') >= 0) {
              this.el.style.fontWeight = 'bold';
            }

            if (indexOf$1.call(textStyles, 'italic') >= 0) {
              this.el.style.fontStyle = 'italic';
            } // Text shadow.


            textShadow = this.getTextShadow();

            if (textShadow != null) {
              this.el.style.textShadow = "".concat(textShadow.dx, "px ").concat(textShadow.dy, "px ").concat(textShadow.radius, "px ").concat(textShadow.color);
            } // Text alignment.


            if (this.attrs.text_alignment === 'left') {
              this.el.style.textAlign = 'left';
            } else if (this.attrs.text_alignment === 'center') {
              this.el.style.textAlign = 'center';
            } else if (this.attrs.text_alignment === 'right') {
              this.el.style.textAlign = 'right';
            } // Max lines.


            if (this.attrs.single_line === true || this.attrs.max_lines === 1) {
              this.el.setAttribute('data-single-line', true);
            } else if (typeof this.attrs.max_lines === 'number') {
              this.el.style.display = '-webkit-box';
              this.el.style.webkitLineClamp = this.attrs.max_lines;
              this.el.style.webkitBoxOrient = 'vertical';
            } // All caps.


            if (this.attrs.text_all_caps === true) {
              this.el.style.textTransform = 'uppercase';
            }

            return this;
          }
        }, {
          key: "parseSpans",
          value: function parseSpans(text) {
            var spans = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var result;
            result = [];

            if (spans.length === 0) {
              result.push({
                text: text
              });
            } else if (spans[0].start > 0) {
              result.push({
                text: text.slice(0, spans[0].start)
              });
            }

            spans.forEach(function (span, i) {
              var endIndex, startIndex;
              startIndex = span.start;
              endIndex = span.end;
              result.push({
                text: text.slice(startIndex, endIndex),
                span: span
              });

              if (i === spans.length - 1) {
                if (endIndex < text.length) {
                  result.push({
                    text: text.slice(endIndex, text.length)
                  });
                }
              } else if (endIndex < spans[i + 1].start) {
                result.push({
                  text: text.slice(endIndex, spans[i + 1].start)
                });
              }
            });
            return result;
          }
        }, {
          key: "getTextShadow",
          value: function getTextShadow() {
            var color, dx, dy, radius;

            if (utils$3.isDefinedStr(this.attrs.text_shadow_color)) {
              dx = typeof this.attrs.text_shadow_dx === 'number' ? this.attrs.text_shadow_dx : 0;
              dy = typeof this.attrs.text_shadow_dy === 'number' ? this.attrs.text_shadow_dy : 0;
              radius = typeof this.attrs.text_shadow_radius === 'number' ? this.attrs.text_shadow_radius : 0;
              color = this.attrs.text_shadow_color;
              return {
                dx: dx,
                dy: dy,
                radius: radius,
                color: color
              };
            }
          }
        }]);

        return TextView;
      }(View$2);
      TextView.prototype.tagName = 'p';
      TextView.prototype.className = 'incito__text-view';
      return TextView;
    }.call(commonjsGlobal$$1);

    var FlexLayout,
        View$3,
        allowedHostnames,
        utils$4,
        indexOf$2 = [].indexOf;
    View$3 = view;
    utils$4 = utils_1;
    allowedHostnames = ['www.youtube.com', 'www.vimeo.com', 'video.twentythree.net'];

    var videoEmbed = FlexLayout = function () {
      var FlexLayout =
      /*#__PURE__*/
      function (_View) {
        _inherits(FlexLayout, _View);

        function FlexLayout() {
          _classCallCheck(this, FlexLayout);

          return _possibleConstructorReturn(this, _getPrototypeOf(FlexLayout).apply(this, arguments));
        }

        _createClass(FlexLayout, [{
          key: "render",
          value: function render() {
            var linkEl, ref, src;

            if (utils$4.isDefinedStr(this.attrs.src)) {
              src = this.attrs.src;
              linkEl = document.createElement('a');
              linkEl.setAttribute('href', src);

              if (ref = linkEl.hostname, indexOf$2.call(allowedHostnames, ref) >= 0) {
                this.el.setAttribute('data-src', src);
                this.lazyload = true;
              }
            }

            return this;
          }
        }]);

        return FlexLayout;
      }(View$3);
      FlexLayout.prototype.className = 'incito__video-embed-view';
      FlexLayout.prototype.lazyload = false;
      return FlexLayout;
    }.call(commonjsGlobal$$1);

    var Video, View$4, utils$5;
    View$4 = view;
    utils$5 = utils_1;

    var video = Video = function () {
      var Video =
      /*#__PURE__*/
      function (_View) {
        _inherits(Video, _View);

        function Video() {
          _classCallCheck(this, Video);

          return _possibleConstructorReturn(this, _getPrototypeOf(Video).apply(this, arguments));
        }

        _createClass(Video, [{
          key: "render",
          value: function render() {
            if (!utils$5.isDefinedStr(this.attrs.src)) {
              return;
            }

            this.el.muted = true;
            this.el.preload = 'metadata';
            this.el.setAttribute('playsinline', 'true');
            this.el.setAttribute('webkit-playsinline', 'true');
            this.el.setAttribute('data-src', this.attrs.src);
            this.el.setAttribute('data-mime', this.attrs.mime);

            if (this.attrs.autoplay === true) {
              this.el.autoplay = true;
            }

            if (this.attrs.loop === true) {
              this.el.loop = true;
            }

            if (this.attrs.controls === true) {
              this.el.controls = true;
            }

            return this;
          }
        }]);

        return Video;
      }(View$4);
      Video.prototype.className = 'incito__video-view';
      Video.prototype.tagName = 'video';
      Video.prototype.lazyload = true;
      return Video;
    }.call(commonjsGlobal$$1);

    var AbsoluteLayout, View$5;
    View$5 = view;

    var absoluteLayout = AbsoluteLayout = function () {
      var AbsoluteLayout =
      /*#__PURE__*/
      function (_View) {
        _inherits(AbsoluteLayout, _View);

        function AbsoluteLayout() {
          _classCallCheck(this, AbsoluteLayout);

          return _possibleConstructorReturn(this, _getPrototypeOf(AbsoluteLayout).apply(this, arguments));
        }

        _createClass(AbsoluteLayout, [{
          key: "render",
          value: function render() {
            return this;
          }
        }]);

        return AbsoluteLayout;
      }(View$5);
      AbsoluteLayout.prototype.className = 'incito__absolute-layout-view';
      return AbsoluteLayout;
    }.call(commonjsGlobal$$1);

    var FlexLayout$1,
        View$6,
        alignItemModes,
        flexDirectionModes,
        flexJustifyModes,
        indexOf$3 = [].indexOf;
    View$6 = view;
    alignItemModes = ['stretch', 'center', 'flex-start', 'flex-end', 'baseline'];
    flexJustifyModes = ['flex-start', 'flex-end', 'center', 'space-between', 'space-around'];
    flexDirectionModes = ['row', 'column'];

    var flexLayout = FlexLayout$1 = function () {
      var FlexLayout =
      /*#__PURE__*/
      function (_View) {
        _inherits(FlexLayout, _View);

        function FlexLayout() {
          _classCallCheck(this, FlexLayout);

          return _possibleConstructorReturn(this, _getPrototypeOf(FlexLayout).apply(this, arguments));
        }

        _createClass(FlexLayout, [{
          key: "render",
          value: function render() {
            var ref, ref1, ref2;

            if (ref = this.attrs.layout_flex_align_items, indexOf$3.call(alignItemModes, ref) >= 0) {
              this.el.style.alignItems = this.attrs.layout_flex_align_items;
              this.el.style.msAlignItems = this.attrs.layout_flex_align_items;
            }

            if (ref1 = this.attrs.layout_flex_justify_content, indexOf$3.call(flexJustifyModes, ref1) >= 0) {
              this.el.style.justifyContent = this.attrs.layout_flex_justify_content;
              this.el.style.msFlexPack = this.attrs.layout_flex_justify_content;
            }

            if (ref2 = this.attrs.layout_flex_direction, indexOf$3.call(flexDirectionModes, ref2) >= 0) {
              this.el.style.flexDirection = this.attrs.layout_flex_direction;
              this.el.style.msFlexDirection = this.attrs.layout_flex_direction;
            }

            return this;
          }
        }]);

        return FlexLayout;
      }(View$6);
      FlexLayout.prototype.className = 'incito__flex-layout-view';
      return FlexLayout;
    }.call(commonjsGlobal$$1);

    var AbsoluteLayout$1, FlexLayout$2, ImageView, Incito, MicroEvent, TextView$1, VideoEmbedView, VideoView, View$7, utils$6;
    MicroEvent = microevent;
    utils$6 = utils_1;
    View$7 = view;
    ImageView = image;
    TextView$1 = text;
    VideoEmbedView = videoEmbed;
    VideoView = video;
    AbsoluteLayout$1 = absoluteLayout;
    FlexLayout$2 = flexLayout;

    Incito =
    /*#__PURE__*/
    function () {
      function Incito(containerEl) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, Incito);

        this.containerEl = containerEl;
        this.options = options;
        this.el = document.createElement('div');
        this.entries = [];
        this.ids = {};
        return;
      }

      _createClass(Incito, [{
        key: "start",
        value: function start() {
          var incito;
          incito = this.options.incito || {};
          this.el.className = 'incito';

          if (incito.locale != null) {
            this.el.setAttribute('lang', incito.locale);
          }

          this.loadFonts(incito.font_assets);
          this.applyTheme(incito.theme);
          this.render(this.el, incito.root_view);
          this.containerEl.appendChild(this.el);
          this.lazyload();
          return this;
        }
      }, {
        key: "destroy",
        value: function destroy() {
          this.containerEl.removeChild(this.el);

          if (this.lazyloadCheck != null) {
            window.removeEventListener('scroll', this.lazyloadCheck, false);
            window.removeEventListener('resize', this.lazyloadCheck, false);
          }

          this.trigger('destroyed');
        }
      }, {
        key: "render",
        value: function render(el) {
          var _this = this;

          var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var match, ref, view, viewName, views;
          match = null;
          viewName = attrs.view_name;
          views = {
            View: View$7,
            ImageView: ImageView,
            TextView: TextView$1,
            VideoEmbedView: VideoEmbedView,
            VideoView: VideoView,
            AbsoluteLayout: AbsoluteLayout$1,
            FlexLayout: FlexLayout$2
          };
          match = (ref = views[viewName]) != null ? ref : View$7;
          view = new match(attrs).render();

          if (view.lazyload === true) {
            this.entries.push(view.el);
          }

          if (attrs.id != null && _typeof(attrs.meta) === 'object') {
            this.ids[attrs.id] = attrs.meta;
          }

          if (Array.isArray(attrs.child_views)) {
            attrs.child_views.forEach(function (childView) {
              _this.render(view.el, childView);
            });
          }

          el.appendChild(view.el);
          return view.el;
        }
      }, {
        key: "applyTheme",
        value: function applyTheme() {
          var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          if (Array.isArray(theme.font_family)) {
            this.el.style.fontFamily = theme.font_family.join(', ');
          }

          if (utils$6.isDefinedStr(theme.background_color)) {
            this.el.style.backgroundColor = theme.background_color;
          }

          if (utils$6.isDefinedStr(theme.text_color)) {
            this.el.style.color = theme.text_color;
          }

          if (typeof theme.line_spacing_multiplier === 'number') {
            this.el.style.lineHeight = theme.line_spacing_multiplier;
          }
        }
      }, {
        key: "loadFonts",
        value: function loadFonts() {
          var fontAssets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var font, key, ref, ref1, styleEl, text, urls, value;

          if ('FontFace' in window) {
            for (key in fontAssets) {
              value = fontAssets[key];
              urls = value.src.map(function (src) {
                return "url(".concat(src[1], ")");
              }).join(', ');
              font = new FontFace(key, urls, {
                style: (ref = value.style) != null ? ref : 'normal',
                weight: (ref1 = value.weight) != null ? ref1 : 'normal'
              });
              document.fonts.add(font);
              font.load();
            }
          } else {
            styleEl = document.createElement('style');

            for (key in fontAssets) {
              value = fontAssets[key];
              urls = value.src.map(function (src) {
                return "url('".concat(src[1], "') format('").concat(src[0], "')");
              }).join(', ');
              text = "@font-face {\n    font-family: '".concat(key, "';\n    src: ").concat(urls, ";\n}");
              styleEl.appendChild(document.createTextNode(text));
            }

            document.head.appendChild(styleEl);
          }
        }
      }, {
        key: "lazyload",
        value: function lazyload() {
          var _this2 = this;

          var check, isInsideViewport, observer, threshold;
          threshold = 1000;

          if ('IntersectionObserver' in window) {
            observer = new IntersectionObserver(function (entries) {
              entries.forEach(function (entry) {
                if (entry.isIntersecting || entry.intersectionRatio > 0) {
                  _this2.revealElement(entry.target);

                  observer.unobserve(entry.target);
                }
              });
            }, {
              rootMargin: "".concat(threshold, "px")
            });
            this.entries.forEach(observer.observe.bind(observer));
          } else {
            isInsideViewport = function isInsideViewport(el) {
              var rect, ref, windowHeight;
              rect = el.getBoundingClientRect();
              windowHeight = (ref = window.innerHeight) != null ? ref : document.documentElement.clientHeight;
              return rect.top <= windowHeight + threshold && rect.top + rect.height >= -threshold;
            };

            check = function check() {
              _this2.entries = _this2.entries.filter(function (el) {
                if (isInsideViewport(el)) {
                  _this2.revealElement(el);

                  return false;
                } else {
                  return true;
                }
              });
            };

            this.lazyloadCheck = utils$6.throttle(check, 150);
            window.addEventListener('scroll', this.lazyloadCheck, false);
            window.addEventListener('resize', this.lazyloadCheck, false);
            setTimeout(check, 0);
          }
        }
      }, {
        key: "revealElement",
        value: function revealElement(el) {
          var iframeEl, sourceEl, src;
          src = el.getAttribute('data-src');

          if (el.tagName.toLowerCase() === 'img') {
            el.addEventListener('load', function () {
              el.className += ' incito--loaded';
            });
            el.setAttribute('src', src);
          } else if (el.tagName.toLowerCase() === 'video') {
            sourceEl = document.createElement('source');
            sourceEl.setAttribute('src', src);
            sourceEl.setAttribute('type', el.getAttribute('data-mime'));
            el.appendChild(sourceEl);
          } else if (/incito__video-embed-view/gi.test(el.className)) {
            iframeEl = document.createElement('iframe');
            iframeEl.setAttribute('allow', 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture');
            iframeEl.setAttribute('src', src);
            el.appendChild(iframeEl);
          } else {
            el.style.backgroundImage = "url(".concat(src, ")");
          }
        }
      }]);

      return Incito;
    }();

    MicroEvent.mixin(Incito);
    var incito = Incito;

    return incito;

  }));

  });

  var Incito, MicroEvent$a, Viewer$1;
  Incito = incito;
  MicroEvent$a = microevent;

  Viewer$1 =
  /*#__PURE__*/
  function () {
    function Viewer(el) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Viewer);

      this.el = el;
      this.options = options;
      this.incito = new Incito(this.el, {
        incito: this.options.incito
      });
      return;
    }

    _createClass(Viewer, [{
      key: "start",
      value: function start() {
        this.incito.start();
        this.el.classList.add('sgn-incito--started');
        return this;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.incito.destroy();
      }
    }]);

    return Viewer;
  }();

  MicroEvent$a.mixin(Viewer$1);
  var viewer$1 = Viewer$1;

  var Controls$1;

  var controls$1 = Controls$1 =
  /*#__PURE__*/
  function () {
    function Controls(viewer) {
      var _this = this;

      _classCallCheck(this, Controls);

      this.viewer = viewer;
      this.progressEl = this.viewer.el.querySelector('.sgn-incito__progress');
      this.scrollListener = this.scroll.bind(this);
      this.isScrolling = false;

      if (this.progressEl != null) {
        this.progressEl.textContent = "0 %";
        window.addEventListener('scroll', this.scrollListener, false);
        this.viewer.bind('destroyed', function () {
          window.removeEventListener('scroll', _this.scrollListener);
        });
      }

      return;
    }

    _createClass(Controls, [{
      key: "scroll",
      value: function scroll() {
        var _this2 = this;

        var docHeight, progress, scrollTop, winHeight;
        scrollTop = window.pageYOffset;
        winHeight = window.innerHeight;
        docHeight = document.body.clientHeight;
        progress = Math.round(scrollTop / (docHeight - winHeight) * 100);
        clearTimeout(this.scrollTimeout);
        this.scrollTimeout = setTimeout(function () {
          _this2.isScrolling = false;

          _this2.viewer.el.classList.remove('sgn-incito--scrolling');
        }, 1000);

        if (this.isScrolling === false) {
          this.viewer.el.classList.add('sgn-incito--scrolling');
          this.isScrolling = true;
        }

        this.progressEl.textContent = "".concat(progress, " %");
      }
    }]);

    return Controls;
  }();

  var incito$1 = "query GetIncitoPublication($id: ID!, $deviceCategory: DeviceCategory!, $orientation: Orientation!, $pixelRatio: Float!, $pointer: Pointer!, $maxWidth: Int!, $versionsSupported: [String!]!, $locale: LocaleCode, $time: DateTime) {\n  node(id: $id) {\n    ... on IncitoPublication {\n      id\n      incito(deviceCategory: $deviceCategory, orientation: $orientation, pixelRatio: $pixelRatio, pointer: $pointer, maxWidth: $maxWidth, versionsSupported: $versionsSupported, locale: $locale, time: $time)\n    }\n  }\n}";

  var incito$2 = /*#__PURE__*/Object.freeze({
    default: incito$1
  });

  var require$$3 = getCjsExportFromNamespace(incito$2);

  var Bootstrapper$1, Controls$2, SGN$g, schema, util$2;
  util$2 = util_1;
  SGN$g = core;
  Controls$2 = controls$1;
  schema = require$$3;

  var bootstrapper$1 = Bootstrapper$1 =
  /*#__PURE__*/
  function () {
    function Bootstrapper() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Bootstrapper);

      this.options = options;
      this.deviceCategory = this.getDeviceCategory();
      this.pixelRatio = this.getPixelRatio();
      this.pointer = this.getPointer();
      this.orientation = this.getOrientation();
      this.time = this.getTime();
      this.locale = this.getLocale();
      this.maxWidth = this.getMaxWidth();
      this.versionsSupported = ['1.0.0'];
      this.storageKey = "incito-".concat(this.options.id);
      return;
    }

    _createClass(Bootstrapper, [{
      key: "getDeviceCategory",
      value: function getDeviceCategory() {
        return util$2.getDeviceCategory();
      }
    }, {
      key: "getPixelRatio",
      value: function getPixelRatio() {
        return window.devicePixelRatio || 1;
      }
    }, {
      key: "getPointer",
      value: function getPointer() {
        return util$2.getPointer();
      }
    }, {
      key: "getOrientation",
      value: function getOrientation() {
        var orientation;
        orientation = util$2.getOrientation(screen.width, screen.height);

        if (orientation === 'quadratic') {
          orientation = 'horizontal';
        }

        return orientation;
      }
    }, {
      key: "getTime",
      value: function getTime() {
        return new Date().toISOString();
      }
    }, {
      key: "getLocale",
      value: function getLocale() {
        var i, len, locale, localeChain, prefLocale;
        localeChain = [];
        locale = null;

        if (Array.isArray(navigator.languages) && navigator.languages.length > 0) {
          localeChain = localeChain.concat(navigator.languages);
        } else if (typeof navigator.language === 'string' && navigator.language.length > 0) {
          localeChain.push(navigator.language);
        } else if (typeof navigator.browserLanguage === 'string' && navigator.browserLanguage.length > 0) {
          localeChain.push(navigator.browserLanguage);
        }

        localeChain.push('en_US');

        for (i = 0, len = localeChain.length; i < len; i++) {
          prefLocale = localeChain[i];

          if (prefLocale == null) {
            continue;
          }

          prefLocale = prefLocale.replace('-', '_');

          if (/[a-z][a-z]_[A-Z][A-Z]/g.test(prefLocale)) {
            locale = prefLocale;
            break;
          }
        }

        return locale;
      }
    }, {
      key: "getMaxWidth",
      value: function getMaxWidth() {
        if (Math.abs(window.orientation) === 90) {
          return Math.min(this.options.el.offsetWidth, screen.width);
        } else {
          return this.options.el.offsetWidth;
        }
      }
    }, {
      key: "fetch",
      value: function fetch(callback) {
        var _this = this;

        var data;
        callback = callback.bind(this);
        data = SGN$g.storage.session.get(this.storageKey);

        if (data != null && data.response != null && data.width === this.maxWidth) {
          return callback(null, data.response);
        }

        SGN$g.GraphKit.request({
          query: schema,
          operationName: 'GetIncitoPublication',
          variables: {
            id: this.options.id,
            deviceCategory: 'DEVICE_CATEGORY_' + this.deviceCategory.toUpperCase(),
            pixelRatio: this.pixelRatio,
            pointer: 'POINTER_' + this.pointer.toUpperCase(),
            orientation: 'ORIENTATION_' + this.orientation.toUpperCase(),
            time: this.time,
            locale: this.locale,
            maxWidth: this.maxWidth,
            versionsSupported: this.versionsSupported
          }
        }, function (err, res) {
          if (err != null) {
            callback(err);
          } else if (res.errors && res.errors.length > 0) {
            callback(util$2.error(new Error(), 'graph request contained errors'));
          } else {
            callback(null, res);
            SGN$g.storage.session.set(_this.storageKey, {
              width: _this.maxWidth,
              response: res
            });
          }
        });
      }
    }, {
      key: "createViewer",
      value: function createViewer(data) {
        var controls, viewer;

        if (data.incito == null) {
          throw util$2.error(new Error(), 'you need to supply valid Incito to create a viewer');
        }

        viewer = new SGN$g.IncitoPublicationKit.Viewer(this.options.el, {
          id: this.options.id,
          incito: data.incito,
          eventTracker: this.options.eventTracker
        });
        controls = new Controls$2(viewer);
        return viewer;
      }
    }]);

    return Bootstrapper;
  }();

  var incitoPublication = {
    Viewer: viewer$1,
    Bootstrapper: bootstrapper$1
  };
  var incitoPublication_1 = incitoPublication.Viewer;
  var incitoPublication_2 = incitoPublication.Bootstrapper;

  'use strict';






  // @@match logic
  _fixReWks('match', 1, function (defined, MATCH, $match, maybeCallNative) {
    return [
      // `String.prototype.match` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.match
      function match(regexp) {
        var O = defined(this);
        var fn = regexp == undefined ? undefined : regexp[MATCH];
        return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
      },
      // `RegExp.prototype[@@match]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
      function (regexp) {
        var res = maybeCallNative($match, regexp, this);
        if (res.done) return res.value;
        var rx = _anObject(regexp);
        var S = String(this);
        if (!rx.global) return _regexpExecAbstract(rx, S);
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
        var A = [];
        var n = 0;
        var result;
        while ((result = _regexpExecAbstract(rx, S)) !== null) {
          var matchStr = String(result[0]);
          A[n] = matchStr;
          if (matchStr === '') rx.lastIndex = _advanceStringIndex(S, _toLength(rx.lastIndex), fullUnicode);
          n++;
        }
        return n === 0 ? null : A;
      }
    ];
  });

  var es6_regexp_match = {

  };

  var gator = createCommonjsModule(function (module) {
    /**
     * Copyright 2014 Craig Campbell
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
     * GATOR.JS
     * Simple Event Delegation
     *
     * @version 1.2.4
     *
     * Compatible with IE 9+, FF 3.6+, Safari 5+, Chrome
     *
     * Include legacy.js for compatibility with older browsers
     *
     *             .-._   _ _ _ _ _ _ _ _
     *  .-''-.__.-'00  '-' ' ' ' ' ' ' ' '-.
     * '.___ '    .   .--_'-' '-' '-' _'-' '._
     *  V: V 'vv-'   '_   '.       .'  _..' '.'.
     *    '=.____.=_.--'   :_.__.__:_   '.   : :
     *            (((____.-'        '-.  /   : :
     *                              (((-'\ .' /
     *                            _____..'  .'
     *                           '-._____.-'
     */
    var _matcher,
        _level = 0,
        _id = 0,
        _handlers = {},
        _gatorInstances = {};

    function _addEvent(gator, type, callback) {
      // blur and focus do not bubble up but if you use event capturing
      // then you will get them
      var useCapture = type == "blur" || type == "focus";
      gator.element.addEventListener(type, callback, useCapture);
    }

    function _cancel(e) {
      e.preventDefault();
      e.stopPropagation();
    }
    /**
         * returns function to use for determining if an element
         * matches a query selector
         *
         * @returns {Function}
         */


    function _getMatcher(element) {
      if (_matcher) {
        return _matcher;
      }

      if (element.matches) {
        _matcher = element.matches;
        return _matcher;
      }

      if (element.webkitMatchesSelector) {
        _matcher = element.webkitMatchesSelector;
        return _matcher;
      }

      if (element.mozMatchesSelector) {
        _matcher = element.mozMatchesSelector;
        return _matcher;
      }

      if (element.msMatchesSelector) {
        _matcher = element.msMatchesSelector;
        return _matcher;
      }

      if (element.oMatchesSelector) {
        _matcher = element.oMatchesSelector;
        return _matcher;
      } // if it doesn't match a native browser method
      // fall back to the gator function


      _matcher = Gator.matchesSelector;
      return _matcher;
    }
    /**
         * determines if the specified element matches a given selector
         *
         * @param {Node} element - the element to compare against the selector
         * @param {string} selector
         * @param {Node} boundElement - the element the listener was attached to
         * @returns {void|Node}
         */


    function _matchesSelector(element, selector, boundElement) {
      // no selector means this event was bound directly to this element
      if (selector == "_root") {
        return boundElement;
      } // if we have moved up to the element you bound the event to
      // then we have come too far


      if (element === boundElement) {
        return;
      } // if this is a match then we are done!


      if (_getMatcher(element).call(element, selector)) {
        return element;
      } // if this element did not match but has a parent we should try
      // going up the tree to see if any of the parent elements match
      // for example if you are looking for a click on an <a> tag but there
      // is a <span> inside of the a tag that it is the target,
      // it should still work


      if (element.parentNode) {
        _level++;
        return _matchesSelector(element.parentNode, selector, boundElement);
      }
    }

    function _addHandler(gator, event, selector, callback) {
      if (!_handlers[gator.id]) {
        _handlers[gator.id] = {};
      }

      if (!_handlers[gator.id][event]) {
        _handlers[gator.id][event] = {};
      }

      if (!_handlers[gator.id][event][selector]) {
        _handlers[gator.id][event][selector] = [];
      }

      _handlers[gator.id][event][selector].push(callback);
    }

    function _removeHandler(gator, event, selector, callback) {
      // if there are no events tied to this element at all
      // then don't do anything
      if (!_handlers[gator.id]) {
        return;
      } // if there is no event type specified then remove all events
      // example: Gator(element).off()


      if (!event) {
        for (var type in _handlers[gator.id]) {
          if (_handlers[gator.id].hasOwnProperty(type)) {
            _handlers[gator.id][type] = {};
          }
        }

        return;
      } // if no callback or selector is specified remove all events of this type
      // example: Gator(element).off('click')


      if (!callback && !selector) {
        _handlers[gator.id][event] = {};
        return;
      } // if a selector is specified but no callback remove all events
      // for this selector
      // example: Gator(element).off('click', '.sub-element')


      if (!callback) {
        delete _handlers[gator.id][event][selector];
        return;
      } // if we have specified an event type, selector, and callback then we
      // need to make sure there are callbacks tied to this selector to
      // begin with.  if there aren't then we can stop here


      if (!_handlers[gator.id][event][selector]) {
        return;
      } // if there are then loop through all the callbacks and if we find
      // one that matches remove it from the array


      for (var i = 0; i < _handlers[gator.id][event][selector].length; i++) {
        if (_handlers[gator.id][event][selector][i] === callback) {
          _handlers[gator.id][event][selector].splice(i, 1);

          break;
        }
      }
    }

    function _handleEvent(id, e, type) {
      if (!_handlers[id][type]) {
        return;
      }

      var target = e.target || e.srcElement,
          selector,
          match,
          matches = {},
          i = 0,
          j = 0; // find all events that match

      _level = 0;

      for (selector in _handlers[id][type]) {
        if (_handlers[id][type].hasOwnProperty(selector)) {
          match = _matchesSelector(target, selector, _gatorInstances[id].element);

          if (match && Gator.matchesEvent(type, _gatorInstances[id].element, match, selector == "_root", e)) {
            _level++;
            _handlers[id][type][selector].match = match;
            matches[_level] = _handlers[id][type][selector];
          }
        }
      } // stopPropagation() fails to set cancelBubble to true in Webkit
      // @see http://code.google.com/p/chromium/issues/detail?id=162270


      e.stopPropagation = function () {
        e.cancelBubble = true;
      };

      for (i = 0; i <= _level; i++) {
        if (matches[i]) {
          for (j = 0; j < matches[i].length; j++) {
            if (matches[i][j].call(matches[i].match, e) === false) {
              Gator.cancel(e);
              return;
            }

            if (e.cancelBubble) {
              return;
            }
          }
        }
      }
    }
    /**
         * binds the specified events to the element
         *
         * @param {string|Array} events
         * @param {string} selector
         * @param {Function} callback
         * @param {boolean=} remove
         * @returns {Object}
         */


    function _bind(events, selector, callback, remove) {
      // fail silently if you pass null or undefined as an alement
      // in the Gator constructor
      if (!this.element) {
        return;
      }

      if (!(events instanceof Array)) {
        events = [events];
      }

      if (!callback && typeof selector == "function") {
        callback = selector;
        selector = "_root";
      }

      var id = this.id,
          i;

      function _getGlobalCallback(type) {
        return function (e) {
          _handleEvent(id, e, type);
        };
      }

      for (i = 0; i < events.length; i++) {
        if (remove) {
          _removeHandler(this, events[i], selector, callback);

          continue;
        }

        if (!_handlers[id] || !_handlers[id][events[i]]) {
          Gator.addEvent(this, events[i], _getGlobalCallback(events[i]));
        }

        _addHandler(this, events[i], selector, callback);
      }

      return this;
    }
    /**
         * Gator object constructor
         *
         * @param {Node} element
         */


    function Gator(element, id) {
      // called as function
      if (!(this instanceof Gator)) {
        // only keep one Gator instance per node to make sure that
        // we don't create a ton of new objects if you want to delegate
        // multiple events from the same node
        //
        // for example: Gator(document).on(...
        for (var key in _gatorInstances) {
          if (_gatorInstances[key].element === element) {
            return _gatorInstances[key];
          }
        }

        _id++;
        _gatorInstances[_id] = new Gator(element, _id);
        return _gatorInstances[_id];
      }

      this.element = element;
      this.id = id;
    }
    /**
         * adds an event
         *
         * @param {string|Array} events
         * @param {string} selector
         * @param {Function} callback
         * @returns {Object}
         */


    Gator.prototype.on = function (events, selector, callback) {
      return _bind.call(this, events, selector, callback);
    };
    /**
         * removes an event
         *
         * @param {string|Array} events
         * @param {string} selector
         * @param {Function} callback
         * @returns {Object}
         */


    Gator.prototype.off = function (events, selector, callback) {
      return _bind.call(this, events, selector, callback, true);
    };

    Gator.matchesSelector = function () {};

    Gator.cancel = _cancel;
    Gator.addEvent = _addEvent;

    Gator.matchesEvent = function () {
      return true;
    };

    if ('object' !== "undefined" && module.exports) {
      module.exports = Gator;
    }

    if (typeof window !== "undefined" && window.exports) {
      window.Gator = Gator;
    }
  });

  var OfferDetails;

  var offerDetails = OfferDetails =
  /*#__PURE__*/
  function () {
    function OfferDetails() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, OfferDetails);

      this.options = options;
      this.el = document.createElement('div');
      this.el.className = 'sgn-offer-details';
      this.el.setAttribute('tabindex', -1);
      this.el.appendChild(this.options.contentEl);
      this.resizeListener = this.resize.bind(this);
      this.position();
      return;
    }

    _createClass(OfferDetails, [{
      key: "appendTo",
      value: function appendTo(el) {
        el.appendChild(this.el);
        this.el.offsetWidth;
        this.show();
        return this;
      }
    }, {
      key: "show",
      value: function show() {
        this.el.className += ' in';
        window.addEventListener('resize', this.resizeListener, false);
        return this;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        window.removeEventListener('resize', this.resizeListener);
        this.el.parentNode.removeChild(this.el);
      }
    }, {
      key: "position",
      value: function position() {
        var left, rect, top, width;
        rect = this.options.anchorEl.getBoundingClientRect();
        top = window.pageYOffset + rect.top + this.options.anchorEl.offsetHeight;
        left = window.pageXOffset + rect.left;
        width = this.options.anchorEl.offsetWidth;
        this.el.style.top = top + 'px';
        this.el.style.left = left + 'px';
        this.el.style.width = width + 'px';
      }
    }, {
      key: "resize",
      value: function resize() {
        this.position();
      }
    }]);

    return OfferDetails;
  }();

  var Gator, MicroEvent$b, Mustache$2, Popover, keyCodes$2, template;
  MicroEvent$b = microevent;
  Gator = gator;
  Mustache$2 = mustache;
  keyCodes$2 = keyCodes;
  template = "<div class=\"sgn-popover__background\" data-close></div>\n<div class=\"sgn-popover__menu\">\n    {{#header}}\n        <div class=\"sgn-popover__header\">{{header}}</div>\n    {{/header}}\n    <div class=\"sgn-popover__content\">\n        <ul>\n            {{#singleChoiceItems}}\n                <li data-index=\"{{index}}\">\n                    <p class=\"sgn-popover-item__title\">{{item.title}}</p>\n                    {{#item.subtitle}}\n                        <p class=\"sgn-popover-item__subtitle\">{{item.subtitle}}</p>\n                    {{/item.subtitle}}\n                </li>\n            {{/singleChoiceItems}}\n        </ul>\n    </div>\n</div>";

  Popover =
  /*#__PURE__*/
  function () {
    function Popover() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Popover);

      this.options = options;
      this.el = document.createElement('div');
      this.backgroundEl = document.createElement('div');
      this.resizeListener = this.resize.bind(this);
      this.scrollListener = this.scroll.bind(this);
      return;
    }

    _createClass(Popover, [{
      key: "render",
      value: function render() {
        var header, ref, ref1, trigger, view, width;
        width = (ref = this.options.width) != null ? ref : 100;
        header = this.options.header;

        if (this.options.template != null) {
          template = this.options.template;
        }

        trigger = this.trigger.bind(this);
        view = {
          header: header,
          singleChoiceItems: (ref1 = this.options.singleChoiceItems) != null ? ref1.map(function (item, i) {
            return {
              item: item,
              index: i
            };
          }) : void 0
        };
        this.el.className = 'sgn-popover';
        this.el.setAttribute('tabindex', -1);
        this.el.innerHTML = Mustache$2.render(template, view);
        this.position();
        this.addEventListeners();
        return this;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        Gator(this.el).off();
        window.removeEventListener('resize', this.resizeListener);
        window.removeEventListener('scroll', this.scrollListener);

        if (this.el.parentNode != null) {
          this.el.parentNode.removeChild(this.el);
          this.trigger('destroyed');
        }
      }
    }, {
      key: "position",
      value: function position() {
        var boundingRect, height, left, menuEl, parentHeight, parentWidth, top, width;
        top = this.options.y;
        left = this.options.x;
        menuEl = this.el.querySelector('.sgn-popover__menu');
        width = menuEl.offsetWidth;
        height = menuEl.offsetHeight;
        parentWidth = this.el.parentNode.offsetWidth;
        parentHeight = this.el.parentNode.offsetHeight;
        boundingRect = this.el.parentNode.getBoundingClientRect();
        top -= boundingRect.top;
        left -= boundingRect.left;
        top -= window.pageYOffset;
        left -= window.pageXOffset;

        if (top + height > parentHeight) {
          menuEl.style.top = parentHeight - height + 'px';
        } else {
          menuEl.style.top = top + 'px';
        }

        if (left + width > parentWidth) {
          menuEl.style.left = parentWidth - width + 'px';
        } else {
          menuEl.style.left = left + 'px';
        }
      }
    }, {
      key: "addEventListeners",
      value: function addEventListeners() {
        var _this = this;

        var trigger;
        trigger = this.trigger.bind(this);
        this.el.addEventListener('keyup', this.keyUp.bind(this));
        Gator(this.el).on('click', '[data-index]', function (e) {
          e.preventDefault();
          e.stopPropagation();
          trigger('selected', {
            index: +this.getAttribute('data-index')
          });
        });
        Gator(this.el).on('click', '[data-close]', function (e) {
          e.preventDefault();
          e.stopPropagation();

          _this.destroy();
        });
        Gator(this.el).on('click', '.sgn-popover__menu', function (e) {
          e.stopPropagation();
        });
        window.addEventListener('resize', this.resizeListener, false);
        window.addEventListener('scroll', this.scrollListener, false);
      }
    }, {
      key: "keyUp",
      value: function keyUp(e) {
        if (e.keyCode === keyCodes$2.ESC) {
          this.destroy();
        }
      }
    }, {
      key: "resize",
      value: function resize() {
        this.destroy();
      }
    }, {
      key: "scroll",
      value: function scroll() {
        this.destroy();
      }
    }]);

    return Popover;
  }();

  MicroEvent$b.mixin(Popover);
  var popover = Popover;

  var Popover$1;
  Popover$1 = popover;

  var singleChoicePopover = function singleChoicePopover(ctx, callback) {
    var items, popover$$1;
    items = ctx.items;
    popover$$1 = null;

    if (items.length === 1) {
      callback(items[0]);
    } else if (items.length > 1) {
      popover$$1 = new Popover$1({
        header: ctx.header,
        x: ctx.x,
        y: ctx.y,
        singleChoiceItems: items
      });
      popover$$1.bind('selected', function (e) {
        callback(items[e.index]);
        popover$$1.destroy();
      });
      popover$$1.bind('destroyed', function () {
        ctx.el.focus();
      });
      ctx.el.appendChild(popover$$1.el);
      popover$$1.render().el.focus();
    }

    return {
      destroy: function destroy() {
        if (popover$$1 != null) {
          popover$$1.destroy();
        }
      }
    };
  };

  var Gator$1;
  Gator$1 = gator;
  var coreUi = {
    OfferDetails: offerDetails,
    Popover: popover,
    singleChoicePopover: singleChoicePopover,
    on: function on(el, events, selector, callback) {
      return Gator$1(el).on(events, selector, callback);
    },
    off: function off(el, events, selector, callback) {
      return Gator$1(el).off(events, selector, callback);
    }
  };
  var coreUi_1 = coreUi.OfferDetails;
  var coreUi_2 = coreUi.Popover;
  var coreUi_3 = coreUi.singleChoicePopover;
  var coreUi_4 = coreUi.on;
  var coreUi_5 = coreUi.off;

  var SGN$h, appKey, config$2, isBrowser, scriptEl, session$2, trackId;
  isBrowser = util_1.isBrowser;
  SGN$h = core; // Expose storage backends.

  SGN$h.storage = {
    local: clientLocal,
    session: clientSession,
    cookie: clientCookie
  }; // Expose the different kits.

  SGN$h.AssetsKit = assets;
  SGN$h.EventsKit = events;
  SGN$h.GraphKit = graph;
  SGN$h.CoreKit = core$1;
  SGN$h.PagedPublicationKit = pagedPublication;
  SGN$h.IncitoPublicationKit = incitoPublication;
  SGN$h.CoreUIKit = coreUi; // Set the core session from the cookie store if possible.

  session$2 = SGN$h.storage.cookie.get('session');

  if (_typeof(session$2) === 'object') {
    SGN$h.config.set({
      coreSessionToken: session$2.token,
      coreSessionClientId: session$2.client_id
    });
  }

  SGN$h.client = function () {
    var id;
    id = SGN$h.storage.local.get('client-id');

    if (id != null ? id.data : void 0) {
      id = id.data;
    }

    if (id == null) {
      id = SGN$h.util.uuid();
      SGN$h.storage.local.set('client-id', id);
    }

    return {
      id: id
    };
  }(); // Listen for changes in the config.


  SGN$h.config.bind('change', function (changedAttributes) {
    var eventTracker;
    eventTracker = changedAttributes.eventTracker;

    if (eventTracker != null) {
      eventTracker.trackClientSessionOpened();
    }
  });

  if (isBrowser()) {
    // Autoconfigure the SDK.
    scriptEl = document.getElementById('sgn-sdk');

    if (scriptEl != null) {
      appKey = scriptEl.getAttribute('data-app-key');
      trackId = scriptEl.getAttribute('data-track-id');
      config$2 = {};

      if (appKey != null) {
        config$2.appKey = appKey;
      }

      if (trackId != null) {
        config$2.eventTracker = new SGN$h.EventsKit.Tracker({
          trackId: trackId
        });
      }

      SGN$h.config.set(config$2);
    }
  }

  var coffeescript = SGN$h;

  return coffeescript;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2duLXNkay5qcyIsInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwiLi4vbGliL2NvZmZlZXNjcmlwdC91dGlsLmNvZmZlZSIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL21pY3JvZXZlbnQvbWljcm9ldmVudC5qcyIsIi4uL2xpYi9jb2ZmZWVzY3JpcHQvY29uZmlnLmNvZmZlZSIsIi4uL25vZGVfbW9kdWxlcy9tdXN0YWNoZS9tdXN0YWNoZS5qcyIsIi4uL2xpYi9jb2ZmZWVzY3JpcHQvdHJhbnNsYXRpb25zLmNvZmZlZSIsIi4uL2xpYi9jb2ZmZWVzY3JpcHQvY29yZS5jb2ZmZWUiLCIuLi9saWIvY29mZmVlc2NyaXB0L3Nnbi5jb2ZmZWUiLCIuLi9saWIvY29mZmVlc2NyaXB0L3N0b3JhZ2UvY2xpZW50LWxvY2FsLmNvZmZlZSIsIi4uL2xpYi9jb2ZmZWVzY3JpcHQvc3RvcmFnZS9jbGllbnQtc2Vzc2lvbi5jb2ZmZWUiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCIuLi9saWIvY29mZmVlc2NyaXB0L3N0b3JhZ2UvY2xpZW50LWNvb2tpZS5jb2ZmZWUiLCIuLi9saWIvY29mZmVlc2NyaXB0L2tpdHMvYXNzZXRzL2ZpbGUtdXBsb2FkLmNvZmZlZSIsIi4uL2xpYi9jb2ZmZWVzY3JpcHQva2l0cy9hc3NldHMvaW5kZXguY29mZmVlIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jcm9zcy1mZXRjaC9kaXN0L2Jyb3dzZXItcG9ueWZpbGwuanMiLCIuLi9ub2RlX21vZHVsZXMvY3J5cHQvY3J5cHQuanMiLCIuLi9ub2RlX21vZHVsZXMvY2hhcmVuYy9jaGFyZW5jLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZDUvbWQ1LmpzIiwiLi4vbGliL2NvZmZlZXNjcmlwdC9raXRzL2V2ZW50cy90cmFja2VyLmNvZmZlZSIsIi4uL2xpYi9jb2ZmZWVzY3JpcHQva2l0cy9ldmVudHMvcHVsc2UuY29mZmVlIiwiLi4vbGliL2NvZmZlZXNjcmlwdC9raXRzL2V2ZW50cy9pbmRleC5jb2ZmZWUiLCIuLi9saWIvY29mZmVlc2NyaXB0L2tpdHMvZ3JhcGgvcmVxdWVzdC5jb2ZmZWUiLCIuLi9saWIvY29mZmVlc2NyaXB0L2tpdHMvZ3JhcGgvaW5kZXguY29mZmVlIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwiLi4vbGliL2NvZmZlZXNjcmlwdC9raXRzL2NvcmUvcmVxdWVzdC5jb2ZmZWUiLCIuLi9ub2RlX21vZHVsZXMvY29udmVydC1oZXgvY29udmVydC1oZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY29udmVydC1zdHJpbmcvY29udmVydC1zdHJpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvc2hhMjU2L2xpYi9zaGEyNTYuanMiLCIuLi9saWIvY29mZmVlc2NyaXB0L2tpdHMvY29yZS9zZXNzaW9uLmNvZmZlZSIsIi4uL2xpYi9jb2ZmZWVzY3JpcHQva2l0cy9jb3JlL2luZGV4LmNvZmZlZSIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCIuLi9ub2RlX21vZHVsZXMvdmVyc28tYnJvd3Nlci9kaXN0L3ZlcnNvLmpzIiwiLi4vbGliL2NvZmZlZXNjcmlwdC9raXRzL3BhZ2VkLXB1YmxpY2F0aW9uL3BhZ2Utc3ByZWFkLmNvZmZlZSIsIi4uL2xpYi9jb2ZmZWVzY3JpcHQva2l0cy9wYWdlZC1wdWJsaWNhdGlvbi9wYWdlLXNwcmVhZHMuY29mZmVlIiwiLi4vbGliL2NvZmZlZXNjcmlwdC9raXRzL3BhZ2VkLXB1YmxpY2F0aW9uL2NvcmUuY29mZmVlIiwiLi4vbGliL2NvZmZlZXNjcmlwdC9raXRzL3BhZ2VkLXB1YmxpY2F0aW9uL2hvdHNwb3RzLmNvZmZlZSIsIi4uL2xpYi9jb2ZmZWVzY3JpcHQva2V5LWNvZGVzLmNvZmZlZSIsIi4uL2xpYi9jb2ZmZWVzY3JpcHQva2l0cy9wYWdlZC1wdWJsaWNhdGlvbi9jb250cm9scy5jb2ZmZWUiLCIuLi9saWIvY29mZmVlc2NyaXB0L2tpdHMvcGFnZWQtcHVibGljYXRpb24vZXZlbnQtdHJhY2tpbmcuY29mZmVlIiwiLi4vbGliL2NvZmZlZXNjcmlwdC9raXRzL3BhZ2VkLXB1YmxpY2F0aW9uL3ZpZXdlci5jb2ZmZWUiLCIuLi9saWIvY29mZmVlc2NyaXB0L2tpdHMvcGFnZWQtcHVibGljYXRpb24vYm9vdHN0cmFwcGVyLmNvZmZlZSIsIi4uL2xpYi9jb2ZmZWVzY3JpcHQva2l0cy9wYWdlZC1wdWJsaWNhdGlvbi9pbmRleC5jb2ZmZWUiLCIuLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2luY2l0by1icm93c2VyL2Rpc3QvaW5jaXRvLmpzIiwiLi4vbGliL2NvZmZlZXNjcmlwdC9raXRzL2luY2l0by1wdWJsaWNhdGlvbi92aWV3ZXIuY29mZmVlIiwiLi4vbGliL2NvZmZlZXNjcmlwdC9raXRzL2luY2l0by1wdWJsaWNhdGlvbi9jb250cm9scy5jb2ZmZWUiLCIuLi9saWIvY29mZmVlc2NyaXB0L2tpdHMvaW5jaXRvLXB1YmxpY2F0aW9uL2Jvb3RzdHJhcHBlci5jb2ZmZWUiLCIuLi9saWIvY29mZmVlc2NyaXB0L2tpdHMvaW5jaXRvLXB1YmxpY2F0aW9uL2luZGV4LmNvZmZlZSIsIi4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIi4uL3ZlbmRvci9nYXRvci5qcyIsIi4uL2xpYi9jb2ZmZWVzY3JpcHQva2l0cy9jb3JlLXVpL29mZmVyLWRldGFpbHMuY29mZmVlIiwiLi4vbGliL2NvZmZlZXNjcmlwdC9raXRzL2NvcmUtdWkvcG9wb3Zlci5jb2ZmZWUiLCIuLi9saWIvY29mZmVlc2NyaXB0L2tpdHMvY29yZS11aS9zaW5nbGUtY2hvaWNlLXBvcG92ZXIuY29mZmVlIiwiLi4vbGliL2NvZmZlZXNjcmlwdC9raXRzL2NvcmUtdWkvaW5kZXguY29mZmVlIiwiLi4vbGliL2NvZmZlZXNjcmlwdC9pbmRleC5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMCcgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTggRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IEZ1bmN0aW9uW1RPX1NUUklOR107XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKVxuICAgICAgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlXG4gICAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAgIC8vIHdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBtYXkgdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvLFxuICAgICAgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnJlcXVpcmUoJy4vX2V4cG9ydCcpKHtcbiAgdGFyZ2V0OiAnUmVnRXhwJyxcbiAgcHJvdG86IHRydWUsXG4gIGZvcmNlZDogcmVnZXhwRXhlYyAhPT0gLy4vLmV4ZWNcbn0sIHtcbiAgZXhlYzogcmVnZXhwRXhlY1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgfVxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgZm5zID0gZXhlYyhcbiAgICAgIGRlZmluZWQsXG4gICAgICBTWU1CT0wsXG4gICAgICAnJ1tLRVldLFxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCZgJ118XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgICB2YXIgY2FwdHVyZTtcbiAgICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gY2g7XG4gICAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIGNoO1xuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgcmV0dXJuIGNoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgICB9KTtcbiAgfVxufSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCJ1dGlsID1cbiAgICBpc0Jyb3dzZXI6IC0+XG4gICAgICAgIHR5cGVvZiB3aW5kb3cgaXMgJ29iamVjdCcgYW5kIHR5cGVvZiBkb2N1bWVudCBpcyAnb2JqZWN0J1xuXG4gICAgaXNOb2RlOiAtPlxuICAgICAgICB0eXBlb2YgcHJvY2VzcyBpcyAnb2JqZWN0J1xuXG4gICAgZXJyb3I6IChlcnIsIG9wdGlvbnMpIC0+XG4gICAgICAgIGVyci5tZXNzYWdlID0gZXJyLm1lc3NhZ2Ugb3IgbnVsbFxuXG4gICAgICAgIGlmIHR5cGVvZiBvcHRpb25zIGlzICdzdHJpbmcnXG4gICAgICAgICAgICBlcnIubWVzc2FnZSA9IG9wdGlvbnNcbiAgICAgICAgZWxzZSBpZiB0eXBlb2Ygb3B0aW9ucyBpcyAnb2JqZWN0JyBhbmQgb3B0aW9ucz9cbiAgICAgICAgICAgIGZvciBrZXksIHZhbHVlIG9mIG9wdGlvbnNcbiAgICAgICAgICAgICAgICBlcnJba2V5XSA9IHZhbHVlXG5cbiAgICAgICAgICAgIGVyci5tZXNzYWdlID0gb3B0aW9ucy5tZXNzYWdlIGlmIG9wdGlvbnMubWVzc2FnZT9cbiAgICAgICAgICAgIGVyci5jb2RlID0gb3B0aW9ucy5jb2RlIG9yIG9wdGlvbnMubmFtZSBpZiBvcHRpb25zLmNvZGU/IG9yIG9wdGlvbnMubWVzc2FnZT9cbiAgICAgICAgICAgIGVyci5zdGFjayA9IG9wdGlvbnMuc3RhY2sgaWYgb3B0aW9ucy5zdGFjaz9cblxuICAgICAgICBlcnIubmFtZSA9IG9wdGlvbnMgYW5kIG9wdGlvbnMubmFtZSBvciBlcnIubmFtZSBvciBlcnIuY29kZSBvciAnRXJyb3InXG4gICAgICAgIGVyci50aW1lID0gbmV3IERhdGUoKVxuXG4gICAgICAgIGVyclxuXG4gICAgdXVpZDogLT5cbiAgICAgICAgJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSAvW3h5XS9nLCAoYykgLT5cbiAgICAgICAgICAgIHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwXG4gICAgICAgICAgICB2ID0gaWYgYyBpcyAneCcgdGhlbiByIGVsc2UgKHIgJiAweDN8MHg4KVxuXG4gICAgICAgICAgICB2LnRvU3RyaW5nIDE2XG5cbiAgICBnZXRRdWVyeVBhcmFtOiAoZmllbGQsIHVybCkgLT5cbiAgICAgICAgaHJlZiA9IGlmIHVybCB0aGVuIHVybCBlbHNlIHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgICAgIHJlZyA9IG5ldyBSZWdFeHAgJ1s/Jl0nICsgZmllbGQgKyAnPShbXiYjXSopJywgJ2knXG4gICAgICAgIHN0cmluZyA9IHJlZy5leGVjIGhyZWZcblxuICAgICAgICBpZiBzdHJpbmcgdGhlbiBzdHJpbmdbMV0gZWxzZSB1bmRlZmluZWRcblxuICAgIGdldFJhbmRvbU51bWJlckJldHdlZW46IChmcm9tLCB0bykgLT5cbiAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdG8pICsgZnJvbVxuXG4gICAgZ2V0T1M6IC0+XG4gICAgICAgIG5hbWUgPSBudWxsXG4gICAgICAgIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnRcblxuICAgICAgICBpZiB1YS5pbmRleE9mKCdXaW5kb3dzJykgPiAtMVxuICAgICAgICAgICAgbmFtZSA9ICdXaW5kb3dzJ1xuICAgICAgICBlbHNlIGlmIHVhLmluZGV4T2YoJ01hYycpID4gLTFcbiAgICAgICAgICAgIG5hbWUgPSAnbWFjT1MnXG4gICAgICAgIGVsc2UgaWYgdWEuaW5kZXhPZignWDExJykgPiAtMVxuICAgICAgICAgICAgbmFtZSA9ICd1bml4J1xuICAgICAgICBlbHNlIGlmIHVhLmluZGV4T2YoJ0xpbnV4JykgPiAtMVxuICAgICAgICAgICAgbmFtZSA9ICdMaW51eCdcbiAgICAgICAgZWxzZSBpZiB1YS5pbmRleE9mKCdpT1MnKSA+IC0xXG4gICAgICAgICAgICBuYW1lID0gJ2lPUydcbiAgICAgICAgZWxzZSBpZiB1YS5pbmRleE9mKCdBbmRyb2lkJykgPiAtMVxuICAgICAgICAgICAgbmFtZSA9ICdBbmRyb2lkJ1xuXG4gICAgICAgIG5hbWVcbiAgICBcbiAgICBnZXREZXZpY2VDYXRlZ29yeTogLT5cbiAgICAgICAgZGV2aWNlQ2F0ZWdvcnkgPSAnZGVza3RvcCdcblxuICAgICAgICBpZiBuYXZpZ2F0b3IucGxhdGZvcm0gaXMgJ2lQb2QnIG9yIG5hdmlnYXRvci5wbGF0Zm9ybSBpcyAnaVBob25lJ1xuICAgICAgICAgICAgZGV2aWNlQ2F0ZWdvcnkgPSAnbW9iaWxlJ1xuICAgICAgICBlbHNlIGlmIG5hdmlnYXRvci5wbGF0Zm9ybSBpcyAnaVBhZCdcbiAgICAgICAgICAgIGRldmljZUNhdGVnb3J5ID0gJ3RhYmxldCdcbiAgICAgICAgZWxzZSBpZiBuYXZpZ2F0b3IucGxhdGZvcm0gaXMgJ0FuZHJvaWQnIG9yIC9hbmRyb2lkL2dpLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgICAgICAgICAgIGlmIC90YWJsZXQvZ2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KVxuICAgICAgICAgICAgICAgIGRldmljZUNhdGVnb3J5ID0gJ3RhYmxldCdcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBkZXZpY2VDYXRlZ29yeSA9ICdtb2JpbGUnXG5cbiAgICAgICAgZGV2aWNlQ2F0ZWdvcnlcbiAgICBcbiAgICBnZXRQb2ludGVyOiAtPlxuICAgICAgICBwb2ludGVyID0gJ2ZpbmUnXG5cbiAgICAgICAgcG9pbnRlciA9ICdjb2Fyc2UnIGlmIG1hdGNoTWVkaWEoJyhwb2ludGVyOmNvYXJzZSknKS5tYXRjaGVzXG5cbiAgICAgICAgcG9pbnRlclxuICAgIFxuICAgIGdldE9yaWVudGF0aW9uOiAod2lkdGgsIGhlaWdodCkgLT5cbiAgICAgICAgaWYgd2lkdGggaXMgaGVpZ2h0XG4gICAgICAgICAgICAncXVhZHJhdGljJ1xuICAgICAgICBlbHNlIGlmIHdpZHRoID4gaGVpZ2h0XG4gICAgICAgICAgICAnaG9yaXpvbnRhbCdcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgJ3ZlcnRpY2FsJ1xuXG4gICAgZ2V0U2NyZWVuRGltZW5zaW9uczogLT5cbiAgICAgICAgZGVuc2l0eSA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID8gMVxuICAgICAgICBsb2dpY2FsID1cbiAgICAgICAgICAgIHdpZHRoOiB3aW5kb3cuc2NyZWVuLndpZHRoXG4gICAgICAgICAgICBoZWlnaHQ6IHdpbmRvdy5zY3JlZW4uaGVpZ2h0XG4gICAgICAgIHBoeXNpY2FsID1cbiAgICAgICAgICAgIHdpZHRoOiBNYXRoLnJvdW5kIGxvZ2ljYWwud2lkdGggKiBkZW5zaXR5XG4gICAgICAgICAgICBoZWlnaHQ6IE1hdGgucm91bmQgbG9naWNhbC5oZWlnaHQgKiBkZW5zaXR5XG5cbiAgICAgICAgZGVuc2l0eTogZGVuc2l0eVxuICAgICAgICBsb2dpY2FsOiBsb2dpY2FsXG4gICAgICAgIHBoeXNpY2FsOiBwaHlzaWNhbFxuXG4gICAgZ2V0VXRjT2Zmc2V0U2Vjb25kczogLT5cbiAgICAgICAgbm93ID0gbmV3IERhdGUoKVxuICAgICAgICBqYW4xID0gbmV3IERhdGUgbm93LmdldEZ1bGxZZWFyKCksIDAsIDEsIDAsIDAsIDAsIDBcbiAgICAgICAgdG1wID0gamFuMS50b0dNVFN0cmluZygpXG4gICAgICAgIGphbjIgPSBuZXcgRGF0ZSB0bXAuc3Vic3RyaW5nKDAsIHRtcC5sYXN0SW5kZXhPZignICcpIC0gMSlcbiAgICAgICAgc3RkVGltZU9mZnNldCA9IChqYW4xIC0gamFuMikgLyAxMDAwXG5cbiAgICAgICAgc3RkVGltZU9mZnNldFxuXG4gICAgZ2V0VXRjRHN0T2Zmc2V0U2Vjb25kczogLT5cbiAgICAgICAgbmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpICogNjAgKiAtMVxuXG4gICAgZ2V0Q29sb3JCcmlnaHRuZXNzOiAoY29sb3IpIC0+XG4gICAgICAgIGNvbG9yID0gY29sb3IucmVwbGFjZSAnIycsICcnXG4gICAgICAgIGhleCA9IHBhcnNlSW50IChoZXggKyAnJykucmVwbGFjZSgvW15hLWYwLTldL2dpLCAnJyksIDE2XG4gICAgICAgIHJnYiA9IFtdXG4gICAgICAgIHN1bSA9IDBcbiAgICAgICAgeCA9IDBcblxuICAgICAgICB3aGlsZSB4IDwgM1xuICAgICAgICAgICAgcyA9IHBhcnNlSW50KGNvbG9yLnN1YnN0cmluZygyICogeCwgMiksIDE2KVxuICAgICAgICAgICAgcmdiW3hdID0gc1xuXG4gICAgICAgICAgICBzdW0gKz0gcyBpZiBzID4gMFxuXG4gICAgICAgICAgICArK3hcblxuICAgICAgICBpZiBzdW0gPD0gMzgxIHRoZW4gJ2RhcmsnIGVsc2UgJ2xpZ2h0J1xuXG4gICAgYnRvYTogKHN0cikgLT5cbiAgICAgICAgaWYgdXRpbC5pc0Jyb3dzZXIoKVxuICAgICAgICAgICAgYnRvYSBzdHJcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYnVmZmVyID0gbnVsbFxuXG4gICAgICAgICAgICBpZiBzdHIgaW5zdGFuY2VvZiBCdWZmZXJcbiAgICAgICAgICAgICAgICBidWZmZXIgPSBzdHJcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBidWZmZXIgPSBuZXcgQnVmZmVyIHN0ci50b1N0cmluZygpLCAnYmluYXJ5J1xuXG4gICAgICAgICAgICBidWZmZXIudG9TdHJpbmcgJ2Jhc2U2NCdcblxuICAgIGNodW5rOiAoYXJyLCBzaXplKSAtPlxuICAgICAgICByZXN1bHRzID0gW11cblxuICAgICAgICB3aGlsZSBhcnIubGVuZ3RoXG4gICAgICAgICAgICByZXN1bHRzLnB1c2ggYXJyLnNwbGljZSgwLCBzaXplKVxuXG4gICAgICAgIHJlc3VsdHNcblxuICAgIHRocm90dGxlOiAoZm4sIHRocmVzaG9sZCA9IDI1MCwgc2NvcGUpIC0+XG4gICAgICAgIGxhc3QgPSB1bmRlZmluZWRcbiAgICAgICAgZGVmZXJUaW1lciA9IHVuZGVmaW5lZFxuXG4gICAgICAgIC0+XG4gICAgICAgICAgICBjb250ZXh0ID0gc2NvcGUgb3IgQFxuICAgICAgICAgICAgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHNcblxuICAgICAgICAgICAgaWYgbGFzdCBhbmQgbm93IDwgbGFzdCArIHRocmVzaG9sZFxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCBkZWZlclRpbWVyXG5cbiAgICAgICAgICAgICAgICBkZWZlclRpbWVyID0gc2V0VGltZW91dCAtPlxuICAgICAgICAgICAgICAgICAgICBsYXN0ID0gbm93XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBmbi5hcHBseSBjb250ZXh0LCBhcmdzXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICwgdGhyZXNob2xkXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgbGFzdCA9IG5vd1xuICAgICAgICAgICAgICAgIGZuLmFwcGx5IGNvbnRleHQsIGFyZ3NcblxuICAgICAgICAgICAgcmV0dXJuXG5cbiAgICBsb2FkSW1hZ2U6IChzcmMsIGNhbGxiYWNrKSAtPlxuICAgICAgICBpbWcgPSBuZXcgSW1hZ2UoKVxuXG4gICAgICAgIGltZy5vbmxvYWQgPSAtPiBjYWxsYmFjayBudWxsLCBpbWcud2lkdGgsIGltZy5oZWlnaHRcbiAgICAgICAgaW1nLm9uZXJyb3IgPSAtPiBjYWxsYmFjayBuZXcgRXJyb3IoKVxuICAgICAgICBpbWcuc3JjID0gc3JjXG5cbiAgICAgICAgaW1nXG5cbiAgICBkaXN0YW5jZTogKGxhdDEsIGxuZzEsIGxhdDIsIGxuZzIpIC0+XG4gICAgICAgIHJhZGxhdDEgPSBNYXRoLlBJICogbGF0MSAvIDE4MFxuICAgICAgICByYWRsYXQyID0gTWF0aC5QSSAqIGxhdDIgLyAxODBcbiAgICAgICAgdGhldGEgPSBsbmcxIC0gbG5nMlxuICAgICAgICByYWR0aGV0YSA9IE1hdGguUEkgKiB0aGV0YSAvIDE4MFxuICAgICAgICBkaXN0ID0gTWF0aC5zaW4ocmFkbGF0MSkgKiBNYXRoLnNpbihyYWRsYXQyKSArIE1hdGguY29zKHJhZGxhdDEpICogTWF0aC5jb3MocmFkbGF0MikgKiBNYXRoLmNvcyhyYWR0aGV0YSlcbiAgICAgICAgZGlzdCA9IE1hdGguYWNvcyhkaXN0KVxuICAgICAgICBkaXN0ID0gZGlzdCAqIDE4MCAvIE1hdGguUElcbiAgICAgICAgZGlzdCA9IGRpc3QgKiA2MCAqIDEuMTUxNVxuICAgICAgICBkaXN0ID0gZGlzdCAqIDEuNjA5MzQ0ICogMTAwMFxuXG4gICAgICAgIGRpc3RcblxuICAgIGFzeW5jOlxuICAgICAgICBwYXJhbGxlbDogKGFzeW5jQ2FsbHMsIHNoYXJlZENhbGxiYWNrKSAtPlxuICAgICAgICAgICAgY291bnRlciA9IGFzeW5jQ2FsbHMubGVuZ3RoXG4gICAgICAgICAgICBhbGxSZXN1bHRzID0gW11cbiAgICAgICAgICAgIGsgPSAwXG5cbiAgICAgICAgICAgIG1ha2VDYWxsYmFjayA9IChpbmRleCkgLT5cbiAgICAgICAgICAgICAgICAtPlxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0gW11cbiAgICAgICAgICAgICAgICAgICAgaSA9IDBcblxuICAgICAgICAgICAgICAgICAgICBjb3VudGVyLS1cblxuICAgICAgICAgICAgICAgICAgICB3aGlsZSBpIDwgYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoIGFyZ3VtZW50c1tpXVxuICAgICAgICAgICAgICAgICAgICAgICAgaSsrXG5cbiAgICAgICAgICAgICAgICAgICAgYWxsUmVzdWx0c1tpbmRleF0gPSByZXN1bHRzXG5cbiAgICAgICAgICAgICAgICAgICAgc2hhcmVkQ2FsbGJhY2sgYWxsUmVzdWx0cyBpZiBjb3VudGVyIGlzIDBcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cblxuICAgICAgICAgICAgd2hpbGUgayA8IGFzeW5jQ2FsbHMubGVuZ3RoXG4gICAgICAgICAgICAgICAgYXN5bmNDYWxsc1trXSBtYWtlQ2FsbGJhY2soaylcbiAgICAgICAgICAgICAgICBrKytcblxuICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAjIE1ldGhvZCBmb3Igd3JhcHBpbmcgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgY2FsbGJhY2sgaW4gYW55IHBvc2l0aW9uXG4gICAgIyB0byByZXR1cm4gcHJvbWlzZXMgaWYgbm8gY2FsbGJhY2sgaXMgZ2l2ZW4gaW4gYSBjYWxsLlxuICAgICMgVGhlIHNlY29uZCBhcmd1bWVudCwgY2JQYXJhbWV0ZXJJbmRleCwgaXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBjYWxsYmFjayBpbiB0aGUgb3JpZ2luYWwgZnVuY3Rpb25zIHBhcmFtZXRlciBsaXN0LlxuICAgICMgQ29mZmVlU2NyaXB0IG9wdGlvbmFsIHBhcmFtZXRlcnMgbWVzc2VzIHdpdGggdGhpcyBmdW5jdGlvbiBhcml0eSBkZXRlY3Rpb24sXG4gICAgIyBub3Qgc3VyZSB3aGF0IHRvIGRvIGFib3V0IHRoYXQsIG90aGVyIHRoYW4gYWx3YXlzIHNldHRpbmcgY2JQYXJhbWV0ZXJJbmRleCBhdCBjYWxsc2l0ZXMuXG4gICAgcHJvbWlzZUNhbGxiYWNrSW50ZXJvcDogKGZ1biwgY2JQYXJhbWV0ZXJJbmRleCA9IGZ1bi5sZW5ndGggLSAxKSAtPlxuICAgICAgICAjIFRoaXMgaXMgdGhlIGZ1bmN0aW9uIHRoYXQgYWN0dWFsbHkgd3JhcHMgYW5kIGNhbGxzIGEgbWV0aG9kIHRvIHJldHVybiBhIHByb21pc2UuXG4gICAgICAgIG1ha2VQcm9taXNlID0gKGZ1biwgY2JQYXJhbWV0ZXJJbmRleCwgcGFyYW1ldGVycykgLT5cbiAgICAgICAgICAgIG5ldyBQcm9taXNlKFxuICAgICAgICAgICAgICAgIChyZXNvbHZlLCByZWplY3QpIC0+XG4gICAgICAgICAgICAgICAgICAgIG5lb0NhbGxiYWNrID0gKGVycm9yLCByZXN1bHQpIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiBlcnJvciB0aGVuIHJlamVjdCBlcnJvciBlbHNlIHJlc29sdmUgcmVzdWx0XG5cbiAgICAgICAgICAgICAgICAgICAgY2FsbFBhcmFtZXRlcnMgPSBbXVxuICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiBbMC4uLigoTWF0aC5tYXggcGFyYW1ldGVycy5sZW5ndGgsIGNiUGFyYW1ldGVySW5kZXgpICsgMSldXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsUGFyYW1ldGVycy5wdXNoIGlmIGkgaXMgY2JQYXJhbWV0ZXJJbmRleCB0aGVuIG5lb0NhbGxiYWNrIGVsc2UgcGFyYW1ldGVyc1tpXVxuXG4gICAgICAgICAgICAgICAgICAgIGZ1bi5hcHBseSB0aGlzLCBjYWxsUGFyYW1ldGVyc1xuICAgICAgICAgICAgKVxuICAgICAgICAjIFdyYXBwZXIgZnVuY3Rpb24gdGhhdCBkZWNpZGVzIHdoYXQgdG8gZG8gcGVyLWNhbGwuXG4gICAgICAgICguLi5wYXJhbWV0ZXJzKSAtPlxuICAgICAgICAgICAgaWYgdHlwZW9mIHBhcmFtZXRlcnNbY2JQYXJhbWV0ZXJJbmRleF0gaXMgJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICMgQ2FsbGJhY2sgZ2l2ZW4sIGRvIGEgcmVndWxhciBvbGQgY2FsbC5cbiAgICAgICAgICAgICAgICBmdW4uYXBwbHkgbnVsbCwgcGFyYW1ldGVyc1xuICAgICAgICAgICAgZWxzZSBpZiB0eXBlb2YgUHJvbWlzZSBpcyAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgIyBObyBjYWxsYmFjayBnaXZlbiwgYW5kIHdlIGhhdmUgcHJvbWlzZSBzdXBwb3J0LCB1c2UgbWFrZVByb21pc2UgdG8gd3JhcCB0aGUgY2FsbC5cbiAgICAgICAgICAgICAgICBtYWtlUHJvbWlzZSBmdW4sIGNiUGFyYW1ldGVySW5kZXgsIHBhcmFtZXRlcnNcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAjIEFpbid0IGdvdCBjYWxsYmFjaywgYWluJ3QgZ290IHByb21pc2Ugc3VwcG9ydDsgd2UgZ290dGEgdGVsbCB0aGUgZGV2ZWxvcGVyLlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlwiXCJUbyBiZSBhYmxlIHRvIHVzZSB0aGlzIGFzeW5jaHJvbm91cyBtZXRob2QgeW91IHNob3VsZDpcblN1cHBseSBhIGNhbGxiYWNrIGZ1bmN0aW9uIGFzIGFyZ3VtZW50ICMjezErY2JQYXJhbWV0ZXJJbmRleH0uXG5UaGlzIGNhbGxiYWNrIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIG1ldGhvZCBjYWxsIHJlc3BvbnNlLlxuQWx0ZXJuYXRpdmVseSwgd2hlbiBzdXBwb3J0ZWQsIGl0IGNhbiByZXR1cm4gYSBQcm9taXNlIGlmIG5vIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIGdpdmVuLlxuICAgICAgICAgICAgICAgIFwiXCJcIilcblxubW9kdWxlLmV4cG9ydHMgPSB1dGlsXG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCIvKipcbiAqIE1pY3JvRXZlbnQgLSB0byBtYWtlIGFueSBqcyBvYmplY3QgYW4gZXZlbnQgZW1pdHRlciAoc2VydmVyIG9yIGJyb3dzZXIpXG4gKiBcbiAqIC0gcHVyZSBqYXZhc2NyaXB0IC0gc2VydmVyIGNvbXBhdGlibGUsIGJyb3dzZXIgY29tcGF0aWJsZVxuICogLSBkb250IHJlbHkgb24gdGhlIGJyb3dzZXIgZG9tc1xuICogLSBzdXBlciBzaW1wbGUgLSB5b3UgZ2V0IGl0IGltbWVkaWF0bHksIG5vIG1pc3RlcnksIG5vIG1hZ2ljIGludm9sdmVkXG4gKlxuICogLSBjcmVhdGUgYSBNaWNyb0V2ZW50RGVidWcgd2l0aCBnb29kaWVzIHRvIGRlYnVnXG4gKiAgIC0gbWFrZSBpdCBzYWZlciB0byB1c2VcbiovXG5cbnZhciBNaWNyb0V2ZW50XHQ9IGZ1bmN0aW9uKCl7fVxuTWljcm9FdmVudC5wcm90b3R5cGVcdD0ge1xuXHRiaW5kXHQ6IGZ1bmN0aW9uKGV2ZW50LCBmY3Qpe1xuXHRcdHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcblx0XHR0aGlzLl9ldmVudHNbZXZlbnRdID0gdGhpcy5fZXZlbnRzW2V2ZW50XVx0fHwgW107XG5cdFx0dGhpcy5fZXZlbnRzW2V2ZW50XS5wdXNoKGZjdCk7XG5cdH0sXG5cdHVuYmluZFx0OiBmdW5jdGlvbihldmVudCwgZmN0KXtcblx0XHR0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG5cdFx0aWYoIGV2ZW50IGluIHRoaXMuX2V2ZW50cyA9PT0gZmFsc2UgIClcdHJldHVybjtcblx0XHR0aGlzLl9ldmVudHNbZXZlbnRdLnNwbGljZSh0aGlzLl9ldmVudHNbZXZlbnRdLmluZGV4T2YoZmN0KSwgMSk7XG5cdH0sXG5cdHRyaWdnZXJcdDogZnVuY3Rpb24oZXZlbnQgLyogLCBhcmdzLi4uICovKXtcblx0XHR0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG5cdFx0aWYoIGV2ZW50IGluIHRoaXMuX2V2ZW50cyA9PT0gZmFsc2UgIClcdHJldHVybjtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5fZXZlbnRzW2V2ZW50XS5sZW5ndGg7IGkrKyl7XG5cdFx0XHR0aGlzLl9ldmVudHNbZXZlbnRdW2ldLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpXG5cdFx0fVxuXHR9XG59O1xuXG4vKipcbiAqIG1peGluIHdpbGwgZGVsZWdhdGUgYWxsIE1pY3JvRXZlbnQuanMgZnVuY3Rpb24gaW4gdGhlIGRlc3RpbmF0aW9uIG9iamVjdFxuICpcbiAqIC0gcmVxdWlyZSgnTWljcm9FdmVudCcpLm1peGluKEZvb2Jhcikgd2lsbCBtYWtlIEZvb2JhciBhYmxlIHRvIHVzZSBNaWNyb0V2ZW50XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRoZSBvYmplY3Qgd2hpY2ggd2lsbCBzdXBwb3J0IE1pY3JvRXZlbnRcbiovXG5NaWNyb0V2ZW50Lm1peGluXHQ9IGZ1bmN0aW9uKGRlc3RPYmplY3Qpe1xuXHR2YXIgcHJvcHNcdD0gWydiaW5kJywgJ3VuYmluZCcsICd0cmlnZ2VyJ107XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKyspe1xuXHRcdGRlc3RPYmplY3QucHJvdG90eXBlW3Byb3BzW2ldXVx0PSBNaWNyb0V2ZW50LnByb3RvdHlwZVtwcm9wc1tpXV07XG5cdH1cbn1cblxuLy8gZXhwb3J0IGluIGNvbW1vbiBqc1xuaWYoIHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgJiYgKCdleHBvcnRzJyBpbiBtb2R1bGUpKXtcblx0bW9kdWxlLmV4cG9ydHNcdD0gTWljcm9FdmVudFxufVxuIiwiTWljcm9FdmVudCA9IHJlcXVpcmUgJ21pY3JvZXZlbnQnXG5Db25maWcgPSBjbGFzcyBDb25maWdcbiAgICBrZXlzOiBbXG4gICAgICAgICdhcHBWZXJzaW9uJyxcbiAgICAgICAgJ2FwcEtleScsXG4gICAgICAgICdhcHBTZWNyZXQnLFxuICAgICAgICAnYXV0aFRva2VuJyxcbiAgICAgICAgJ2V2ZW50VHJhY2tlcicsXG4gICAgICAgICdsb2NhbGUnLFxuICAgICAgICAnY29yZVNlc3Npb25Ub2tlbicsXG4gICAgICAgICdjb3JlU2Vzc2lvbkNsaWVudElkJyxcbiAgICAgICAgJ2NvcmVVcmwnLFxuICAgICAgICAnZ3JhcGhVcmwnLFxuICAgICAgICAnZXZlbnRzVHJhY2tVcmwnLFxuICAgICAgICAnZXZlbnRzUHVsc2VVcmwnLFxuICAgICAgICAnYXNzZXRzRmlsZVVwbG9hZFVybCdcbiAgICBdXG5cbiAgICBjb25zdHJ1Y3RvcjogLT5cbiAgICAgICAgQGF0dHJzID0ge31cblxuICAgICAgICByZXR1cm5cblxuICAgIHNldDogKGNvbmZpZyA9IHt9KSAtPlxuICAgICAgICBjaGFuZ2VkQXR0cmlidXRlcyA9IHt9XG5cbiAgICAgICAgZm9yIGtleSwgdmFsdWUgb2YgY29uZmlnXG4gICAgICAgICAgICBpZiBrZXkgaW4gQGtleXNcbiAgICAgICAgICAgICAgICBAYXR0cnNba2V5XSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgY2hhbmdlZEF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlXG5cbiAgICAgICAgQHRyaWdnZXIgJ2NoYW5nZScsIGNoYW5nZWRBdHRyaWJ1dGVzXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBnZXQ6IChvcHRpb24pIC0+XG4gICAgICAgIEBhdHRyc1tvcHRpb25dXG5cbk1pY3JvRXZlbnQubWl4aW4gQ29uZmlnXG5cbm1vZHVsZS5leHBvcnRzID0gQ29uZmlnXG4iLCIvKiFcbiAqIG11c3RhY2hlLmpzIC0gTG9naWMtbGVzcyB7e211c3RhY2hlfX0gdGVtcGxhdGVzIHdpdGggSmF2YVNjcmlwdFxuICogaHR0cDovL2dpdGh1Yi5jb20vamFubC9tdXN0YWNoZS5qc1xuICovXG5cbi8qZ2xvYmFsIGRlZmluZTogZmFsc2UgTXVzdGFjaGU6IHRydWUqL1xuXG4oZnVuY3Rpb24gZGVmaW5lTXVzdGFjaGUgKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgdHlwZW9mIGV4cG9ydHMubm9kZU5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgZmFjdG9yeShleHBvcnRzKTsgLy8gQ29tbW9uSlNcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpOyAvLyBBTURcbiAgfSBlbHNlIHtcbiAgICBnbG9iYWwuTXVzdGFjaGUgPSB7fTtcbiAgICBmYWN0b3J5KGdsb2JhbC5NdXN0YWNoZSk7IC8vIHNjcmlwdCwgd3NoLCBhc3BcbiAgfVxufSh0aGlzLCBmdW5jdGlvbiBtdXN0YWNoZUZhY3RvcnkgKG11c3RhY2hlKSB7XG5cbiAgdmFyIG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXlQb2x5ZmlsbCAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdFRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcblxuICBmdW5jdGlvbiBpc0Z1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIC8qKlxuICAgKiBNb3JlIGNvcnJlY3QgdHlwZW9mIHN0cmluZyBoYW5kbGluZyBhcnJheVxuICAgKiB3aGljaCBub3JtYWxseSByZXR1cm5zIHR5cGVvZiAnb2JqZWN0J1xuICAgKi9cbiAgZnVuY3Rpb24gdHlwZVN0ciAob2JqKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkob2JqKSA/ICdhcnJheScgOiB0eXBlb2Ygb2JqO1xuICB9XG5cbiAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwIChzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1tcXC1cXFtcXF17fSgpKis/LixcXFxcXFxeJHwjXFxzXS9nLCAnXFxcXCQmJyk7XG4gIH1cblxuICAvKipcbiAgICogTnVsbCBzYWZlIHdheSBvZiBjaGVja2luZyB3aGV0aGVyIG9yIG5vdCBhbiBvYmplY3QsXG4gICAqIGluY2x1ZGluZyBpdHMgcHJvdG90eXBlLCBoYXMgYSBnaXZlbiBwcm9wZXJ0eVxuICAgKi9cbiAgZnVuY3Rpb24gaGFzUHJvcGVydHkgKG9iaiwgcHJvcE5hbWUpIHtcbiAgICByZXR1cm4gb2JqICE9IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgKHByb3BOYW1lIGluIG9iaik7XG4gIH1cblxuICAvKipcbiAgICogU2FmZSB3YXkgb2YgZGV0ZWN0aW5nIHdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiB0aGluZyBpcyBhIHByaW1pdGl2ZSBhbmRcbiAgICogd2hldGhlciBpdCBoYXMgdGhlIGdpdmVuIHByb3BlcnR5XG4gICAqL1xuICBmdW5jdGlvbiBwcmltaXRpdmVIYXNPd25Qcm9wZXJ0eSAocHJpbWl0aXZlLCBwcm9wTmFtZSkgeyAgXG4gICAgcmV0dXJuIChcbiAgICAgIHByaW1pdGl2ZSAhPSBudWxsXG4gICAgICAmJiB0eXBlb2YgcHJpbWl0aXZlICE9PSAnb2JqZWN0J1xuICAgICAgJiYgcHJpbWl0aXZlLmhhc093blByb3BlcnR5XG4gICAgICAmJiBwcmltaXRpdmUuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpXG4gICAgKTtcbiAgfVxuXG4gIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vaXNzdWVzLmFwYWNoZS5vcmcvamlyYS9icm93c2UvQ09VQ0hEQi01NzdcbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYW5sL211c3RhY2hlLmpzL2lzc3Vlcy8xODlcbiAgdmFyIHJlZ0V4cFRlc3QgPSBSZWdFeHAucHJvdG90eXBlLnRlc3Q7XG4gIGZ1bmN0aW9uIHRlc3RSZWdFeHAgKHJlLCBzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVnRXhwVGVzdC5jYWxsKHJlLCBzdHJpbmcpO1xuICB9XG5cbiAgdmFyIG5vblNwYWNlUmUgPSAvXFxTLztcbiAgZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChzdHJpbmcpIHtcbiAgICByZXR1cm4gIXRlc3RSZWdFeHAobm9uU3BhY2VSZSwgc3RyaW5nKTtcbiAgfVxuXG4gIHZhciBlbnRpdHlNYXAgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnLFxuICAgICcvJzogJyYjeDJGOycsXG4gICAgJ2AnOiAnJiN4NjA7JyxcbiAgICAnPSc6ICcmI3gzRDsnXG4gIH07XG5cbiAgZnVuY3Rpb24gZXNjYXBlSHRtbCAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UoL1smPD5cIidgPVxcL10vZywgZnVuY3Rpb24gZnJvbUVudGl0eU1hcCAocykge1xuICAgICAgcmV0dXJuIGVudGl0eU1hcFtzXTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciB3aGl0ZVJlID0gL1xccyovO1xuICB2YXIgc3BhY2VSZSA9IC9cXHMrLztcbiAgdmFyIGVxdWFsc1JlID0gL1xccyo9LztcbiAgdmFyIGN1cmx5UmUgPSAvXFxzKlxcfS87XG4gIHZhciB0YWdSZSA9IC8jfFxcXnxcXC98PnxcXHt8Jnw9fCEvO1xuXG4gIC8qKlxuICAgKiBCcmVha3MgdXAgdGhlIGdpdmVuIGB0ZW1wbGF0ZWAgc3RyaW5nIGludG8gYSB0cmVlIG9mIHRva2Vucy4gSWYgdGhlIGB0YWdzYFxuICAgKiBhcmd1bWVudCBpcyBnaXZlbiBoZXJlIGl0IG11c3QgYmUgYW4gYXJyYXkgd2l0aCB0d28gc3RyaW5nIHZhbHVlczogdGhlXG4gICAqIG9wZW5pbmcgYW5kIGNsb3NpbmcgdGFncyB1c2VkIGluIHRoZSB0ZW1wbGF0ZSAoZS5nLiBbIFwiPCVcIiwgXCIlPlwiIF0pLiBPZlxuICAgKiBjb3Vyc2UsIHRoZSBkZWZhdWx0IGlzIHRvIHVzZSBtdXN0YWNoZXMgKGkuZS4gbXVzdGFjaGUudGFncykuXG4gICAqXG4gICAqIEEgdG9rZW4gaXMgYW4gYXJyYXkgd2l0aCBhdCBsZWFzdCA0IGVsZW1lbnRzLiBUaGUgZmlyc3QgZWxlbWVudCBpcyB0aGVcbiAgICogbXVzdGFjaGUgc3ltYm9sIHRoYXQgd2FzIHVzZWQgaW5zaWRlIHRoZSB0YWcsIGUuZy4gXCIjXCIgb3IgXCImXCIuIElmIHRoZSB0YWdcbiAgICogZGlkIG5vdCBjb250YWluIGEgc3ltYm9sIChpLmUuIHt7bXlWYWx1ZX19KSB0aGlzIGVsZW1lbnQgaXMgXCJuYW1lXCIuIEZvclxuICAgKiBhbGwgdGV4dCB0aGF0IGFwcGVhcnMgb3V0c2lkZSBhIHN5bWJvbCB0aGlzIGVsZW1lbnQgaXMgXCJ0ZXh0XCIuXG4gICAqXG4gICAqIFRoZSBzZWNvbmQgZWxlbWVudCBvZiBhIHRva2VuIGlzIGl0cyBcInZhbHVlXCIuIEZvciBtdXN0YWNoZSB0YWdzIHRoaXMgaXNcbiAgICogd2hhdGV2ZXIgZWxzZSB3YXMgaW5zaWRlIHRoZSB0YWcgYmVzaWRlcyB0aGUgb3BlbmluZyBzeW1ib2wuIEZvciB0ZXh0IHRva2Vuc1xuICAgKiB0aGlzIGlzIHRoZSB0ZXh0IGl0c2VsZi5cbiAgICpcbiAgICogVGhlIHRoaXJkIGFuZCBmb3VydGggZWxlbWVudHMgb2YgdGhlIHRva2VuIGFyZSB0aGUgc3RhcnQgYW5kIGVuZCBpbmRpY2VzLFxuICAgKiByZXNwZWN0aXZlbHksIG9mIHRoZSB0b2tlbiBpbiB0aGUgb3JpZ2luYWwgdGVtcGxhdGUuXG4gICAqXG4gICAqIFRva2VucyB0aGF0IGFyZSB0aGUgcm9vdCBub2RlIG9mIGEgc3VidHJlZSBjb250YWluIHR3byBtb3JlIGVsZW1lbnRzOiAxKSBhblxuICAgKiBhcnJheSBvZiB0b2tlbnMgaW4gdGhlIHN1YnRyZWUgYW5kIDIpIHRoZSBpbmRleCBpbiB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgYXRcbiAgICogd2hpY2ggdGhlIGNsb3NpbmcgdGFnIGZvciB0aGF0IHNlY3Rpb24gYmVnaW5zLlxuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2VUZW1wbGF0ZSAodGVtcGxhdGUsIHRhZ3MpIHtcbiAgICBpZiAoIXRlbXBsYXRlKVxuICAgICAgcmV0dXJuIFtdO1xuXG4gICAgdmFyIHNlY3Rpb25zID0gW107ICAgICAvLyBTdGFjayB0byBob2xkIHNlY3Rpb24gdG9rZW5zXG4gICAgdmFyIHRva2VucyA9IFtdOyAgICAgICAvLyBCdWZmZXIgdG8gaG9sZCB0aGUgdG9rZW5zXG4gICAgdmFyIHNwYWNlcyA9IFtdOyAgICAgICAvLyBJbmRpY2VzIG9mIHdoaXRlc3BhY2UgdG9rZW5zIG9uIHRoZSBjdXJyZW50IGxpbmVcbiAgICB2YXIgaGFzVGFnID0gZmFsc2U7ICAgIC8vIElzIHRoZXJlIGEge3t0YWd9fSBvbiB0aGUgY3VycmVudCBsaW5lP1xuICAgIHZhciBub25TcGFjZSA9IGZhbHNlOyAgLy8gSXMgdGhlcmUgYSBub24tc3BhY2UgY2hhciBvbiB0aGUgY3VycmVudCBsaW5lP1xuXG4gICAgLy8gU3RyaXBzIGFsbCB3aGl0ZXNwYWNlIHRva2VucyBhcnJheSBmb3IgdGhlIGN1cnJlbnQgbGluZVxuICAgIC8vIGlmIHRoZXJlIHdhcyBhIHt7I3RhZ319IG9uIGl0IGFuZCBvdGhlcndpc2Ugb25seSBzcGFjZS5cbiAgICBmdW5jdGlvbiBzdHJpcFNwYWNlICgpIHtcbiAgICAgIGlmIChoYXNUYWcgJiYgIW5vblNwYWNlKSB7XG4gICAgICAgIHdoaWxlIChzcGFjZXMubGVuZ3RoKVxuICAgICAgICAgIGRlbGV0ZSB0b2tlbnNbc3BhY2VzLnBvcCgpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwYWNlcyA9IFtdO1xuICAgICAgfVxuXG4gICAgICBoYXNUYWcgPSBmYWxzZTtcbiAgICAgIG5vblNwYWNlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIG9wZW5pbmdUYWdSZSwgY2xvc2luZ1RhZ1JlLCBjbG9zaW5nQ3VybHlSZTtcbiAgICBmdW5jdGlvbiBjb21waWxlVGFncyAodGFnc1RvQ29tcGlsZSkge1xuICAgICAgaWYgKHR5cGVvZiB0YWdzVG9Db21waWxlID09PSAnc3RyaW5nJylcbiAgICAgICAgdGFnc1RvQ29tcGlsZSA9IHRhZ3NUb0NvbXBpbGUuc3BsaXQoc3BhY2VSZSwgMik7XG5cbiAgICAgIGlmICghaXNBcnJheSh0YWdzVG9Db21waWxlKSB8fCB0YWdzVG9Db21waWxlLmxlbmd0aCAhPT0gMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHRhZ3M6ICcgKyB0YWdzVG9Db21waWxlKTtcblxuICAgICAgb3BlbmluZ1RhZ1JlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeHAodGFnc1RvQ29tcGlsZVswXSkgKyAnXFxcXHMqJyk7XG4gICAgICBjbG9zaW5nVGFnUmUgPSBuZXcgUmVnRXhwKCdcXFxccyonICsgZXNjYXBlUmVnRXhwKHRhZ3NUb0NvbXBpbGVbMV0pKTtcbiAgICAgIGNsb3NpbmdDdXJseVJlID0gbmV3IFJlZ0V4cCgnXFxcXHMqJyArIGVzY2FwZVJlZ0V4cCgnfScgKyB0YWdzVG9Db21waWxlWzFdKSk7XG4gICAgfVxuXG4gICAgY29tcGlsZVRhZ3ModGFncyB8fCBtdXN0YWNoZS50YWdzKTtcblxuICAgIHZhciBzY2FubmVyID0gbmV3IFNjYW5uZXIodGVtcGxhdGUpO1xuXG4gICAgdmFyIHN0YXJ0LCB0eXBlLCB2YWx1ZSwgY2hyLCB0b2tlbiwgb3BlblNlY3Rpb247XG4gICAgd2hpbGUgKCFzY2FubmVyLmVvcygpKSB7XG4gICAgICBzdGFydCA9IHNjYW5uZXIucG9zO1xuXG4gICAgICAvLyBNYXRjaCBhbnkgdGV4dCBiZXR3ZWVuIHRhZ3MuXG4gICAgICB2YWx1ZSA9IHNjYW5uZXIuc2NhblVudGlsKG9wZW5pbmdUYWdSZSk7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgdmFsdWVMZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGkgPCB2YWx1ZUxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2hyID0gdmFsdWUuY2hhckF0KGkpO1xuXG4gICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjaHIpKSB7XG4gICAgICAgICAgICBzcGFjZXMucHVzaCh0b2tlbnMubGVuZ3RoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9uU3BhY2UgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRva2Vucy5wdXNoKFsgJ3RleHQnLCBjaHIsIHN0YXJ0LCBzdGFydCArIDEgXSk7XG4gICAgICAgICAgc3RhcnQgKz0gMTtcblxuICAgICAgICAgIC8vIENoZWNrIGZvciB3aGl0ZXNwYWNlIG9uIHRoZSBjdXJyZW50IGxpbmUuXG4gICAgICAgICAgaWYgKGNociA9PT0gJ1xcbicpXG4gICAgICAgICAgICBzdHJpcFNwYWNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gTWF0Y2ggdGhlIG9wZW5pbmcgdGFnLlxuICAgICAgaWYgKCFzY2FubmVyLnNjYW4ob3BlbmluZ1RhZ1JlKSlcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGhhc1RhZyA9IHRydWU7XG5cbiAgICAgIC8vIEdldCB0aGUgdGFnIHR5cGUuXG4gICAgICB0eXBlID0gc2Nhbm5lci5zY2FuKHRhZ1JlKSB8fCAnbmFtZSc7XG4gICAgICBzY2FubmVyLnNjYW4od2hpdGVSZSk7XG5cbiAgICAgIC8vIEdldCB0aGUgdGFnIHZhbHVlLlxuICAgICAgaWYgKHR5cGUgPT09ICc9Jykge1xuICAgICAgICB2YWx1ZSA9IHNjYW5uZXIuc2NhblVudGlsKGVxdWFsc1JlKTtcbiAgICAgICAgc2Nhbm5lci5zY2FuKGVxdWFsc1JlKTtcbiAgICAgICAgc2Nhbm5lci5zY2FuVW50aWwoY2xvc2luZ1RhZ1JlKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3snKSB7XG4gICAgICAgIHZhbHVlID0gc2Nhbm5lci5zY2FuVW50aWwoY2xvc2luZ0N1cmx5UmUpO1xuICAgICAgICBzY2FubmVyLnNjYW4oY3VybHlSZSk7XG4gICAgICAgIHNjYW5uZXIuc2NhblVudGlsKGNsb3NpbmdUYWdSZSk7XG4gICAgICAgIHR5cGUgPSAnJic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHNjYW5uZXIuc2NhblVudGlsKGNsb3NpbmdUYWdSZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1hdGNoIHRoZSBjbG9zaW5nIHRhZy5cbiAgICAgIGlmICghc2Nhbm5lci5zY2FuKGNsb3NpbmdUYWdSZSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5jbG9zZWQgdGFnIGF0ICcgKyBzY2FubmVyLnBvcyk7XG5cbiAgICAgIHRva2VuID0gWyB0eXBlLCB2YWx1ZSwgc3RhcnQsIHNjYW5uZXIucG9zIF07XG4gICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG5cbiAgICAgIGlmICh0eXBlID09PSAnIycgfHwgdHlwZSA9PT0gJ14nKSB7XG4gICAgICAgIHNlY3Rpb25zLnB1c2godG9rZW4pO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnLycpIHtcbiAgICAgICAgLy8gQ2hlY2sgc2VjdGlvbiBuZXN0aW5nLlxuICAgICAgICBvcGVuU2VjdGlvbiA9IHNlY3Rpb25zLnBvcCgpO1xuXG4gICAgICAgIGlmICghb3BlblNlY3Rpb24pXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbm9wZW5lZCBzZWN0aW9uIFwiJyArIHZhbHVlICsgJ1wiIGF0ICcgKyBzdGFydCk7XG5cbiAgICAgICAgaWYgKG9wZW5TZWN0aW9uWzFdICE9PSB2YWx1ZSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuY2xvc2VkIHNlY3Rpb24gXCInICsgb3BlblNlY3Rpb25bMV0gKyAnXCIgYXQgJyArIHN0YXJ0KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ25hbWUnIHx8IHR5cGUgPT09ICd7JyB8fCB0eXBlID09PSAnJicpIHtcbiAgICAgICAgbm9uU3BhY2UgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnPScpIHtcbiAgICAgICAgLy8gU2V0IHRoZSB0YWdzIGZvciB0aGUgbmV4dCB0aW1lIGFyb3VuZC5cbiAgICAgICAgY29tcGlsZVRhZ3ModmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1ha2Ugc3VyZSB0aGVyZSBhcmUgbm8gb3BlbiBzZWN0aW9ucyB3aGVuIHdlJ3JlIGRvbmUuXG4gICAgb3BlblNlY3Rpb24gPSBzZWN0aW9ucy5wb3AoKTtcblxuICAgIGlmIChvcGVuU2VjdGlvbilcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5jbG9zZWQgc2VjdGlvbiBcIicgKyBvcGVuU2VjdGlvblsxXSArICdcIiBhdCAnICsgc2Nhbm5lci5wb3MpO1xuXG4gICAgcmV0dXJuIG5lc3RUb2tlbnMoc3F1YXNoVG9rZW5zKHRva2VucykpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbWJpbmVzIHRoZSB2YWx1ZXMgb2YgY29uc2VjdXRpdmUgdGV4dCB0b2tlbnMgaW4gdGhlIGdpdmVuIGB0b2tlbnNgIGFycmF5XG4gICAqIHRvIGEgc2luZ2xlIHRva2VuLlxuICAgKi9cbiAgZnVuY3Rpb24gc3F1YXNoVG9rZW5zICh0b2tlbnMpIHtcbiAgICB2YXIgc3F1YXNoZWRUb2tlbnMgPSBbXTtcblxuICAgIHZhciB0b2tlbiwgbGFzdFRva2VuO1xuICAgIGZvciAodmFyIGkgPSAwLCBudW1Ub2tlbnMgPSB0b2tlbnMubGVuZ3RoOyBpIDwgbnVtVG9rZW5zOyArK2kpIHtcbiAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgaWYgKHRva2VuWzBdID09PSAndGV4dCcgJiYgbGFzdFRva2VuICYmIGxhc3RUb2tlblswXSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgbGFzdFRva2VuWzFdICs9IHRva2VuWzFdO1xuICAgICAgICAgIGxhc3RUb2tlblszXSA9IHRva2VuWzNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNxdWFzaGVkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgIGxhc3RUb2tlbiA9IHRva2VuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNxdWFzaGVkVG9rZW5zO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcm1zIHRoZSBnaXZlbiBhcnJheSBvZiBgdG9rZW5zYCBpbnRvIGEgbmVzdGVkIHRyZWUgc3RydWN0dXJlIHdoZXJlXG4gICAqIHRva2VucyB0aGF0IHJlcHJlc2VudCBhIHNlY3Rpb24gaGF2ZSB0d28gYWRkaXRpb25hbCBpdGVtczogMSkgYW4gYXJyYXkgb2ZcbiAgICogYWxsIHRva2VucyB0aGF0IGFwcGVhciBpbiB0aGF0IHNlY3Rpb24gYW5kIDIpIHRoZSBpbmRleCBpbiB0aGUgb3JpZ2luYWxcbiAgICogdGVtcGxhdGUgdGhhdCByZXByZXNlbnRzIHRoZSBlbmQgb2YgdGhhdCBzZWN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gbmVzdFRva2VucyAodG9rZW5zKSB7XG4gICAgdmFyIG5lc3RlZFRva2VucyA9IFtdO1xuICAgIHZhciBjb2xsZWN0b3IgPSBuZXN0ZWRUb2tlbnM7XG4gICAgdmFyIHNlY3Rpb25zID0gW107XG5cbiAgICB2YXIgdG9rZW4sIHNlY3Rpb247XG4gICAgZm9yICh2YXIgaSA9IDAsIG51bVRva2VucyA9IHRva2Vucy5sZW5ndGg7IGkgPCBudW1Ub2tlbnM7ICsraSkge1xuICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICAgIHN3aXRjaCAodG9rZW5bMF0pIHtcbiAgICAgICAgY2FzZSAnIyc6XG4gICAgICAgIGNhc2UgJ14nOlxuICAgICAgICAgIGNvbGxlY3Rvci5wdXNoKHRva2VuKTtcbiAgICAgICAgICBzZWN0aW9ucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICBjb2xsZWN0b3IgPSB0b2tlbls0XSA9IFtdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcvJzpcbiAgICAgICAgICBzZWN0aW9uID0gc2VjdGlvbnMucG9wKCk7XG4gICAgICAgICAgc2VjdGlvbls1XSA9IHRva2VuWzJdO1xuICAgICAgICAgIGNvbGxlY3RvciA9IHNlY3Rpb25zLmxlbmd0aCA+IDAgPyBzZWN0aW9uc1tzZWN0aW9ucy5sZW5ndGggLSAxXVs0XSA6IG5lc3RlZFRva2VucztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjb2xsZWN0b3IucHVzaCh0b2tlbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5lc3RlZFRva2VucztcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNpbXBsZSBzdHJpbmcgc2Nhbm5lciB0aGF0IGlzIHVzZWQgYnkgdGhlIHRlbXBsYXRlIHBhcnNlciB0byBmaW5kXG4gICAqIHRva2VucyBpbiB0ZW1wbGF0ZSBzdHJpbmdzLlxuICAgKi9cbiAgZnVuY3Rpb24gU2Nhbm5lciAoc3RyaW5nKSB7XG4gICAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG4gICAgdGhpcy50YWlsID0gc3RyaW5nO1xuICAgIHRoaXMucG9zID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdGFpbCBpcyBlbXB0eSAoZW5kIG9mIHN0cmluZykuXG4gICAqL1xuICBTY2FubmVyLnByb3RvdHlwZS5lb3MgPSBmdW5jdGlvbiBlb3MgKCkge1xuICAgIHJldHVybiB0aGlzLnRhaWwgPT09ICcnO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUcmllcyB0byBtYXRjaCB0aGUgZ2l2ZW4gcmVndWxhciBleHByZXNzaW9uIGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuICAgKiBSZXR1cm5zIHRoZSBtYXRjaGVkIHRleHQgaWYgaXQgY2FuIG1hdGNoLCB0aGUgZW1wdHkgc3RyaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIFNjYW5uZXIucHJvdG90eXBlLnNjYW4gPSBmdW5jdGlvbiBzY2FuIChyZSkge1xuICAgIHZhciBtYXRjaCA9IHRoaXMudGFpbC5tYXRjaChyZSk7XG5cbiAgICBpZiAoIW1hdGNoIHx8IG1hdGNoLmluZGV4ICE9PSAwKVxuICAgICAgcmV0dXJuICcnO1xuXG4gICAgdmFyIHN0cmluZyA9IG1hdGNoWzBdO1xuXG4gICAgdGhpcy50YWlsID0gdGhpcy50YWlsLnN1YnN0cmluZyhzdHJpbmcubGVuZ3RoKTtcbiAgICB0aGlzLnBvcyArPSBzdHJpbmcubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHN0cmluZztcbiAgfTtcblxuICAvKipcbiAgICogU2tpcHMgYWxsIHRleHQgdW50aWwgdGhlIGdpdmVuIHJlZ3VsYXIgZXhwcmVzc2lvbiBjYW4gYmUgbWF0Y2hlZC4gUmV0dXJuc1xuICAgKiB0aGUgc2tpcHBlZCBzdHJpbmcsIHdoaWNoIGlzIHRoZSBlbnRpcmUgdGFpbCBpZiBubyBtYXRjaCBjYW4gYmUgbWFkZS5cbiAgICovXG4gIFNjYW5uZXIucHJvdG90eXBlLnNjYW5VbnRpbCA9IGZ1bmN0aW9uIHNjYW5VbnRpbCAocmUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnRhaWwuc2VhcmNoKHJlKSwgbWF0Y2g7XG5cbiAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICBjYXNlIC0xOlxuICAgICAgICBtYXRjaCA9IHRoaXMudGFpbDtcbiAgICAgICAgdGhpcy50YWlsID0gJyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAwOlxuICAgICAgICBtYXRjaCA9ICcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG1hdGNoID0gdGhpcy50YWlsLnN1YnN0cmluZygwLCBpbmRleCk7XG4gICAgICAgIHRoaXMudGFpbCA9IHRoaXMudGFpbC5zdWJzdHJpbmcoaW5kZXgpO1xuICAgIH1cblxuICAgIHRoaXMucG9zICs9IG1hdGNoLmxlbmd0aDtcblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcblxuICAvKipcbiAgICogUmVwcmVzZW50cyBhIHJlbmRlcmluZyBjb250ZXh0IGJ5IHdyYXBwaW5nIGEgdmlldyBvYmplY3QgYW5kXG4gICAqIG1haW50YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgY29udGV4dC5cbiAgICovXG4gIGZ1bmN0aW9uIENvbnRleHQgKHZpZXcsIHBhcmVudENvbnRleHQpIHtcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgIHRoaXMuY2FjaGUgPSB7ICcuJzogdGhpcy52aWV3IH07XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRDb250ZXh0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgY29udGV4dCB1c2luZyB0aGUgZ2l2ZW4gdmlldyB3aXRoIHRoaXMgY29udGV4dFxuICAgKiBhcyB0aGUgcGFyZW50LlxuICAgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKHZpZXcpIHtcbiAgICByZXR1cm4gbmV3IENvbnRleHQodmlldywgdGhpcyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBnaXZlbiBuYW1lIGluIHRoaXMgY29udGV4dCwgdHJhdmVyc2luZ1xuICAgKiB1cCB0aGUgY29udGV4dCBoaWVyYXJjaHkgaWYgdGhlIHZhbHVlIGlzIGFic2VudCBpbiB0aGlzIGNvbnRleHQncyB2aWV3LlxuICAgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUubG9va3VwID0gZnVuY3Rpb24gbG9va3VwIChuYW1lKSB7XG4gICAgdmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuICAgIHZhciB2YWx1ZTtcbiAgICBpZiAoY2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIHZhbHVlID0gY2FjaGVbbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgaW50ZXJtZWRpYXRlVmFsdWUsIG5hbWVzLCBpbmRleCwgbG9va3VwSGl0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlIChjb250ZXh0KSB7XG4gICAgICAgIGlmIChuYW1lLmluZGV4T2YoJy4nKSA+IDApIHtcbiAgICAgICAgICBpbnRlcm1lZGlhdGVWYWx1ZSA9IGNvbnRleHQudmlldztcbiAgICAgICAgICBuYW1lcyA9IG5hbWUuc3BsaXQoJy4nKTtcbiAgICAgICAgICBpbmRleCA9IDA7XG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBVc2luZyB0aGUgZG90IG5vdGlvbiBwYXRoIGluIGBuYW1lYCwgd2UgZGVzY2VuZCB0aHJvdWdoIHRoZVxuICAgICAgICAgICAqIG5lc3RlZCBvYmplY3RzLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogVG8gYmUgY2VydGFpbiB0aGF0IHRoZSBsb29rdXAgaGFzIGJlZW4gc3VjY2Vzc2Z1bCwgd2UgaGF2ZSB0b1xuICAgICAgICAgICAqIGNoZWNrIGlmIHRoZSBsYXN0IG9iamVjdCBpbiB0aGUgcGF0aCBhY3R1YWxseSBoYXMgdGhlIHByb3BlcnR5XG4gICAgICAgICAgICogd2UgYXJlIGxvb2tpbmcgZm9yLiBXZSBzdG9yZSB0aGUgcmVzdWx0IGluIGBsb29rdXBIaXRgLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogVGhpcyBpcyBzcGVjaWFsbHkgbmVjZXNzYXJ5IGZvciB3aGVuIHRoZSB2YWx1ZSBoYXMgYmVlbiBzZXQgdG9cbiAgICAgICAgICAgKiBgdW5kZWZpbmVkYCBhbmQgd2Ugd2FudCB0byBhdm9pZCBsb29raW5nIHVwIHBhcmVudCBjb250ZXh0cy5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEluIHRoZSBjYXNlIHdoZXJlIGRvdCBub3RhdGlvbiBpcyB1c2VkLCB3ZSBjb25zaWRlciB0aGUgbG9va3VwXG4gICAgICAgICAgICogdG8gYmUgc3VjY2Vzc2Z1bCBldmVuIGlmIHRoZSBsYXN0IFwib2JqZWN0XCIgaW4gdGhlIHBhdGggaXNcbiAgICAgICAgICAgKiBub3QgYWN0dWFsbHkgYW4gb2JqZWN0IGJ1dCBhIHByaW1pdGl2ZSAoZS5nLiwgYSBzdHJpbmcsIG9yIGFuXG4gICAgICAgICAgICogaW50ZWdlciksIGJlY2F1c2UgaXQgaXMgc29tZXRpbWVzIHVzZWZ1bCB0byBhY2Nlc3MgYSBwcm9wZXJ0eVxuICAgICAgICAgICAqIG9mIGFuIGF1dG9ib3hlZCBwcmltaXRpdmUsIHN1Y2ggYXMgdGhlIGxlbmd0aCBvZiBhIHN0cmluZy5cbiAgICAgICAgICAgKiovXG4gICAgICAgICAgd2hpbGUgKGludGVybWVkaWF0ZVZhbHVlICE9IG51bGwgJiYgaW5kZXggPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gbmFtZXMubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgbG9va3VwSGl0ID0gKFxuICAgICAgICAgICAgICAgIGhhc1Byb3BlcnR5KGludGVybWVkaWF0ZVZhbHVlLCBuYW1lc1tpbmRleF0pIFxuICAgICAgICAgICAgICAgIHx8IHByaW1pdGl2ZUhhc093blByb3BlcnR5KGludGVybWVkaWF0ZVZhbHVlLCBuYW1lc1tpbmRleF0pXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGludGVybWVkaWF0ZVZhbHVlID0gaW50ZXJtZWRpYXRlVmFsdWVbbmFtZXNbaW5kZXgrK11dO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnRlcm1lZGlhdGVWYWx1ZSA9IGNvbnRleHQudmlld1tuYW1lXTtcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIE9ubHkgY2hlY2tpbmcgYWdhaW5zdCBgaGFzUHJvcGVydHlgLCB3aGljaCBhbHdheXMgcmV0dXJucyBgZmFsc2VgIGlmXG4gICAgICAgICAgICogYGNvbnRleHQudmlld2AgaXMgbm90IGFuIG9iamVjdC4gRGVsaWJlcmF0ZWx5IG9taXR0aW5nIHRoZSBjaGVja1xuICAgICAgICAgICAqIGFnYWluc3QgYHByaW1pdGl2ZUhhc093blByb3BlcnR5YCBpZiBkb3Qgbm90YXRpb24gaXMgbm90IHVzZWQuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBDb25zaWRlciB0aGlzIGV4YW1wbGU6XG4gICAgICAgICAgICogYGBgXG4gICAgICAgICAgICogTXVzdGFjaGUucmVuZGVyKFwiVGhlIGxlbmd0aCBvZiBhIGZvb3RiYWxsIGZpZWxkIGlzIHt7I2xlbmd0aH19e3tsZW5ndGh9fXt7L2xlbmd0aH19LlwiLCB7bGVuZ3RoOiBcIjEwMCB5YXJkc1wifSlcbiAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIElmIHdlIHdlcmUgdG8gY2hlY2sgYWxzbyBhZ2FpbnN0IGBwcmltaXRpdmVIYXNPd25Qcm9wZXJ0eWAsIGFzIHdlIGRvXG4gICAgICAgICAgICogaW4gdGhlIGRvdCBub3RhdGlvbiBjYXNlLCB0aGVuIHJlbmRlciBjYWxsIHdvdWxkIHJldHVybjpcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFwiVGhlIGxlbmd0aCBvZiBhIGZvb3RiYWxsIGZpZWxkIGlzIDkuXCJcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIHJhdGhlciB0aGFuIHRoZSBleHBlY3RlZDpcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFwiVGhlIGxlbmd0aCBvZiBhIGZvb3RiYWxsIGZpZWxkIGlzIDEwMCB5YXJkcy5cIlxuICAgICAgICAgICAqKi9cbiAgICAgICAgICBsb29rdXBIaXQgPSBoYXNQcm9wZXJ0eShjb250ZXh0LnZpZXcsIG5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxvb2t1cEhpdCkge1xuICAgICAgICAgIHZhbHVlID0gaW50ZXJtZWRpYXRlVmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0ID0gY29udGV4dC5wYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGNhY2hlW25hbWVdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKVxuICAgICAgdmFsdWUgPSB2YWx1ZS5jYWxsKHRoaXMudmlldyk7XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEEgV3JpdGVyIGtub3dzIGhvdyB0byB0YWtlIGEgc3RyZWFtIG9mIHRva2VucyBhbmQgcmVuZGVyIHRoZW0gdG8gYVxuICAgKiBzdHJpbmcsIGdpdmVuIGEgY29udGV4dC4gSXQgYWxzbyBtYWludGFpbnMgYSBjYWNoZSBvZiB0ZW1wbGF0ZXMgdG9cbiAgICogYXZvaWQgdGhlIG5lZWQgdG8gcGFyc2UgdGhlIHNhbWUgdGVtcGxhdGUgdHdpY2UuXG4gICAqL1xuICBmdW5jdGlvbiBXcml0ZXIgKCkge1xuICAgIHRoaXMuY2FjaGUgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgYWxsIGNhY2hlZCB0ZW1wbGF0ZXMgaW4gdGhpcyB3cml0ZXIuXG4gICAqL1xuICBXcml0ZXIucHJvdG90eXBlLmNsZWFyQ2FjaGUgPSBmdW5jdGlvbiBjbGVhckNhY2hlICgpIHtcbiAgICB0aGlzLmNhY2hlID0ge307XG4gIH07XG5cbiAgLyoqXG4gICAqIFBhcnNlcyBhbmQgY2FjaGVzIHRoZSBnaXZlbiBgdGVtcGxhdGVgIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gYHRhZ3NgIG9yXG4gICAqIGBtdXN0YWNoZS50YWdzYCBpZiBgdGFnc2AgaXMgb21pdHRlZCwgIGFuZCByZXR1cm5zIHRoZSBhcnJheSBvZiB0b2tlbnNcbiAgICogdGhhdCBpcyBnZW5lcmF0ZWQgZnJvbSB0aGUgcGFyc2UuXG4gICAqL1xuICBXcml0ZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UgKHRlbXBsYXRlLCB0YWdzKSB7XG4gICAgdmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcbiAgICB2YXIgY2FjaGVLZXkgPSB0ZW1wbGF0ZSArICc6JyArICh0YWdzIHx8IG11c3RhY2hlLnRhZ3MpLmpvaW4oJzonKTtcbiAgICB2YXIgdG9rZW5zID0gY2FjaGVbY2FjaGVLZXldO1xuXG4gICAgaWYgKHRva2VucyA9PSBudWxsKVxuICAgICAgdG9rZW5zID0gY2FjaGVbY2FjaGVLZXldID0gcGFyc2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgdGFncyk7XG5cbiAgICByZXR1cm4gdG9rZW5zO1xuICB9O1xuXG4gIC8qKlxuICAgKiBIaWdoLWxldmVsIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gcmVuZGVyIHRoZSBnaXZlbiBgdGVtcGxhdGVgIHdpdGhcbiAgICogdGhlIGdpdmVuIGB2aWV3YC5cbiAgICpcbiAgICogVGhlIG9wdGlvbmFsIGBwYXJ0aWFsc2AgYXJndW1lbnQgbWF5IGJlIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZVxuICAgKiBuYW1lcyBhbmQgdGVtcGxhdGVzIG9mIHBhcnRpYWxzIHRoYXQgYXJlIHVzZWQgaW4gdGhlIHRlbXBsYXRlLiBJdCBtYXlcbiAgICogYWxzbyBiZSBhIGZ1bmN0aW9uIHRoYXQgaXMgdXNlZCB0byBsb2FkIHBhcnRpYWwgdGVtcGxhdGVzIG9uIHRoZSBmbHlcbiAgICogdGhhdCB0YWtlcyBhIHNpbmdsZSBhcmd1bWVudDogdGhlIG5hbWUgb2YgdGhlIHBhcnRpYWwuXG4gICAqXG4gICAqIElmIHRoZSBvcHRpb25hbCBgdGFnc2AgYXJndW1lbnQgaXMgZ2l2ZW4gaGVyZSBpdCBtdXN0IGJlIGFuIGFycmF5IHdpdGggdHdvXG4gICAqIHN0cmluZyB2YWx1ZXM6IHRoZSBvcGVuaW5nIGFuZCBjbG9zaW5nIHRhZ3MgdXNlZCBpbiB0aGUgdGVtcGxhdGUgKGUuZy5cbiAgICogWyBcIjwlXCIsIFwiJT5cIiBdKS4gVGhlIGRlZmF1bHQgaXMgdG8gbXVzdGFjaGUudGFncy5cbiAgICovXG4gIFdyaXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyICh0ZW1wbGF0ZSwgdmlldywgcGFydGlhbHMsIHRhZ3MpIHtcbiAgICB2YXIgdG9rZW5zID0gdGhpcy5wYXJzZSh0ZW1wbGF0ZSwgdGFncyk7XG4gICAgdmFyIGNvbnRleHQgPSAodmlldyBpbnN0YW5jZW9mIENvbnRleHQpID8gdmlldyA6IG5ldyBDb250ZXh0KHZpZXcpO1xuICAgIHJldHVybiB0aGlzLnJlbmRlclRva2Vucyh0b2tlbnMsIGNvbnRleHQsIHBhcnRpYWxzLCB0ZW1wbGF0ZSwgdGFncyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIExvdy1sZXZlbCBtZXRob2QgdGhhdCByZW5kZXJzIHRoZSBnaXZlbiBhcnJheSBvZiBgdG9rZW5zYCB1c2luZ1xuICAgKiB0aGUgZ2l2ZW4gYGNvbnRleHRgIGFuZCBgcGFydGlhbHNgLlxuICAgKlxuICAgKiBOb3RlOiBUaGUgYG9yaWdpbmFsVGVtcGxhdGVgIGlzIG9ubHkgZXZlciB1c2VkIHRvIGV4dHJhY3QgdGhlIHBvcnRpb25cbiAgICogb2YgdGhlIG9yaWdpbmFsIHRlbXBsYXRlIHRoYXQgd2FzIGNvbnRhaW5lZCBpbiBhIGhpZ2hlci1vcmRlciBzZWN0aW9uLlxuICAgKiBJZiB0aGUgdGVtcGxhdGUgZG9lc24ndCB1c2UgaGlnaGVyLW9yZGVyIHNlY3Rpb25zLCB0aGlzIGFyZ3VtZW50IG1heVxuICAgKiBiZSBvbWl0dGVkLlxuICAgKi9cbiAgV3JpdGVyLnByb3RvdHlwZS5yZW5kZXJUb2tlbnMgPSBmdW5jdGlvbiByZW5kZXJUb2tlbnMgKHRva2VucywgY29udGV4dCwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUsIHRhZ3MpIHtcbiAgICB2YXIgYnVmZmVyID0gJyc7XG5cbiAgICB2YXIgdG9rZW4sIHN5bWJvbCwgdmFsdWU7XG4gICAgZm9yICh2YXIgaSA9IDAsIG51bVRva2VucyA9IHRva2Vucy5sZW5ndGg7IGkgPCBudW1Ub2tlbnM7ICsraSkge1xuICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgIHN5bWJvbCA9IHRva2VuWzBdO1xuXG4gICAgICBpZiAoc3ltYm9sID09PSAnIycpIHZhbHVlID0gdGhpcy5yZW5kZXJTZWN0aW9uKHRva2VuLCBjb250ZXh0LCBwYXJ0aWFscywgb3JpZ2luYWxUZW1wbGF0ZSk7XG4gICAgICBlbHNlIGlmIChzeW1ib2wgPT09ICdeJykgdmFsdWUgPSB0aGlzLnJlbmRlckludmVydGVkKHRva2VuLCBjb250ZXh0LCBwYXJ0aWFscywgb3JpZ2luYWxUZW1wbGF0ZSk7XG4gICAgICBlbHNlIGlmIChzeW1ib2wgPT09ICc+JykgdmFsdWUgPSB0aGlzLnJlbmRlclBhcnRpYWwodG9rZW4sIGNvbnRleHQsIHBhcnRpYWxzLCB0YWdzKTtcbiAgICAgIGVsc2UgaWYgKHN5bWJvbCA9PT0gJyYnKSB2YWx1ZSA9IHRoaXMudW5lc2NhcGVkVmFsdWUodG9rZW4sIGNvbnRleHQpO1xuICAgICAgZWxzZSBpZiAoc3ltYm9sID09PSAnbmFtZScpIHZhbHVlID0gdGhpcy5lc2NhcGVkVmFsdWUodG9rZW4sIGNvbnRleHQpO1xuICAgICAgZWxzZSBpZiAoc3ltYm9sID09PSAndGV4dCcpIHZhbHVlID0gdGhpcy5yYXdWYWx1ZSh0b2tlbik7XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBidWZmZXIgKz0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfTtcblxuICBXcml0ZXIucHJvdG90eXBlLnJlbmRlclNlY3Rpb24gPSBmdW5jdGlvbiByZW5kZXJTZWN0aW9uICh0b2tlbiwgY29udGV4dCwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGJ1ZmZlciA9ICcnO1xuICAgIHZhciB2YWx1ZSA9IGNvbnRleHQubG9va3VwKHRva2VuWzFdKTtcblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byByZW5kZXIgYW4gYXJiaXRyYXJ5IHRlbXBsYXRlXG4gICAgLy8gaW4gdGhlIGN1cnJlbnQgY29udGV4dCBieSBoaWdoZXItb3JkZXIgc2VjdGlvbnMuXG4gICAgZnVuY3Rpb24gc3ViUmVuZGVyICh0ZW1wbGF0ZSkge1xuICAgICAgcmV0dXJuIHNlbGYucmVuZGVyKHRlbXBsYXRlLCBjb250ZXh0LCBwYXJ0aWFscyk7XG4gICAgfVxuXG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuXG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBmb3IgKHZhciBqID0gMCwgdmFsdWVMZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGogPCB2YWx1ZUxlbmd0aDsgKytqKSB7XG4gICAgICAgIGJ1ZmZlciArPSB0aGlzLnJlbmRlclRva2Vucyh0b2tlbls0XSwgY29udGV4dC5wdXNoKHZhbHVlW2pdKSwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGJ1ZmZlciArPSB0aGlzLnJlbmRlclRva2Vucyh0b2tlbls0XSwgY29udGV4dC5wdXNoKHZhbHVlKSwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3JpZ2luYWxUZW1wbGF0ZSAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHVzZSBoaWdoZXItb3JkZXIgc2VjdGlvbnMgd2l0aG91dCB0aGUgb3JpZ2luYWwgdGVtcGxhdGUnKTtcblxuICAgICAgLy8gRXh0cmFjdCB0aGUgcG9ydGlvbiBvZiB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgdGhhdCB0aGUgc2VjdGlvbiBjb250YWlucy5cbiAgICAgIHZhbHVlID0gdmFsdWUuY2FsbChjb250ZXh0LnZpZXcsIG9yaWdpbmFsVGVtcGxhdGUuc2xpY2UodG9rZW5bM10sIHRva2VuWzVdKSwgc3ViUmVuZGVyKTtcblxuICAgICAgaWYgKHZhbHVlICE9IG51bGwpXG4gICAgICAgIGJ1ZmZlciArPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmZmVyICs9IHRoaXMucmVuZGVyVG9rZW5zKHRva2VuWzRdLCBjb250ZXh0LCBwYXJ0aWFscywgb3JpZ2luYWxUZW1wbGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiBidWZmZXI7XG4gIH07XG5cbiAgV3JpdGVyLnByb3RvdHlwZS5yZW5kZXJJbnZlcnRlZCA9IGZ1bmN0aW9uIHJlbmRlckludmVydGVkICh0b2tlbiwgY29udGV4dCwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpIHtcbiAgICB2YXIgdmFsdWUgPSBjb250ZXh0Lmxvb2t1cCh0b2tlblsxXSk7XG5cbiAgICAvLyBVc2UgSmF2YVNjcmlwdCdzIGRlZmluaXRpb24gb2YgZmFsc3kuIEluY2x1ZGUgZW1wdHkgYXJyYXlzLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFubC9tdXN0YWNoZS5qcy9pc3N1ZXMvMTg2XG4gICAgaWYgKCF2YWx1ZSB8fCAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKSlcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlclRva2Vucyh0b2tlbls0XSwgY29udGV4dCwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpO1xuICB9O1xuXG4gIFdyaXRlci5wcm90b3R5cGUucmVuZGVyUGFydGlhbCA9IGZ1bmN0aW9uIHJlbmRlclBhcnRpYWwgKHRva2VuLCBjb250ZXh0LCBwYXJ0aWFscywgdGFncykge1xuICAgIGlmICghcGFydGlhbHMpIHJldHVybjtcblxuICAgIHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24ocGFydGlhbHMpID8gcGFydGlhbHModG9rZW5bMV0pIDogcGFydGlhbHNbdG9rZW5bMV1dO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKVxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyVG9rZW5zKHRoaXMucGFyc2UodmFsdWUsIHRhZ3MpLCBjb250ZXh0LCBwYXJ0aWFscywgdmFsdWUpO1xuICB9O1xuXG4gIFdyaXRlci5wcm90b3R5cGUudW5lc2NhcGVkVmFsdWUgPSBmdW5jdGlvbiB1bmVzY2FwZWRWYWx1ZSAodG9rZW4sIGNvbnRleHQpIHtcbiAgICB2YXIgdmFsdWUgPSBjb250ZXh0Lmxvb2t1cCh0b2tlblsxXSk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpXG4gICAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgV3JpdGVyLnByb3RvdHlwZS5lc2NhcGVkVmFsdWUgPSBmdW5jdGlvbiBlc2NhcGVkVmFsdWUgKHRva2VuLCBjb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlID0gY29udGV4dC5sb29rdXAodG9rZW5bMV0pO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKVxuICAgICAgcmV0dXJuIG11c3RhY2hlLmVzY2FwZSh2YWx1ZSk7XG4gIH07XG5cbiAgV3JpdGVyLnByb3RvdHlwZS5yYXdWYWx1ZSA9IGZ1bmN0aW9uIHJhd1ZhbHVlICh0b2tlbikge1xuICAgIHJldHVybiB0b2tlblsxXTtcbiAgfTtcblxuICBtdXN0YWNoZS5uYW1lID0gJ211c3RhY2hlLmpzJztcbiAgbXVzdGFjaGUudmVyc2lvbiA9ICczLjAuMSc7XG4gIG11c3RhY2hlLnRhZ3MgPSBbICd7eycsICd9fScgXTtcblxuICAvLyBBbGwgaGlnaC1sZXZlbCBtdXN0YWNoZS4qIGZ1bmN0aW9ucyB1c2UgdGhpcyB3cml0ZXIuXG4gIHZhciBkZWZhdWx0V3JpdGVyID0gbmV3IFdyaXRlcigpO1xuXG4gIC8qKlxuICAgKiBDbGVhcnMgYWxsIGNhY2hlZCB0ZW1wbGF0ZXMgaW4gdGhlIGRlZmF1bHQgd3JpdGVyLlxuICAgKi9cbiAgbXVzdGFjaGUuY2xlYXJDYWNoZSA9IGZ1bmN0aW9uIGNsZWFyQ2FjaGUgKCkge1xuICAgIHJldHVybiBkZWZhdWx0V3JpdGVyLmNsZWFyQ2FjaGUoKTtcbiAgfTtcblxuICAvKipcbiAgICogUGFyc2VzIGFuZCBjYWNoZXMgdGhlIGdpdmVuIHRlbXBsYXRlIGluIHRoZSBkZWZhdWx0IHdyaXRlciBhbmQgcmV0dXJucyB0aGVcbiAgICogYXJyYXkgb2YgdG9rZW5zIGl0IGNvbnRhaW5zLiBEb2luZyB0aGlzIGFoZWFkIG9mIHRpbWUgYXZvaWRzIHRoZSBuZWVkIHRvXG4gICAqIHBhcnNlIHRlbXBsYXRlcyBvbiB0aGUgZmx5IGFzIHRoZXkgYXJlIHJlbmRlcmVkLlxuICAgKi9cbiAgbXVzdGFjaGUucGFyc2UgPSBmdW5jdGlvbiBwYXJzZSAodGVtcGxhdGUsIHRhZ3MpIHtcbiAgICByZXR1cm4gZGVmYXVsdFdyaXRlci5wYXJzZSh0ZW1wbGF0ZSwgdGFncyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGB0ZW1wbGF0ZWAgd2l0aCB0aGUgZ2l2ZW4gYHZpZXdgIGFuZCBgcGFydGlhbHNgIHVzaW5nIHRoZVxuICAgKiBkZWZhdWx0IHdyaXRlci4gSWYgdGhlIG9wdGlvbmFsIGB0YWdzYCBhcmd1bWVudCBpcyBnaXZlbiBoZXJlIGl0IG11c3QgYmUgYW5cbiAgICogYXJyYXkgd2l0aCB0d28gc3RyaW5nIHZhbHVlczogdGhlIG9wZW5pbmcgYW5kIGNsb3NpbmcgdGFncyB1c2VkIGluIHRoZVxuICAgKiB0ZW1wbGF0ZSAoZS5nLiBbIFwiPCVcIiwgXCIlPlwiIF0pLiBUaGUgZGVmYXVsdCBpcyB0byBtdXN0YWNoZS50YWdzLlxuICAgKi9cbiAgbXVzdGFjaGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyICh0ZW1wbGF0ZSwgdmlldywgcGFydGlhbHMsIHRhZ3MpIHtcbiAgICBpZiAodHlwZW9mIHRlbXBsYXRlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCB0ZW1wbGF0ZSEgVGVtcGxhdGUgc2hvdWxkIGJlIGEgXCJzdHJpbmdcIiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2J1dCBcIicgKyB0eXBlU3RyKHRlbXBsYXRlKSArICdcIiB3YXMgZ2l2ZW4gYXMgdGhlIGZpcnN0ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYXJndW1lbnQgZm9yIG11c3RhY2hlI3JlbmRlcih0ZW1wbGF0ZSwgdmlldywgcGFydGlhbHMpJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmF1bHRXcml0ZXIucmVuZGVyKHRlbXBsYXRlLCB2aWV3LCBwYXJ0aWFscywgdGFncyk7XG4gIH07XG5cbiAgLy8gVGhpcyBpcyBoZXJlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIDAuNC54LixcbiAgLyplc2xpbnQtZGlzYWJsZSAqLyAvLyBlc2xpbnQgd2FudHMgY2FtZWwgY2FzZWQgZnVuY3Rpb24gbmFtZVxuICBtdXN0YWNoZS50b19odG1sID0gZnVuY3Rpb24gdG9faHRtbCAodGVtcGxhdGUsIHZpZXcsIHBhcnRpYWxzLCBzZW5kKSB7XG4gICAgLyplc2xpbnQtZW5hYmxlKi9cblxuICAgIHZhciByZXN1bHQgPSBtdXN0YWNoZS5yZW5kZXIodGVtcGxhdGUsIHZpZXcsIHBhcnRpYWxzKTtcblxuICAgIGlmIChpc0Z1bmN0aW9uKHNlbmQpKSB7XG4gICAgICBzZW5kKHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xuXG4gIC8vIEV4cG9ydCB0aGUgZXNjYXBpbmcgZnVuY3Rpb24gc28gdGhhdCB0aGUgdXNlciBtYXkgb3ZlcnJpZGUgaXQuXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFubC9tdXN0YWNoZS5qcy9pc3N1ZXMvMjQ0XG4gIG11c3RhY2hlLmVzY2FwZSA9IGVzY2FwZUh0bWw7XG5cbiAgLy8gRXhwb3J0IHRoZXNlIG1haW5seSBmb3IgdGVzdGluZywgYnV0IGFsc28gZm9yIGFkdmFuY2VkIHVzYWdlLlxuICBtdXN0YWNoZS5TY2FubmVyID0gU2Nhbm5lcjtcbiAgbXVzdGFjaGUuQ29udGV4dCA9IENvbnRleHQ7XG4gIG11c3RhY2hlLldyaXRlciA9IFdyaXRlcjtcblxuICByZXR1cm4gbXVzdGFjaGU7XG59KSk7XG4iLCJNdXN0YWNoZSA9IHJlcXVpcmUgJ211c3RhY2hlJ1xucGFpcnMgPVxuICAgICdwYWdlZF9wdWJsaWNhdGlvbi5ob3RzcG90X3BpY2tlci5oZWFkZXInOiAnV2hpY2ggb2ZmZXIgZGlkIHlvdSBtZWFuPydcbiAgICAnaW5jaXRvX3B1YmxpY2F0aW9uLnByb2R1Y3RfcGlja2VyLmhlYWRlcic6ICdXaGljaCBwcm9kdWN0PydcblxubW9kdWxlLmV4cG9ydHMgPVxuICAgIHQ6IChrZXksIHZpZXcpIC0+XG4gICAgICAgIHRlbXBsYXRlID0gcGFpcnNba2V5XSA/ICcnXG5cbiAgICAgICAgTXVzdGFjaGUucmVuZGVyIHRlbXBsYXRlLCB2aWV3XG5cbiAgICB1cGRhdGU6ICh0cmFuc2xhdGlvbnMpIC0+XG4gICAgICAgIGZvciBrZXksIHZhbHVlIG9mIHRyYW5zbGF0aW9uc1xuICAgICAgICAgICAgcGFpcnNba2V5XSA9IHZhbHVlXG5cbiAgICAgICAgcmV0dXJuXG4iLCJDb25maWcgPSByZXF1aXJlICcuL2NvbmZpZydcbnRyYW5zbGF0aW9ucyA9IHJlcXVpcmUgJy4vdHJhbnNsYXRpb25zJ1xudXRpbCA9IHJlcXVpcmUgJy4vdXRpbCdcbmNvbmZpZyA9IG5ldyBDb25maWcoKVxuXG4jIFNldCBkZWZhdWx0IHZhbHVlcy5cbmNvbmZpZy5zZXRcbiAgICBsb2NhbGU6ICdlbl9VUydcbiAgICBjb3JlVXJsOiAnaHR0cHM6Ly9hcGkuZXRpbGJ1ZHNhdmlzLmRrJ1xuICAgIGdyYXBoVXJsOiAnaHR0cHM6Ly9ncmFwaC5zZXJ2aWNlLnNob3BndW4uY29tJ1xuICAgIGV2ZW50c1RyYWNrVXJsOiAnaHR0cHM6Ly9ldmVudHMuc2VydmljZS5zaG9wZ3VuLmNvbS9zeW5jJ1xuICAgIGV2ZW50c1B1bHNlVXJsOiAnd3NzOi8vZXZlbnRzLnNlcnZpY2Uuc2hvcGd1bi5jb20vcHVsc2UnXG4gICAgYXNzZXRzRmlsZVVwbG9hZFVybDogJ2h0dHBzOi8vYXNzZXRzLnNlcnZpY2Uuc2hvcGd1bi5jb20vdXBsb2FkJ1xuXG5tb2R1bGUuZXhwb3J0cyA9XG4gICAgY29uZmlnOiBjb25maWdcblxuICAgIHRyYW5zbGF0aW9uczogdHJhbnNsYXRpb25zXG5cbiAgICB1dGlsOiB1dGlsIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlICcuL2NvcmUnXG4iLCJTR04gPSByZXF1aXJlICcuLi9zZ24nXG5wcmVmaXhLZXkgPSAnc2duLSdcblxubW9kdWxlLmV4cG9ydHMgPVxuICAgIGtleTogJ3Nnbi0nXG5cbiAgICBzdG9yYWdlOiBkbyAtPlxuICAgICAgICB0cnlcbiAgICAgICAgICAgIHN0b3JhZ2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlXG5cbiAgICAgICAgICAgIHN0b3JhZ2VbXCIje3ByZWZpeEtleX10ZXN0LXN0b3JhZ2VcIl0gPSAnZm9vYmFyJ1xuICAgICAgICAgICAgZGVsZXRlIHN0b3JhZ2VbXCIje3ByZWZpeEtleX10ZXN0LXN0b3JhZ2VcIl1cblxuICAgICAgICAgICAgc3RvcmFnZVxuICAgICAgICBjYXRjaFxuICAgICAgICAgICAge31cblxuICAgIGdldDogKGtleSkgLT5cbiAgICAgICAgdHJ5XG4gICAgICAgICAgICBKU09OLnBhcnNlIEBzdG9yYWdlW1wiI3twcmVmaXhLZXl9I3trZXl9XCJdXG5cbiAgICBzZXQ6IChrZXksIHZhbHVlKSAtPlxuICAgICAgICB0cnlcbiAgICAgICAgICAgIEBzdG9yYWdlW1wiI3twcmVmaXhLZXl9I3trZXl9XCJdID0gSlNPTi5zdHJpbmdpZnkgdmFsdWVcblxuICAgICAgICBAXG4iLCJTR04gPSByZXF1aXJlICcuLi9zZ24nXG5wcmVmaXhLZXkgPSAnc2duLSdcblxubW9kdWxlLmV4cG9ydHMgPVxuICAgIGtleTogJ3Nnbi0nXG5cbiAgICBzdG9yYWdlOiBkbyAtPlxuICAgICAgICB0cnlcbiAgICAgICAgICAgIHN0b3JhZ2UgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2VcblxuICAgICAgICAgICAgc3RvcmFnZVtcIiN7cHJlZml4S2V5fXRlc3Qtc3RvcmFnZVwiXSA9ICdmb29iYXInXG4gICAgICAgICAgICBkZWxldGUgc3RvcmFnZVtcIiN7cHJlZml4S2V5fXRlc3Qtc3RvcmFnZVwiXVxuXG4gICAgICAgICAgICBzdG9yYWdlXG4gICAgICAgIGNhdGNoXG4gICAgICAgICAgICB7fVxuXG4gICAgZ2V0OiAoa2V5KSAtPlxuICAgICAgICB0cnlcbiAgICAgICAgICAgIEpTT04ucGFyc2UgQHN0b3JhZ2VbXCIje3ByZWZpeEtleX0je2tleX1cIl1cblxuICAgIHNldDogKGtleSwgdmFsdWUpIC0+XG4gICAgICAgIHRyeVxuICAgICAgICAgICAgQHN0b3JhZ2VbXCIje3ByZWZpeEtleX0je2tleX1cIl0gPSBKU09OLnN0cmluZ2lmeSB2YWx1ZVxuXG4gICAgICAgIEBcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnZhciAkbWluID0gTWF0aC5taW47XG52YXIgJHB1c2ggPSBbXS5wdXNoO1xudmFyICRTUExJVCA9ICdzcGxpdCc7XG52YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbnZhciBTVVBQT1JUU19ZID0gISEoZnVuY3Rpb24gKCkgeyB0cnkgeyByZXR1cm4gbmV3IFJlZ0V4cCgneCcsICd5Jyk7IH0gY2F0Y2ggKGUpIHt9IH0pKCk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0ID0gJHNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuICRzcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gNDI5NDk2NzI5NSA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6ICRzcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gJHNwbGl0KTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAoU1VQUE9SVFNfWSA/ICd5JyA6ICdnJyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhTVVBQT1JUU19ZID8gcnggOiAnXig/OicgKyByeC5zb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gMHhmZmZmZmZmZiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBTVVBQT1JUU19ZID8gcSA6IDA7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFNVUFBPUlRTX1kgPyBTIDogUy5zbGljZShxKSk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gJG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEEucHVzaChTLnNsaWNlKHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIEEucHVzaCh6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBBLnB1c2goUy5zbGljZShwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIlNHTiA9IHJlcXVpcmUgJy4uL3NnbidcbnByZWZpeEtleSA9ICdzZ24tJ1xuXG5tb2R1bGUuZXhwb3J0cyA9XG4gICAgZ2V0OiAoa2V5KSAtPlxuICAgICAgICByZXR1cm4gaWYgU0dOLnV0aWwuaXNOb2RlKClcblxuICAgICAgICB0cnlcbiAgICAgICAgICAgIG5hbWUgPSBcIiN7cHJlZml4S2V5fSN7a2V5fT1cIlxuICAgICAgICAgICAgY2EgPSBkb2N1bWVudC5jb29raWUuc3BsaXQgJzsnXG5cbiAgICAgICAgICAgIGZvciBjIGluIGNhXG4gICAgICAgICAgICAgICAgY3QgPSBjLnRyaW0oKVxuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBjdC5zdWJzdHJpbmcobmFtZS5sZW5ndGgsIGN0Lmxlbmd0aCkgaWYgY3QuaW5kZXhPZihuYW1lKSBpcyAwXG5cbiAgICAgICAgICAgIHZhbHVlID0gSlNPTi5wYXJzZSB2YWx1ZVxuICAgICAgICBjYXRjaCBlcnJcbiAgICAgICAgICAgIHZhbHVlID0ge31cblxuICAgICAgICB2YWx1ZVxuXG4gICAgc2V0OiAoa2V5LCB2YWx1ZSkgLT5cbiAgICAgICAgcmV0dXJuIGlmIFNHTi51dGlsLmlzTm9kZSgpXG5cbiAgICAgICAgdHJ5XG4gICAgICAgICAgICBkYXlzID0gMzY1XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoKVxuICAgICAgICAgICAgc3RyID0gSlNPTi5zdHJpbmdpZnkgdmFsdWVcblxuICAgICAgICAgICAgZGF0ZS5zZXRUaW1lIGRhdGUuZ2V0VGltZSgpICsgZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDBcblxuICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gXCIje3ByZWZpeEtleX0je2tleX09I3tzdHJ9O2V4cGlyZXM9I3tkYXRlLnRvVVRDU3RyaW5nKCl9O3BhdGg9L1wiXG4gICAgICAgIGNhdGNoIGVyclxuXG4gICAgICAgIHJldHVyblxuXG5cbiIsIlNHTiA9IHJlcXVpcmUgJy4uLy4uL3NnbidcblxubW9kdWxlLmV4cG9ydHMgPSAob3B0aW9ucyA9IHt9LCBjYWxsYmFjaywgcHJvZ3Jlc3NDYWxsYmFjaykgLT5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpbGUgaXMgbm90IGRlZmluZWQnKSBpZiBub3Qgb3B0aW9ucy5maWxlP1xuXG4gICAgdXJsID0gU0dOLmNvbmZpZy5nZXQgJ2Fzc2V0c0ZpbGVVcGxvYWRVcmwnXG4gICAgdGltZW91dCA9IDEwMDAgKiA2MCAqIDYwXG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKVxuICAgIGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZm9ybURhdGEuYXBwZW5kICdmaWxlJywgb3B0aW9ucy5maWxlXG5cbiAgICBodHRwLm9ubG9hZCA9IC0+XG4gICAgICAgIGlmIGh0dHAuc3RhdHVzIGlzIDIwMFxuICAgICAgICAgICAgY2FsbGJhY2sgbnVsbCwgSlNPTi5wYXJzZShodHRwLnJlc3BvbnNlKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjYWxsYmFjayBTR04udXRpbC5lcnJvcihuZXcgRXJyb3IoJ1JlcXVlc3QgZXJyb3InKSxcbiAgICAgICAgICAgICAgICBjb2RlOiAnUmVxdWVzdEVycm9yJ1xuICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6IGRhdGEuc3RhdHVzQ29kZVxuICAgICAgICAgICAgKVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuXG4gICAgaHR0cC51cGxvYWQub25wcm9ncmVzcyA9IChlKSAtPlxuICAgICAgICBpZiB0eXBlb2YgcHJvZ3Jlc3NDYWxsYmFjayBpcyAnZnVuY3Rpb24nIGFuZCBlLmxlbmd0aENvbXB1dGFibGVcbiAgICAgICAgICAgIHByb2dyZXNzQ2FsbGJhY2tcbiAgICAgICAgICAgICAgICBwcm9ncmVzczogZS5sb2FkZWQgLyBlLnRvdGFsXG4gICAgICAgICAgICAgICAgbG9hZGVkOiBlLmxvYWRlZFxuICAgICAgICAgICAgICAgIHRvdGFsOiBlLnRvdGFsXG4gICAgICAgIFxuICAgICAgICByZXR1cm5cbiAgICBodHRwLm9wZW4gJ3Bvc3QnLCB1cmxcbiAgICBodHRwLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgaHR0cC5zZXRSZXF1ZXN0SGVhZGVyICdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbidcbiAgICBodHRwLnNlbmQgZm9ybURhdGFcblxuICAgIHJldHVybiIsIm1vZHVsZS5leHBvcnRzID1cbiAgICBmaWxlVXBsb2FkOiByZXF1aXJlICcuL2ZpbGUtdXBsb2FkJ1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsInZhciBfX3Jvb3RfXyA9IChmdW5jdGlvbiAocm9vdCkge1xuZnVuY3Rpb24gRigpIHsgdGhpcy5mZXRjaCA9IGZhbHNlOyB9XG5GLnByb3RvdHlwZSA9IHJvb3Q7XG5yZXR1cm4gbmV3IEYoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzKTtcbihmdW5jdGlvbihzZWxmKSB7XG5cbnZhciBpcnJlbGV2YW50ID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIHZhciBzdXBwb3J0ID0ge1xuICAgIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcbiAgICBpdGVyYWJsZTogJ1N5bWJvbCcgaW4gc2VsZiAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgICBibG9iOlxuICAgICAgJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiZcbiAgICAgICdCbG9iJyBpbiBzZWxmICYmXG4gICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbmV3IEJsb2IoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0pKCksXG4gICAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gc2VsZixcbiAgICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXG4gIH07XG5cbiAgZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbiAgfVxuXG4gIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gICAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gICAgXTtcblxuICAgIHZhciBpc0FycmF5QnVmZmVyVmlldyA9XG4gICAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgfHxcbiAgICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICYmIHZpZXdDbGFzc2VzLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikpID4gLTFcbiAgICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gU3RyaW5nKG5hbWUpO1xuICAgIH1cbiAgICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5eX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gICAgfVxuICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICAvLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuICBmdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpO1xuICAgICAgICByZXR1cm4ge2RvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBpdGVyYXRvclxuICB9XG5cbiAgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gICAgdGhpcy5tYXAgPSB7fTtcblxuICAgIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSk7XG4gICAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgdmFyIG9sZFZhbHVlID0gdGhpcy5tYXBbbmFtZV07XG4gICAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlICsgJywgJyArIHZhbHVlIDogdmFsdWU7XG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXTtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSk7XG4gICAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgICAgaWYgKHRoaXMubWFwLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5tYXBbbmFtZV0sIG5hbWUsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICBpdGVtcy5wdXNoKG5hbWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGl0ZW1zLnB1c2godmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xuICAgIH0pO1xuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfTtcblxuICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICAgIGlmIChib2R5LmJvZHlVc2VkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gICAgfVxuICAgIGJvZHkuYm9keVVzZWQgPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KTtcbiAgICAgIH07XG4gICAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QocmVhZGVyLmVycm9yKTtcbiAgICAgIH07XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKTtcbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYik7XG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpO1xuICAgIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpO1xuICAgIHJldHVybiBwcm9taXNlXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpO1xuICAgIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG4gIH1cblxuICBmdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpO1xuICAgICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSk7XG4gICAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBCb2R5KCkge1xuICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgICAgdGhpcy5fYm9keUluaXQgPSBib2R5O1xuICAgICAgaWYgKCFib2R5KSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJyc7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHk7XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keTtcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5O1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keS5idWZmZXIpO1xuICAgICAgICAvLyBJRSAxMC0xMSBjYW4ndCBoYW5kbGUgYSBEYXRhVmlldyBib2R5LlxuICAgICAgICB0aGlzLl9ib2R5SW5pdCA9IG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKTtcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5ID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGJvZHkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKTtcbiAgICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKTtcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxuICB2YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXTtcblxuICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gICAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICByZXR1cm4gbWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEgPyB1cGNhc2VkIDogbWV0aG9kXG4gIH1cblxuICBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHk7XG5cbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICAgIH1cbiAgICAgIHRoaXMudXJsID0gaW5wdXQudXJsO1xuICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzO1xuICAgICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycyk7XG4gICAgICB9XG4gICAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZDtcbiAgICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGU7XG4gICAgICB0aGlzLnNpZ25hbCA9IGlucHV0LnNpZ25hbDtcbiAgICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0O1xuICAgICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KTtcbiAgICB9XG5cbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbic7XG4gICAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpO1xuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJyk7XG4gICAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsO1xuICAgIHRoaXMuc2lnbmFsID0gb3B0aW9ucy5zaWduYWwgfHwgdGhpcy5zaWduYWw7XG4gICAgdGhpcy5yZWZlcnJlciA9IG51bGw7XG5cbiAgICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gICAgfVxuICAgIHRoaXMuX2luaXRCb2R5KGJvZHkpO1xuICB9XG5cbiAgUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywge2JvZHk6IHRoaXMuX2JvZHlJbml0fSlcbiAgfTtcblxuICBmdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgYm9keVxuICAgICAgLnRyaW0oKVxuICAgICAgLnNwbGl0KCcmJylcbiAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICAgIGlmIChieXRlcykge1xuICAgICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKTtcbiAgICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICByZXR1cm4gZm9ybVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG4gICAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMwI3NlY3Rpb24tMy4yXG4gICAgdmFyIHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJyk7XG4gICAgcHJlUHJvY2Vzc2VkSGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpO1xuICAgICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpO1xuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpO1xuICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaGVhZGVyc1xuICB9XG5cbiAgQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKTtcblxuICBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHRoaXMudHlwZSA9ICdkZWZhdWx0JztcbiAgICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1cztcbiAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwO1xuICAgIHRoaXMuc3RhdHVzVGV4dCA9ICdzdGF0dXNUZXh0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXNUZXh0IDogJ09LJztcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpO1xuICAgIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJyc7XG4gICAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpO1xuICB9XG5cbiAgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSk7XG5cbiAgUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgICB1cmw6IHRoaXMudXJsXG4gICAgfSlcbiAgfTtcblxuICBSZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pO1xuICAgIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InO1xuICAgIHJldHVybiByZXNwb25zZVxuICB9O1xuXG4gIHZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XTtcblxuICBSZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxuICB9O1xuXG4gIGV4cG9ydHMuRE9NRXhjZXB0aW9uID0gc2VsZi5ET01FeGNlcHRpb247XG4gIHRyeSB7XG4gICAgbmV3IGV4cG9ydHMuRE9NRXhjZXB0aW9uKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGV4cG9ydHMuRE9NRXhjZXB0aW9uID0gZnVuY3Rpb24obWVzc2FnZSwgbmFtZSkge1xuICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICB2YXIgZXJyb3IgPSBFcnJvcihtZXNzYWdlKTtcbiAgICAgIHRoaXMuc3RhY2sgPSBlcnJvci5zdGFjaztcbiAgICB9O1xuICAgIGV4cG9ydHMuRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICBleHBvcnRzLkRPTUV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBleHBvcnRzLkRPTUV4Y2VwdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZldGNoKGlucHV0LCBpbml0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdCk7XG5cbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3QobmV3IGV4cG9ydHMuRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICAgIH1cblxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICBmdW5jdGlvbiBhYm9ydFhocigpIHtcbiAgICAgICAgeGhyLmFib3J0KCk7XG4gICAgICB9XG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICAgIH07XG4gICAgICAgIG9wdGlvbnMudXJsID0gJ3Jlc3BvbnNlVVJMJyBpbiB4aHIgPyB4aHIucmVzcG9uc2VVUkwgOiBvcHRpb25zLmhlYWRlcnMuZ2V0KCdYLVJlcXVlc3QtVVJMJyk7XG4gICAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSk7XG4gICAgICB9O1xuXG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSk7XG4gICAgICB9O1xuXG4gICAgICB4aHIub25hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IGV4cG9ydHMuRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSk7XG4gICAgICB9O1xuXG4gICAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpO1xuXG4gICAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnb21pdCcpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InO1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsKSB7XG4gICAgICAgIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpO1xuXG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAvLyBET05FIChzdWNjZXNzIG9yIGZhaWx1cmUpXG4gICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpO1xuICAgIH0pXG4gIH1cblxuICBmZXRjaC5wb2x5ZmlsbCA9IHRydWU7XG5cbiAgaWYgKCFzZWxmLmZldGNoKSB7XG4gICAgc2VsZi5mZXRjaCA9IGZldGNoO1xuICAgIHNlbGYuSGVhZGVycyA9IEhlYWRlcnM7XG4gICAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdDtcbiAgICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2U7XG4gIH1cblxuICBleHBvcnRzLkhlYWRlcnMgPSBIZWFkZXJzO1xuICBleHBvcnRzLlJlcXVlc3QgPSBSZXF1ZXN0O1xuICBleHBvcnRzLlJlc3BvbnNlID0gUmVzcG9uc2U7XG4gIGV4cG9ydHMuZmV0Y2ggPSBmZXRjaDtcblxuICByZXR1cm4gZXhwb3J0cztcblxufSh7fSkpO1xufSkoX19yb290X18pO1xuZGVsZXRlIF9fcm9vdF9fLmZldGNoLnBvbHlmaWxsXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBfX3Jvb3RfXy5mZXRjaFxuZXhwb3J0cy5mZXRjaCA9IF9fcm9vdF9fLmZldGNoXG5leHBvcnRzLkhlYWRlcnMgPSBfX3Jvb3RfXy5IZWFkZXJzXG5leHBvcnRzLlJlcXVlc3QgPSBfX3Jvb3RfXy5SZXF1ZXN0XG5leHBvcnRzLlJlc3BvbnNlID0gX19yb290X18uUmVzcG9uc2Vcbi8vIE5lZWRlZCBmb3IgVHlwZVNjcmlwdCBjb25zdW1lcnMgd2l0aG91dCBlc01vZHVsZUludGVyb3AuXG5leHBvcnRzLmRlZmF1bHQgPSBfX3Jvb3RfXy5mZXRjaFxuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgYmFzZTY0bWFwXG4gICAgICA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJyxcblxuICBjcnlwdCA9IHtcbiAgICAvLyBCaXQtd2lzZSByb3RhdGlvbiBsZWZ0XG4gICAgcm90bDogZnVuY3Rpb24obiwgYikge1xuICAgICAgcmV0dXJuIChuIDw8IGIpIHwgKG4gPj4+ICgzMiAtIGIpKTtcbiAgICB9LFxuXG4gICAgLy8gQml0LXdpc2Ugcm90YXRpb24gcmlnaHRcbiAgICByb3RyOiBmdW5jdGlvbihuLCBiKSB7XG4gICAgICByZXR1cm4gKG4gPDwgKDMyIC0gYikpIHwgKG4gPj4+IGIpO1xuICAgIH0sXG5cbiAgICAvLyBTd2FwIGJpZy1lbmRpYW4gdG8gbGl0dGxlLWVuZGlhbiBhbmQgdmljZSB2ZXJzYVxuICAgIGVuZGlhbjogZnVuY3Rpb24obikge1xuICAgICAgLy8gSWYgbnVtYmVyIGdpdmVuLCBzd2FwIGVuZGlhblxuICAgICAgaWYgKG4uY29uc3RydWN0b3IgPT0gTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBjcnlwdC5yb3RsKG4sIDgpICYgMHgwMEZGMDBGRiB8IGNyeXB0LnJvdGwobiwgMjQpICYgMHhGRjAwRkYwMDtcbiAgICAgIH1cblxuICAgICAgLy8gRWxzZSwgYXNzdW1lIGFycmF5IGFuZCBzd2FwIGFsbCBpdGVtc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuLmxlbmd0aDsgaSsrKVxuICAgICAgICBuW2ldID0gY3J5cHQuZW5kaWFuKG5baV0pO1xuICAgICAgcmV0dXJuIG47XG4gICAgfSxcblxuICAgIC8vIEdlbmVyYXRlIGFuIGFycmF5IG9mIGFueSBsZW5ndGggb2YgcmFuZG9tIGJ5dGVzXG4gICAgcmFuZG9tQnl0ZXM6IGZ1bmN0aW9uKG4pIHtcbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW107IG4gPiAwOyBuLS0pXG4gICAgICAgIGJ5dGVzLnB1c2goTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KSk7XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBieXRlIGFycmF5IHRvIGJpZy1lbmRpYW4gMzItYml0IHdvcmRzXG4gICAgYnl0ZXNUb1dvcmRzOiBmdW5jdGlvbihieXRlcykge1xuICAgICAgZm9yICh2YXIgd29yZHMgPSBbXSwgaSA9IDAsIGIgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyssIGIgKz0gOClcbiAgICAgICAgd29yZHNbYiA+Pj4gNV0gfD0gYnl0ZXNbaV0gPDwgKDI0IC0gYiAlIDMyKTtcbiAgICAgIHJldHVybiB3b3JkcztcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBiaWctZW5kaWFuIDMyLWJpdCB3b3JkcyB0byBhIGJ5dGUgYXJyYXlcbiAgICB3b3Jkc1RvQnl0ZXM6IGZ1bmN0aW9uKHdvcmRzKSB7XG4gICAgICBmb3IgKHZhciBieXRlcyA9IFtdLCBiID0gMDsgYiA8IHdvcmRzLmxlbmd0aCAqIDMyOyBiICs9IDgpXG4gICAgICAgIGJ5dGVzLnB1c2goKHdvcmRzW2IgPj4+IDVdID4+PiAoMjQgLSBiICUgMzIpKSAmIDB4RkYpO1xuICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBhIGhleCBzdHJpbmdcbiAgICBieXRlc1RvSGV4OiBmdW5jdGlvbihieXRlcykge1xuICAgICAgZm9yICh2YXIgaGV4ID0gW10sIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaGV4LnB1c2goKGJ5dGVzW2ldID4+PiA0KS50b1N0cmluZygxNikpO1xuICAgICAgICBoZXgucHVzaCgoYnl0ZXNbaV0gJiAweEYpLnRvU3RyaW5nKDE2KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGV4LmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgaGV4IHN0cmluZyB0byBhIGJ5dGUgYXJyYXlcbiAgICBoZXhUb0J5dGVzOiBmdW5jdGlvbihoZXgpIHtcbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW10sIGMgPSAwOyBjIDwgaGV4Lmxlbmd0aDsgYyArPSAyKVxuICAgICAgICBieXRlcy5wdXNoKHBhcnNlSW50KGhleC5zdWJzdHIoYywgMiksIDE2KSk7XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBieXRlIGFycmF5IHRvIGEgYmFzZS02NCBzdHJpbmdcbiAgICBieXRlc1RvQmFzZTY0OiBmdW5jdGlvbihieXRlcykge1xuICAgICAgZm9yICh2YXIgYmFzZTY0ID0gW10sIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdmFyIHRyaXBsZXQgPSAoYnl0ZXNbaV0gPDwgMTYpIHwgKGJ5dGVzW2kgKyAxXSA8PCA4KSB8IGJ5dGVzW2kgKyAyXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA0OyBqKyspXG4gICAgICAgICAgaWYgKGkgKiA4ICsgaiAqIDYgPD0gYnl0ZXMubGVuZ3RoICogOClcbiAgICAgICAgICAgIGJhc2U2NC5wdXNoKGJhc2U2NG1hcC5jaGFyQXQoKHRyaXBsZXQgPj4+IDYgKiAoMyAtIGopKSAmIDB4M0YpKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBiYXNlNjQucHVzaCgnPScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2U2NC5qb2luKCcnKTtcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGJhc2UtNjQgc3RyaW5nIHRvIGEgYnl0ZSBhcnJheVxuICAgIGJhc2U2NFRvQnl0ZXM6IGZ1bmN0aW9uKGJhc2U2NCkge1xuICAgICAgLy8gUmVtb3ZlIG5vbi1iYXNlLTY0IGNoYXJhY3RlcnNcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5yZXBsYWNlKC9bXkEtWjAtOStcXC9dL2lnLCAnJyk7XG5cbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW10sIGkgPSAwLCBpbW9kNCA9IDA7IGkgPCBiYXNlNjQubGVuZ3RoO1xuICAgICAgICAgIGltb2Q0ID0gKytpICUgNCkge1xuICAgICAgICBpZiAoaW1vZDQgPT0gMCkgY29udGludWU7XG4gICAgICAgIGJ5dGVzLnB1c2goKChiYXNlNjRtYXAuaW5kZXhPZihiYXNlNjQuY2hhckF0KGkgLSAxKSlcbiAgICAgICAgICAgICYgKE1hdGgucG93KDIsIC0yICogaW1vZDQgKyA4KSAtIDEpKSA8PCAoaW1vZDQgKiAyKSlcbiAgICAgICAgICAgIHwgKGJhc2U2NG1hcC5pbmRleE9mKGJhc2U2NC5jaGFyQXQoaSkpID4+PiAoNiAtIGltb2Q0ICogMikpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBieXRlcztcbiAgICB9XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBjcnlwdDtcbn0pKCk7XG4iLCJ2YXIgY2hhcmVuYyA9IHtcbiAgLy8gVVRGLTggZW5jb2RpbmdcbiAgdXRmODoge1xuICAgIC8vIENvbnZlcnQgYSBzdHJpbmcgdG8gYSBieXRlIGFycmF5XG4gICAgc3RyaW5nVG9CeXRlczogZnVuY3Rpb24oc3RyKSB7XG4gICAgICByZXR1cm4gY2hhcmVuYy5iaW4uc3RyaW5nVG9CeXRlcyh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSkpO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBhIHN0cmluZ1xuICAgIGJ5dGVzVG9TdHJpbmc6IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShjaGFyZW5jLmJpbi5ieXRlc1RvU3RyaW5nKGJ5dGVzKSkpO1xuICAgIH1cbiAgfSxcblxuICAvLyBCaW5hcnkgZW5jb2RpbmdcbiAgYmluOiB7XG4gICAgLy8gQ29udmVydCBhIHN0cmluZyB0byBhIGJ5dGUgYXJyYXlcbiAgICBzdHJpbmdUb0J5dGVzOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW10sIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKVxuICAgICAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRik7XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBieXRlIGFycmF5IHRvIGEgc3RyaW5nXG4gICAgYnl0ZXNUb1N0cmluZzogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGZvciAodmFyIHN0ciA9IFtdLCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICBzdHIucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKSk7XG4gICAgICByZXR1cm4gc3RyLmpvaW4oJycpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjaGFyZW5jO1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iLCIoZnVuY3Rpb24oKXtcclxuICB2YXIgY3J5cHQgPSByZXF1aXJlKCdjcnlwdCcpLFxyXG4gICAgICB1dGY4ID0gcmVxdWlyZSgnY2hhcmVuYycpLnV0ZjgsXHJcbiAgICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyksXHJcbiAgICAgIGJpbiA9IHJlcXVpcmUoJ2NoYXJlbmMnKS5iaW4sXHJcblxyXG4gIC8vIFRoZSBjb3JlXHJcbiAgbWQ1ID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG9wdGlvbnMpIHtcclxuICAgIC8vIENvbnZlcnQgdG8gYnl0ZSBhcnJheVxyXG4gICAgaWYgKG1lc3NhZ2UuY29uc3RydWN0b3IgPT0gU3RyaW5nKVxyXG4gICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVuY29kaW5nID09PSAnYmluYXJ5JylcclxuICAgICAgICBtZXNzYWdlID0gYmluLnN0cmluZ1RvQnl0ZXMobWVzc2FnZSk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBtZXNzYWdlID0gdXRmOC5zdHJpbmdUb0J5dGVzKG1lc3NhZ2UpO1xyXG4gICAgZWxzZSBpZiAoaXNCdWZmZXIobWVzc2FnZSkpXHJcbiAgICAgIG1lc3NhZ2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChtZXNzYWdlLCAwKTtcclxuICAgIGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KG1lc3NhZ2UpKVxyXG4gICAgICBtZXNzYWdlID0gbWVzc2FnZS50b1N0cmluZygpO1xyXG4gICAgLy8gZWxzZSwgYXNzdW1lIGJ5dGUgYXJyYXkgYWxyZWFkeVxyXG5cclxuICAgIHZhciBtID0gY3J5cHQuYnl0ZXNUb1dvcmRzKG1lc3NhZ2UpLFxyXG4gICAgICAgIGwgPSBtZXNzYWdlLmxlbmd0aCAqIDgsXHJcbiAgICAgICAgYSA9ICAxNzMyNTg0MTkzLFxyXG4gICAgICAgIGIgPSAtMjcxNzMzODc5LFxyXG4gICAgICAgIGMgPSAtMTczMjU4NDE5NCxcclxuICAgICAgICBkID0gIDI3MTczMzg3ODtcclxuXHJcbiAgICAvLyBTd2FwIGVuZGlhblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIG1baV0gPSAoKG1baV0gPDwgIDgpIHwgKG1baV0gPj4+IDI0KSkgJiAweDAwRkYwMEZGIHxcclxuICAgICAgICAgICAgICgobVtpXSA8PCAyNCkgfCAobVtpXSA+Pj4gIDgpKSAmIDB4RkYwMEZGMDA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUGFkZGluZ1xyXG4gICAgbVtsID4+PiA1XSB8PSAweDgwIDw8IChsICUgMzIpO1xyXG4gICAgbVsoKChsICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IGw7XHJcblxyXG4gICAgLy8gTWV0aG9kIHNob3J0Y3V0c1xyXG4gICAgdmFyIEZGID0gbWQ1Ll9mZixcclxuICAgICAgICBHRyA9IG1kNS5fZ2csXHJcbiAgICAgICAgSEggPSBtZDUuX2hoLFxyXG4gICAgICAgIElJID0gbWQ1Ll9paTtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0ubGVuZ3RoOyBpICs9IDE2KSB7XHJcblxyXG4gICAgICB2YXIgYWEgPSBhLFxyXG4gICAgICAgICAgYmIgPSBiLFxyXG4gICAgICAgICAgY2MgPSBjLFxyXG4gICAgICAgICAgZGQgPSBkO1xyXG5cclxuICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIG1baSsgMF0sICA3LCAtNjgwODc2OTM2KTtcclxuICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIG1baSsgMV0sIDEyLCAtMzg5NTY0NTg2KTtcclxuICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIG1baSsgMl0sIDE3LCAgNjA2MTA1ODE5KTtcclxuICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIG1baSsgM10sIDIyLCAtMTA0NDUyNTMzMCk7XHJcbiAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBtW2krIDRdLCAgNywgLTE3NjQxODg5Nyk7XHJcbiAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBtW2krIDVdLCAxMiwgIDEyMDAwODA0MjYpO1xyXG4gICAgICBjID0gRkYoYywgZCwgYSwgYiwgbVtpKyA2XSwgMTcsIC0xNDczMjMxMzQxKTtcclxuICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIG1baSsgN10sIDIyLCAtNDU3MDU5ODMpO1xyXG4gICAgICBhID0gRkYoYSwgYiwgYywgZCwgbVtpKyA4XSwgIDcsICAxNzcwMDM1NDE2KTtcclxuICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIG1baSsgOV0sIDEyLCAtMTk1ODQxNDQxNyk7XHJcbiAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBtW2krMTBdLCAxNywgLTQyMDYzKTtcclxuICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIG1baSsxMV0sIDIyLCAtMTk5MDQwNDE2Mik7XHJcbiAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBtW2krMTJdLCAgNywgIDE4MDQ2MDM2ODIpO1xyXG4gICAgICBkID0gRkYoZCwgYSwgYiwgYywgbVtpKzEzXSwgMTIsIC00MDM0MTEwMSk7XHJcbiAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBtW2krMTRdLCAxNywgLTE1MDIwMDIyOTApO1xyXG4gICAgICBiID0gRkYoYiwgYywgZCwgYSwgbVtpKzE1XSwgMjIsICAxMjM2NTM1MzI5KTtcclxuXHJcbiAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBtW2krIDFdLCAgNSwgLTE2NTc5NjUxMCk7XHJcbiAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBtW2krIDZdLCAgOSwgLTEwNjk1MDE2MzIpO1xyXG4gICAgICBjID0gR0coYywgZCwgYSwgYiwgbVtpKzExXSwgMTQsICA2NDM3MTc3MTMpO1xyXG4gICAgICBiID0gR0coYiwgYywgZCwgYSwgbVtpKyAwXSwgMjAsIC0zNzM4OTczMDIpO1xyXG4gICAgICBhID0gR0coYSwgYiwgYywgZCwgbVtpKyA1XSwgIDUsIC03MDE1NTg2OTEpO1xyXG4gICAgICBkID0gR0coZCwgYSwgYiwgYywgbVtpKzEwXSwgIDksICAzODAxNjA4Myk7XHJcbiAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBtW2krMTVdLCAxNCwgLTY2MDQ3ODMzNSk7XHJcbiAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBtW2krIDRdLCAyMCwgLTQwNTUzNzg0OCk7XHJcbiAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBtW2krIDldLCAgNSwgIDU2ODQ0NjQzOCk7XHJcbiAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBtW2krMTRdLCAgOSwgLTEwMTk4MDM2OTApO1xyXG4gICAgICBjID0gR0coYywgZCwgYSwgYiwgbVtpKyAzXSwgMTQsIC0xODczNjM5NjEpO1xyXG4gICAgICBiID0gR0coYiwgYywgZCwgYSwgbVtpKyA4XSwgMjAsICAxMTYzNTMxNTAxKTtcclxuICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIG1baSsxM10sICA1LCAtMTQ0NDY4MTQ2Nyk7XHJcbiAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBtW2krIDJdLCAgOSwgLTUxNDAzNzg0KTtcclxuICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIG1baSsgN10sIDE0LCAgMTczNTMyODQ3Myk7XHJcbiAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBtW2krMTJdLCAyMCwgLTE5MjY2MDc3MzQpO1xyXG5cclxuICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIG1baSsgNV0sICA0LCAtMzc4NTU4KTtcclxuICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIG1baSsgOF0sIDExLCAtMjAyMjU3NDQ2Myk7XHJcbiAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBtW2krMTFdLCAxNiwgIDE4MzkwMzA1NjIpO1xyXG4gICAgICBiID0gSEgoYiwgYywgZCwgYSwgbVtpKzE0XSwgMjMsIC0zNTMwOTU1Nik7XHJcbiAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBtW2krIDFdLCAgNCwgLTE1MzA5OTIwNjApO1xyXG4gICAgICBkID0gSEgoZCwgYSwgYiwgYywgbVtpKyA0XSwgMTEsICAxMjcyODkzMzUzKTtcclxuICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIG1baSsgN10sIDE2LCAtMTU1NDk3NjMyKTtcclxuICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIG1baSsxMF0sIDIzLCAtMTA5NDczMDY0MCk7XHJcbiAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBtW2krMTNdLCAgNCwgIDY4MTI3OTE3NCk7XHJcbiAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBtW2krIDBdLCAxMSwgLTM1ODUzNzIyMik7XHJcbiAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBtW2krIDNdLCAxNiwgLTcyMjUyMTk3OSk7XHJcbiAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBtW2krIDZdLCAyMywgIDc2MDI5MTg5KTtcclxuICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIG1baSsgOV0sICA0LCAtNjQwMzY0NDg3KTtcclxuICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIG1baSsxMl0sIDExLCAtNDIxODE1ODM1KTtcclxuICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIG1baSsxNV0sIDE2LCAgNTMwNzQyNTIwKTtcclxuICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIG1baSsgMl0sIDIzLCAtOTk1MzM4NjUxKTtcclxuXHJcbiAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBtW2krIDBdLCAgNiwgLTE5ODYzMDg0NCk7XHJcbiAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBtW2krIDddLCAxMCwgIDExMjY4OTE0MTUpO1xyXG4gICAgICBjID0gSUkoYywgZCwgYSwgYiwgbVtpKzE0XSwgMTUsIC0xNDE2MzU0OTA1KTtcclxuICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIG1baSsgNV0sIDIxLCAtNTc0MzQwNTUpO1xyXG4gICAgICBhID0gSUkoYSwgYiwgYywgZCwgbVtpKzEyXSwgIDYsICAxNzAwNDg1NTcxKTtcclxuICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIG1baSsgM10sIDEwLCAtMTg5NDk4NjYwNik7XHJcbiAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBtW2krMTBdLCAxNSwgLTEwNTE1MjMpO1xyXG4gICAgICBiID0gSUkoYiwgYywgZCwgYSwgbVtpKyAxXSwgMjEsIC0yMDU0OTIyNzk5KTtcclxuICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIG1baSsgOF0sICA2LCAgMTg3MzMxMzM1OSk7XHJcbiAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBtW2krMTVdLCAxMCwgLTMwNjExNzQ0KTtcclxuICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIG1baSsgNl0sIDE1LCAtMTU2MDE5ODM4MCk7XHJcbiAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBtW2krMTNdLCAyMSwgIDEzMDkxNTE2NDkpO1xyXG4gICAgICBhID0gSUkoYSwgYiwgYywgZCwgbVtpKyA0XSwgIDYsIC0xNDU1MjMwNzApO1xyXG4gICAgICBkID0gSUkoZCwgYSwgYiwgYywgbVtpKzExXSwgMTAsIC0xMTIwMjEwMzc5KTtcclxuICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIG1baSsgMl0sIDE1LCAgNzE4Nzg3MjU5KTtcclxuICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIG1baSsgOV0sIDIxLCAtMzQzNDg1NTUxKTtcclxuXHJcbiAgICAgIGEgPSAoYSArIGFhKSA+Pj4gMDtcclxuICAgICAgYiA9IChiICsgYmIpID4+PiAwO1xyXG4gICAgICBjID0gKGMgKyBjYykgPj4+IDA7XHJcbiAgICAgIGQgPSAoZCArIGRkKSA+Pj4gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY3J5cHQuZW5kaWFuKFthLCBiLCBjLCBkXSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gQXV4aWxpYXJ5IGZ1bmN0aW9uc1xyXG4gIG1kNS5fZmYgID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcclxuICAgIHZhciBuID0gYSArIChiICYgYyB8IH5iICYgZCkgKyAoeCA+Pj4gMCkgKyB0O1xyXG4gICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjtcclxuICB9O1xyXG4gIG1kNS5fZ2cgID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcclxuICAgIHZhciBuID0gYSArIChiICYgZCB8IGMgJiB+ZCkgKyAoeCA+Pj4gMCkgKyB0O1xyXG4gICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjtcclxuICB9O1xyXG4gIG1kNS5faGggID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcclxuICAgIHZhciBuID0gYSArIChiIF4gYyBeIGQpICsgKHggPj4+IDApICsgdDtcclxuICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XHJcbiAgfTtcclxuICBtZDUuX2lpICA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XHJcbiAgICB2YXIgbiA9IGEgKyAoYyBeIChiIHwgfmQpKSArICh4ID4+PiAwKSArIHQ7XHJcbiAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xyXG4gIH07XHJcblxyXG4gIC8vIFBhY2thZ2UgcHJpdmF0ZSBibG9ja3NpemVcclxuICBtZDUuX2Jsb2Nrc2l6ZSA9IDE2O1xyXG4gIG1kNS5fZGlnZXN0c2l6ZSA9IDE2O1xyXG5cclxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXNzYWdlLCBvcHRpb25zKSB7XHJcbiAgICBpZiAobWVzc2FnZSA9PT0gdW5kZWZpbmVkIHx8IG1lc3NhZ2UgPT09IG51bGwpXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBhcmd1bWVudCAnICsgbWVzc2FnZSk7XHJcblxyXG4gICAgdmFyIGRpZ2VzdGJ5dGVzID0gY3J5cHQud29yZHNUb0J5dGVzKG1kNShtZXNzYWdlLCBvcHRpb25zKSk7XHJcbiAgICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLmFzQnl0ZXMgPyBkaWdlc3RieXRlcyA6XHJcbiAgICAgICAgb3B0aW9ucyAmJiBvcHRpb25zLmFzU3RyaW5nID8gYmluLmJ5dGVzVG9TdHJpbmcoZGlnZXN0Ynl0ZXMpIDpcclxuICAgICAgICBjcnlwdC5ieXRlc1RvSGV4KGRpZ2VzdGJ5dGVzKTtcclxuICB9O1xyXG5cclxufSkoKTtcclxuIiwiZmV0Y2ggPSByZXF1aXJlICdjcm9zcy1mZXRjaCdcbm1kNSA9IHJlcXVpcmUgJ21kNSdcblNHTiA9IHJlcXVpcmUgJy4uLy4uL3NnbidcbmNsaWVudExvY2FsU3RvcmFnZSA9IHJlcXVpcmUgJy4uLy4uL3N0b3JhZ2UvY2xpZW50LWxvY2FsJ1xuXG5nZXRQb29sID0gLT5cbiAgICBkYXRhID0gY2xpZW50TG9jYWxTdG9yYWdlLmdldCAnZXZlbnQtdHJhY2tlci1wb29sJ1xuICAgIGRhdGEgPSBbXSBpZiBBcnJheS5pc0FycmF5KGRhdGEpIGlzIGZhbHNlXG4gICAgZGF0YSA9IGRhdGEuZmlsdGVyIChldnQpIC0+XG4gICAgICAgIHR5cGVvZiBldnQuX2kgaXMgJ3N0cmluZydcblxuICAgIGRhdGFcblxucG9vbCA9IGdldFBvb2woKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFRyYWNrZXJcbiAgICBkZWZhdWx0T3B0aW9uczpcbiAgICAgICAgdHJhY2tJZDogbnVsbFxuICAgICAgICBwb29sTGltaXQ6IDEwMDBcblxuICAgIGNvbnN0cnVjdG9yOiAob3B0aW9ucyA9IHt9KSAtPlxuICAgICAgICBmb3Iga2V5LCB2YWx1ZSBvZiBAZGVmYXVsdE9wdGlvbnNcbiAgICAgICAgICAgIEBba2V5XSA9IG9wdGlvbnNba2V5XSBvciB2YWx1ZVxuXG4gICAgICAgIEBsb2NhdGlvbiA9XG4gICAgICAgICAgICBnZW9oYXNoOiBudWxsXG4gICAgICAgICAgICB0aW1lOiBudWxsXG4gICAgICAgICAgICBjb3VudHJ5OiBudWxsXG4gICAgICAgIEBkaXNwYXRjaGluZyA9IGZhbHNlXG5cbiAgICAgICAgZGlzcGF0Y2goKVxuXG4gICAgICAgIHJldHVyblxuXG4gICAgdHJhY2tFdmVudDogKHR5cGUsIHByb3BlcnRpZXMgPSB7fSwgdmVyc2lvbiA9IDIpIC0+XG4gICAgICAgIHRocm93IFNHTi51dGlsLmVycm9yKG5ldyBFcnJvcignRXZlbnQgdHlwZSBpcyByZXF1aXJlZCcpKSBpZiB0eXBlb2YgdHlwZSBpc250ICdudW1iZXInXG4gICAgICAgIHJldHVybiBpZiBub3QgQHRyYWNrSWQ/XG5cbiAgICAgICAgaWYgU0dOLmNvbmZpZy5nZXQoJ2FwcEtleScpIGlzIEB0cmFja0lkXG4gICAgICAgICAgICAjIGNvZmZlZWxpbnQ6IGRpc2FibGU9bWF4X2xpbmVfbGVuZ3RoXG4gICAgICAgICAgICB0aHJvdyBTR04udXRpbC5lcnJvcihuZXcgRXJyb3IoJ1RyYWNrIGlkZW50aWZpZXIgbXVzdCBub3QgYmUgaWRlbnRpY2FsIHRvIGFwcCBrZXkuIEdvIHRvIGh0dHBzOi8vYnVzaW5lc3Muc2hvcGd1bi5jb20vZGV2ZWxvcGVycy9hcHBzIHRvIGdldCBhIHRyYWNrIGlkZW50aWZpZXIgZm9yIHlvdXIgYXBwJykpXG4gICAgICAgIFxuICAgICAgICBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgICBldnQgPSBPYmplY3QuYXNzaWduIHt9LCBwcm9wZXJ0aWVzLCB7XG4gICAgICAgICAgICAnX2UnOiB0eXBlXG4gICAgICAgICAgICAnX3YnOiB2ZXJzaW9uXG4gICAgICAgICAgICAnX2knOiBTR04udXRpbC51dWlkKClcbiAgICAgICAgICAgICdfdCc6IE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKVxuICAgICAgICAgICAgJ19hJzogQHRyYWNrSWRcbiAgICAgICAgfVxuXG4gICAgICAgIGV2dFsnbC5oJ10gPSBAbG9jYXRpb24uZ2VvaGFzaCBpZiBAbG9jYXRpb24uZ2VvaGFzaD9cbiAgICAgICAgZXZ0WydsLmh0J10gPSBAbG9jYXRpb24udGltZSBpZiBAbG9jYXRpb24udGltZT9cbiAgICAgICAgZXZ0WydsLmMnXSA9IEBsb2NhdGlvbi5jb3VudHJ5IGlmIEBsb2NhdGlvbi5jb3VudHJ5P1xuXG4gICAgICAgIHBvb2wucHVzaCBldnRcbiAgICAgICAgcG9vbC5zaGlmdCgpIHdoaWxlIHBvb2wubGVuZ3RoID4gQHBvb2xMaW1pdFxuXG4gICAgICAgIGRpc3BhdGNoKClcblxuICAgICAgICBAXG5cbiAgICBzZXRMb2NhdGlvbjogKGxvY2F0aW9uID0ge30pIC0+XG4gICAgICAgIGZvciBrZXksIHZhbHVlIG9mIGxvY2F0aW9uXG4gICAgICAgICAgICBpZiBAbG9jYXRpb24uaGFzT3duUHJvcGVydHkoa2V5KVxuICAgICAgICAgICAgICAgIEBsb2NhdGlvbltrZXldID0gdmFsdWVcblxuICAgICAgICBAXG5cbiAgICB0cmFja1BhZ2VkUHVibGljYXRpb25PcGVuZWQ6IChwcm9wZXJ0aWVzLCB2ZXJzaW9uKSAtPlxuICAgICAgICBAdHJhY2tFdmVudCAxLCBwcm9wZXJ0aWVzLCB2ZXJzaW9uXG4gICAgXG4gICAgdHJhY2tQYWdlZFB1YmxpY2F0aW9uUGFnZURpc2FwcGVhcmVkOiAocHJvcGVydGllcywgdmVyc2lvbikgLT5cbiAgICAgICAgQHRyYWNrRXZlbnQgMiwgcHJvcGVydGllcywgdmVyc2lvblxuICAgIFxuICAgIHRyYWNrT2ZmZXJPcGVuZWQ6IChwcm9wZXJ0aWVzLCB2ZXJzaW9uKSAtPlxuICAgICAgICBAdHJhY2tFdmVudCAzLCBwcm9wZXJ0aWVzLCB2ZXJzaW9uXG4gICAgXG4gICAgdHJhY2tDbGllbnRTZXNzaW9uT3BlbmVkOiAocHJvcGVydGllcywgdmVyc2lvbikgLT5cbiAgICAgICAgQHRyYWNrRXZlbnQgNCwgcHJvcGVydGllcywgdmVyc2lvblxuICAgIFxuICAgIHRyYWNrU2VhcmNoZWQ6IChwcm9wZXJ0aWVzLCB2ZXJzaW9uKSAtPlxuICAgICAgICBAdHJhY2tFdmVudCA1LCBwcm9wZXJ0aWVzLCB2ZXJzaW9uXG4gICAgXG4gICAgY3JlYXRlVmlld1Rva2VuOiAoLi4ucGFydHMpIC0+XG4gICAgICAgIHN0ciA9IFtTR04uY2xpZW50LmlkXS5jb25jYXQocGFydHMpLmpvaW4gJydcbiAgICAgICAgdmlld1Rva2VuID0gU0dOLnV0aWwuYnRvYSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIChtZDUoc3RyLCB7YXNCeXRlczogdHJ1ZX0pKS5zbGljZSgwLDgpKVxuXG4gICAgICAgIHZpZXdUb2tlblxuXG5kaXNwYXRjaGluZyA9IGZhbHNlXG5kaXNwYXRjaExpbWl0ID0gMTAwXG5cbnNoaXAgPSAoZXZlbnRzID0gW10pIC0+XG4gICAgcmVxID0gZmV0Y2ggU0dOLmNvbmZpZy5nZXQoJ2V2ZW50c1RyYWNrVXJsJyksXG4gICAgICAgIG1ldGhvZDogJ3Bvc3QnXG4gICAgICAgIHRpbWVvdXQ6IDEwMDAgKiAyMFxuICAgICAgICBoZWFkZXJzOlxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04J1xuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShldmVudHM6IGV2ZW50cylcbiAgICBcbiAgICByZXEudGhlbiAocmVzcG9uc2UpIC0+IHJlc3BvbnNlLmpzb24oKVxuX2Rpc3BhdGNoID0gLT5cbiAgICByZXR1cm4gaWYgZGlzcGF0Y2hpbmcgaXMgdHJ1ZSBvciBwb29sLmxlbmd0aCBpcyAwXG5cbiAgICBldmVudHMgPSBwb29sLnNsaWNlIDAsIGRpc3BhdGNoTGltaXRcbiAgICBuYWNrcyA9IDBcbiAgICBkaXNwYXRjaGluZyA9IHRydWVcblxuICAgIHNoaXAoZXZlbnRzKVxuICAgICAgICAudGhlbiAocmVzcG9uc2UpIC0+XG4gICAgICAgICAgICBkaXNwYXRjaGluZyA9IGZhbHNlXG5cbiAgICAgICAgICAgIHJlc3BvbnNlLmV2ZW50cy5mb3JFYWNoIChyZXNFdmVudCkgLT5cbiAgICAgICAgICAgICAgICBpZiByZXNFdmVudC5zdGF0dXMgaXMgJ3ZhbGlkYXRpb25fZXJyb3InIG9yIHJlc0V2ZW50LnN0YXR1cyBpcyAnYWNrJ1xuICAgICAgICAgICAgICAgICAgICBwb29sID0gcG9vbC5maWx0ZXIgKHBvb2xFdmVudCkgLT4gcG9vbEV2ZW50Ll9pIGlzbnQgcmVzRXZlbnQuaWRcbiAgICAgICAgICAgICAgICBlbHNlIGlmICduYWNrJ1xuICAgICAgICAgICAgICAgICAgICBuYWNrcysrXG5cbiAgICAgICAgICAgICAgICByZXR1cm5cblxuICAgICAgICAgICAgIyBLZWVwIGRpc3BhdGNoaW5nIHVudGlsIHRoZSBwb29sIHNpemUgcmVhY2hlcyBhIHNhbmUgbGV2ZWwuXG4gICAgICAgICAgICBkaXNwYXRjaCgpIGlmIHBvb2wubGVuZ3RoID49IGRpc3BhdGNoTGltaXQgYW5kIG5hY2tzIGlzIDBcblxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIC5jYXRjaCAoZXJyKSAtPlxuICAgICAgICAgICAgZGlzcGF0Y2hpbmcgPSBmYWxzZVxuXG4gICAgICAgICAgICB0aHJvdyBlcnJcblxuICAgICAgICAgICAgcmV0dXJuXG4gICAgXG4gICAgcmV0dXJuXG5kaXNwYXRjaCA9IFNHTi51dGlsLnRocm90dGxlIF9kaXNwYXRjaCwgNDAwMFxuXG5jbGllbnRMb2NhbFN0b3JhZ2Uuc2V0ICdldmVudC10cmFja2VyLXBvb2wnLCBbXVxuXG50cnlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAnYmVmb3JldW5sb2FkJywgKGUpIC0+XG4gICAgICAgIHBvb2wgPSBwb29sLmNvbmNhdCBnZXRQb29sKClcblxuICAgICAgICBjbGllbnRMb2NhbFN0b3JhZ2Uuc2V0ICdldmVudC10cmFja2VyLXBvb2wnLCBwb29sXG5cbiAgICAgICAgcmV0dXJuXG4gICAgLCBmYWxzZSIsIk1pY3JvRXZlbnQgPSByZXF1aXJlICdtaWNyb2V2ZW50J1xuXG5jbGFzcyBQdWxzZVxuICAgIGNvbnN0cnVjdG9yOiAtPlxuICAgICAgICBAZGVzdHJveWVkID0gZmFsc2VcbiAgICAgICAgQGNvbm5lY3Rpb24gPSBAY29ubmVjdCgpXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBkZXN0cm95OiAtPlxuICAgICAgICBAZGVzdHJveWVkID0gdHJ1ZVxuXG4gICAgICAgIEBjb25uZWN0aW9uLmNsb3NlKClcblxuICAgICAgICBAXG5cbiAgICBjb25uZWN0OiAtPlxuICAgICAgICBjb25uZWN0aW9uID0gbmV3IFdlYlNvY2tldCBTR04uY29uZmlnLmdldCgnZXZlbnRzUHVsc2VVcmwnKVxuXG4gICAgICAgIGNvbm5lY3Rpb24ub25vcGVuID0gQG9uT3Blbi5iaW5kIEBcbiAgICAgICAgY29ubmVjdGlvbi5vbm1lc3NhZ2UgPSBAb25NZXNzYWdlLmJpbmQgQFxuICAgICAgICBjb25uZWN0aW9uLm9uZXJyb3IgPSBAb25FcnJvci5iaW5kIEBcbiAgICAgICAgY29ubmVjdGlvbi5vbmNsb3NlID0gQG9uQ2xvc2UuYmluZCBAXG5cbiAgICAgICAgY29ubmVjdGlvblxuXG4gICAgb25PcGVuOiAtPlxuICAgICAgICBAdHJpZ2dlciAnb3BlbidcblxuICAgICAgICByZXR1cm5cblxuICAgIG9uTWVzc2FnZTogKGUpIC0+XG4gICAgICAgIHRyeVxuICAgICAgICAgICAgQHRyaWdnZXIgJ2V2ZW50JywgSlNPTi5wYXJzZShlLmRhdGEpXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBvbkVycm9yOiAtPlxuICAgICAgICByZXR1cm5cblxuICAgIG9uQ2xvc2U6IC0+XG4gICAgICAgIGlmIEBkZXN0cm95ZWQgaXMgZmFsc2VcbiAgICAgICAgICAgIHNldFRpbWVvdXQgPT5cbiAgICAgICAgICAgICAgICBAY29ubmVjdGlvbiA9IEBjb25uZWN0KClcblxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgLCAyMDAwXG5cbiAgICAgICAgcmV0dXJuXG5cbk1pY3JvRXZlbnQubWl4aW4gUHVsc2VcblxubW9kdWxlLmV4cG9ydHMgPSBQdWxzZVxuIiwibW9kdWxlLmV4cG9ydHMgPVxuICAgIFRyYWNrZXI6IHJlcXVpcmUgJy4vdHJhY2tlcidcblxuICAgIFB1bHNlOiByZXF1aXJlICcuL3B1bHNlJ1xuIiwiZmV0Y2ggPSByZXF1aXJlICdjcm9zcy1mZXRjaCdcblNHTiA9IHJlcXVpcmUgJy4uLy4uL3Nnbidcbntwcm9taXNlQ2FsbGJhY2tJbnRlcm9wfSA9IHJlcXVpcmUgJy4uLy4uL3V0aWwnXG5cbnBhcnNlQ29va2llcyA9IChjb29raWVzID0gW10pIC0+XG4gICAgcGFyc2VkQ29va2llcyA9IHt9XG5cbiAgICBjb29raWVzLm1hcCAoY29va2llKSAtPlxuICAgICAgICBwYXJ0cyA9IGNvb2tpZS5zcGxpdCAnOyAnXG4gICAgICAgIGtleVZhbHVlUGFpciA9IHBhcnRzWzBdLnNwbGl0ICc9J1xuICAgICAgICBrZXkgPSBrZXlWYWx1ZVBhaXJbMF1cbiAgICAgICAgdmFsdWUgPSBrZXlWYWx1ZVBhaXJbMV1cblxuICAgICAgICBwYXJzZWRDb29raWVzW2tleV0gPSB2YWx1ZVxuXG4gICAgICAgIHJldHVyblxuICAgIFxuICAgIHBhcnNlZENvb2tpZXNcblxucmVxdWVzdCA9IChvcHRpb25zID0ge30sIGNhbGxiYWNrKSAtPlxuICAgIHVybCA9IFNHTi5jb25maWcuZ2V0ICdncmFwaFVybCdcbiAgICB0aW1lb3V0ID0gMTAwMCAqIDEyXG4gICAgYXBwS2V5ID0gU0dOLmNvbmZpZy5nZXQgJ2FwcEtleSdcbiAgICBhdXRoVG9rZW4gPSBTR04uY29uZmlnLmdldCAnYXV0aFRva2VuJ1xuICAgIGF1dGhUb2tlbkNvb2tpZU5hbWUgPSAnc2hvcGd1bi1hdXRoLXRva2VuJ1xuICAgIG9wdGlvbnMgPVxuICAgICAgICBtZXRob2Q6ICdwb3N0J1xuICAgICAgICB0aW1lb3V0OiB0aW1lb3V0XG4gICAgICAgIGhlYWRlcnM6XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5XG4gICAgICAgICAgICBxdWVyeTogb3B0aW9ucy5xdWVyeVxuICAgICAgICAgICAgb3BlcmF0aW9uTmFtZTogb3B0aW9ucy5vcGVyYXRpb25OYW1lXG4gICAgICAgICAgICB2YXJpYWJsZXM6IG9wdGlvbnMudmFyaWFibGVzXG5cbiAgICAjIFNldCBjb29raWVzIG1hbnVhbGx5IGluIG5vZGUuanMuXG4gICAgaWYgU0dOLnV0aWwuaXNOb2RlKCkgYW5kIGF1dGhUb2tlbj9cbiAgICAgICAgb3B0aW9ucy5jb29raWVzID0gW1xuICAgICAgICAgICAga2V5OiBhdXRoVG9rZW5Db29raWVOYW1lXG4gICAgICAgICAgICB2YWx1ZTogYXV0aFRva2VuXG4gICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICBdXG4gICAgZWxzZSBpZiBTR04udXRpbC5pc0Jyb3dzZXIoKVxuICAgICAgICBvcHRpb25zLmNyZWRlbnRpYWxzID0gJ2luY2x1ZGUnXG5cbiAgICBmZXRjaCh1cmwsIG9wdGlvbnMpXG4gICAgICAgIC50aGVuIChyZXNwb25zZSkgLT5cbiAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuIChqc29uKSAtPlxuICAgICAgICAgICAgICAgICMgVXBkYXRlIGF1dGggdG9rZW4gYXMgaXQgbWlnaHQgaGF2ZSBjaGFuZ2VkLlxuICAgICAgICAgICAgICAgIGlmIFNHTi51dGlsLmlzTm9kZSgpXG4gICAgICAgICAgICAgICAgICAgIGNvb2tpZXMgPSBwYXJzZUNvb2tpZXMgcmVzcG9uc2UuaGVhZGVycz9bJ3NldC1jb29raWUnXVxuICAgICAgICAgICAgICAgICAgICBhdXRoQ29va2llID0gY29va2llc1thdXRoVG9rZW5Db29raWVOYW1lXVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIFNHTi5jb25maWcuZ2V0KCdhdXRoVG9rZW4nKSBpc250IGF1dGhDb29raWVcbiAgICAgICAgICAgICAgICAgICAgICAgIFNHTi5jb25maWcuc2V0ICdhdXRoVG9rZW4nLCBhdXRoQ29va2llXG5cbiAgICAgICAgICAgICAgICBpZiByZXNwb25zZS5zdGF0dXMgaXNudCAyMDBcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgU0dOLnV0aWwuZXJyb3IobmV3IEVycm9yKCdHcmFwaCBBUEkgZXJyb3InKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6ICdHcmFwaEFQSUVycm9yJ1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogZGF0YS5zdGF0dXNDb2RlXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrIG51bGwsIGpzb25cbiAgICAgICAgLmNhdGNoIGNhbGxiYWNrXG4gICAgXG4gICAgcmV0dXJuXG5cbm1vZHVsZS5leHBvcnRzID0gcHJvbWlzZUNhbGxiYWNrSW50ZXJvcCByZXF1ZXN0LCAxIiwibW9kdWxlLmV4cG9ydHMgPVxuICAgIHJlcXVlc3Q6IHJlcXVpcmUgJy4vcmVxdWVzdCdcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiZmV0Y2ggPSByZXF1aXJlICdjcm9zcy1mZXRjaCdcblNHTiA9IHJlcXVpcmUgJy4uLy4uL3Nnbidcbntwcm9taXNlQ2FsbGJhY2tJbnRlcm9wfSA9IHJlcXVpcmUgJy4uLy4uL3V0aWwnXG5cbnJlcXVlc3QgPSAob3B0aW9ucyA9IHt9LCBjYWxsYmFjaywgc2Vjb25kVGltZSkgLT5cbiAgICBTR04uQ29yZUtpdC5zZXNzaW9uLmVuc3VyZSAoZXJyKSAtPlxuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKSBpZiBlcnI/XG5cbiAgICAgICAgdXJsID0gU0dOLmNvbmZpZy5nZXQoJ2NvcmVVcmwnKSArIChvcHRpb25zLnVybCA/ICcnKVxuICAgICAgICBoZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzID8ge31cbiAgICAgICAganNvbiA9IGlmIHR5cGVvZiBvcHRpb25zLmpzb24gaXMgJ2Jvb2xlYW4nIHRoZW4gb3B0aW9ucy5qc29uIGVsc2UgdHJ1ZVxuICAgICAgICB0b2tlbiA9IFNHTi5jb25maWcuZ2V0ICdjb3JlU2Vzc2lvblRva2VuJ1xuICAgICAgICBhcHBWZXJzaW9uID0gU0dOLmNvbmZpZy5nZXQgJ2FwcFZlcnNpb24nXG4gICAgICAgIGFwcFNlY3JldCA9IFNHTi5jb25maWcuZ2V0ICdhcHBTZWNyZXQnXG4gICAgICAgIGxvY2FsZSA9IFNHTi5jb25maWcuZ2V0ICdsb2NhbGUnXG4gICAgICAgIHFzID0gb3B0aW9ucy5xcyA/IHt9XG4gICAgICAgIGdlbyA9IG9wdGlvbnMuZ2VvbG9jYXRpb25cbiAgICAgICAgYm9keSA9IG9wdGlvbnMuYm9keVxuICAgICAgICBcbiAgICAgICAgaGVhZGVyc1snWC1Ub2tlbiddID0gdG9rZW5cbiAgICAgICAgaGVhZGVyc1snWC1TaWduYXR1cmUnXSA9IFNHTi5Db3JlS2l0LnNlc3Npb24uc2lnbiBhcHBTZWNyZXQsIHRva2VuIGlmIGFwcFNlY3JldD9cblxuICAgICAgICBpZiBqc29uXG4gICAgICAgICAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgaGVhZGVyc1snQWNjZXB0J10gPSAnYXBwbGljYXRpb24vanNvbidcblxuICAgICAgICAgICAgaWYgYm9keVxuICAgICAgICAgICAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShib2R5KVxuXG4gICAgICAgIHFzLnJfbG9jYWxlID0gbG9jYWxlIGlmIGxvY2FsZT9cbiAgICAgICAgcXMuYXBpX2F2ID0gYXBwVmVyc2lvbiBpZiBhcHBWZXJzaW9uP1xuXG4gICAgICAgIGlmIGdlbz9cbiAgICAgICAgICAgIHFzLnJfbGF0ID0gZ2VvLmxhdGl0dWRlIGlmIGdlby5sYXRpdHVkZT8gYW5kIG5vdCBxcy5yX2xhdD9cbiAgICAgICAgICAgIHFzLnJfbG5nID0gZ2VvLmxvbmdpdHVkZSBpZiBnZW8ubG9uZ2l0dWRlPyBhbmQgbm90IHFzLnJfbG5nP1xuICAgICAgICAgICAgcXMucl9yYWRpdXMgPSBnZW8ucmFkaXVzIGlmIGdlby5yYWRpdXM/IGFuZCBub3QgcXMucl9yYWRpdXM/XG4gICAgICAgICAgICBxcy5yX3NlbnNvciA9IGdlby5zZW5zb3IgaWYgZ2VvLnNlbnNvcj8gYW5kIG5vdCBxcy5yX3NlbnNvcj9cbiAgICAgICAgXG4gICAgICAgIGlmIE9iamVjdC5rZXlzKHFzKS5sZW5ndGhcbiAgICAgICAgICAgIHVybCArPSAnPycgKyAoT2JqZWN0LmtleXMocXMpLm1hcCAoaykgLT5cbiAgICAgICAgICAgICAgICBpZiBBcnJheS5pc0FycmF5IGtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHFzW2tdLm1hcCgodmFsKSAtPiBcIiN7ZW5jb2RlVVJJQ29tcG9uZW50KGspfVtdPSN7ZW5jb2RlVVJJQ29tcG9uZW50KHZhbCl9XCIpLmpvaW4gJyYnXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXCIje2VuY29kZVVSSUNvbXBvbmVudChrKX09I3tlbmNvZGVVUklDb21wb25lbnQocXNba10pfVwiXG4gICAgICAgICAgICApLmpvaW4gJyYnXG5cbiAgICAgICAgcmVxID0gZmV0Y2ggdXJsLFxuICAgICAgICAgICAgbWV0aG9kOiBvcHRpb25zLm1ldGhvZFxuICAgICAgICAgICAgYm9keTogYm9keVxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVyc1xuICAgICAgICBcbiAgICAgICAgcmVxXG4gICAgICAgICAgICAudGhlbiAocmVzcG9uc2UpIC0+XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuanNvbigpLnRoZW4gKGpzb24pIC0+XG4gICAgICAgICAgICAgICAgICAgIHRva2VuID0gU0dOLmNvbmZpZy5nZXQgJ2NvcmVTZXNzaW9uVG9rZW4nXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVG9rZW4gPSByZXNwb25zZS5oZWFkZXJzLmdldCAneC10b2tlbidcblxuICAgICAgICAgICAgICAgICAgICBTR04uQ29yZUtpdC5zZXNzaW9uLnNhdmVUb2tlbiByZXNwb25zZVRva2VuIGlmIHJlc3BvbnNlVG9rZW4gYW5kIHRva2VuIGlzbnQgcmVzcG9uc2VUb2tlblxuXG4gICAgICAgICAgICAgICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1cyA+PSAyMDAgYW5kIHJlc3BvbnNlLnN0YXR1cyA8IDMwMCBvciByZXNwb25zZS5zdGF0dXMgaXMgMzA0XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayBudWxsLCBqc29uXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNlY29uZFRpbWUgaXNudCB0cnVlIGFuZCBqc29uPy5jb2RlIGluIFsxMTAxLCAxMTA3LCAxMTA4XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNHTi5jb25maWcuc2V0IGNvcmVTZXNzaW9uVG9rZW46IHVuZGVmaW5lZFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCBvcHRpb25zLCBjYWxsYmFjaywgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrIFNHTi51dGlsLmVycm9yKG5ldyBFcnJvcignQ29yZSBBUEkgZXJyb3InKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogJ0NvcmVBUElFcnJvcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwganNvblxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAuY2F0Y2ggY2FsbGJhY2tcblxuICAgIHJldHVyblxuXG5tb2R1bGUuZXhwb3J0cyA9IHByb21pc2VDYWxsYmFja0ludGVyb3AgcmVxdWVzdCwgMVxuIiwiIWZ1bmN0aW9uKGdsb2JhbHMpIHtcbid1c2Ugc3RyaWN0J1xuXG52YXIgY29udmVydEhleCA9IHtcbiAgYnl0ZXNUb0hleDogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAvKmlmICh0eXBlb2YgYnl0ZXMuYnl0ZUxlbmd0aCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIG5ld0J5dGVzID0gW11cblxuICAgICAgaWYgKHR5cGVvZiBieXRlcy5idWZmZXIgIT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgIGJ5dGVzID0gbmV3IERhdGFWaWV3KGJ5dGVzLmJ1ZmZlcilcbiAgICAgIGVsc2VcbiAgICAgICAgYnl0ZXMgPSBuZXcgRGF0YVZpZXcoYnl0ZXMpXG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMuYnl0ZUxlbmd0aDsgKytpKSB7XG4gICAgICAgIG5ld0J5dGVzLnB1c2goYnl0ZXMuZ2V0VWludDgoaSkpXG4gICAgICB9XG4gICAgICBieXRlcyA9IG5ld0J5dGVzXG4gICAgfSovXG4gICAgcmV0dXJuIGFyckJ5dGVzVG9IZXgoYnl0ZXMpXG4gIH0sXG4gIGhleFRvQnl0ZXM6IGZ1bmN0aW9uKGhleCkge1xuICAgIGlmIChoZXgubGVuZ3RoICUgMiA9PT0gMSkgdGhyb3cgbmV3IEVycm9yKFwiaGV4VG9CeXRlcyBjYW4ndCBoYXZlIGEgc3RyaW5nIHdpdGggYW4gb2RkIG51bWJlciBvZiBjaGFyYWN0ZXJzLlwiKVxuICAgIGlmIChoZXguaW5kZXhPZignMHgnKSA9PT0gMCkgaGV4ID0gaGV4LnNsaWNlKDIpXG4gICAgcmV0dXJuIGhleC5tYXRjaCgvLi4vZykubWFwKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHBhcnNlSW50KHgsMTYpIH0pXG4gIH1cbn1cblxuXG4vLyBQUklWQVRFXG5cbmZ1bmN0aW9uIGFyckJ5dGVzVG9IZXgoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzLm1hcChmdW5jdGlvbih4KSB7IHJldHVybiBwYWRMZWZ0KHgudG9TdHJpbmcoMTYpLDIpIH0pLmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIHBhZExlZnQob3JpZywgbGVuKSB7XG4gIGlmIChvcmlnLmxlbmd0aCA+IGxlbikgcmV0dXJuIG9yaWdcbiAgcmV0dXJuIEFycmF5KGxlbiAtIG9yaWcubGVuZ3RoICsgMSkuam9pbignMCcpICsgb3JpZ1xufVxuXG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgeyAvL0NvbW1vbkpTXG4gIG1vZHVsZS5leHBvcnRzID0gY29udmVydEhleFxufSBlbHNlIHtcbiAgZ2xvYmFscy5jb252ZXJ0SGV4ID0gY29udmVydEhleFxufVxuXG59KHRoaXMpOyIsIiFmdW5jdGlvbihnbG9iYWxzKSB7XG4ndXNlIHN0cmljdCdcblxudmFyIGNvbnZlcnRTdHJpbmcgPSB7XG4gIGJ5dGVzVG9TdHJpbmc6IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgcmV0dXJuIGJ5dGVzLm1hcChmdW5jdGlvbih4KXsgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoeCkgfSkuam9pbignJylcbiAgfSxcbiAgc3RyaW5nVG9CeXRlczogZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5zcGxpdCgnJykubWFwKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHguY2hhckNvZGVBdCgwKSB9KVxuICB9XG59XG5cbi8vaHR0cDovL2hvc3NhLmluLzIwMTIvMDcvMjAvdXRmLTgtaW4tamF2YXNjcmlwdC5odG1sXG5jb252ZXJ0U3RyaW5nLlVURjggPSB7XG4gICBieXRlc1RvU3RyaW5nOiBmdW5jdGlvbihieXRlcykge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGNvbnZlcnRTdHJpbmcuYnl0ZXNUb1N0cmluZyhieXRlcykpKVxuICB9LFxuICBzdHJpbmdUb0J5dGVzOiBmdW5jdGlvbihzdHIpIHtcbiAgIHJldHVybiBjb252ZXJ0U3RyaW5nLnN0cmluZ1RvQnl0ZXModW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpKVxuICB9XG59XG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgeyAvL0NvbW1vbkpTXG4gIG1vZHVsZS5leHBvcnRzID0gY29udmVydFN0cmluZ1xufSBlbHNlIHtcbiAgZ2xvYmFscy5jb252ZXJ0U3RyaW5nID0gY29udmVydFN0cmluZ1xufVxuXG59KHRoaXMpOyIsIiFmdW5jdGlvbihnbG9iYWxzKSB7XG4ndXNlIHN0cmljdCdcblxudmFyIF9pbXBvcnRzID0ge31cblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7IC8vQ29tbW9uSlNcbiAgX2ltcG9ydHMuYnl0ZXNUb0hleCA9IHJlcXVpcmUoJ2NvbnZlcnQtaGV4JykuYnl0ZXNUb0hleFxuICBfaW1wb3J0cy5jb252ZXJ0U3RyaW5nID0gcmVxdWlyZSgnY29udmVydC1zdHJpbmcnKVxuICBtb2R1bGUuZXhwb3J0cyA9IHNoYTI1NlxufSBlbHNlIHtcbiAgX2ltcG9ydHMuYnl0ZXNUb0hleCA9IGdsb2JhbHMuY29udmVydEhleC5ieXRlc1RvSGV4XG4gIF9pbXBvcnRzLmNvbnZlcnRTdHJpbmcgPSBnbG9iYWxzLmNvbnZlcnRTdHJpbmdcbiAgZ2xvYmFscy5zaGEyNTYgPSBzaGEyNTZcbn1cblxuLypcbkNyeXB0b0pTIHYzLjEuMlxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcbiovXG5cbi8vIEluaXRpYWxpemF0aW9uIHJvdW5kIGNvbnN0YW50cyB0YWJsZXNcbnZhciBLID0gW11cblxuLy8gQ29tcHV0ZSBjb25zdGFudHNcbiFmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGlzUHJpbWUobikge1xuICAgIHZhciBzcXJ0TiA9IE1hdGguc3FydChuKTtcbiAgICBmb3IgKHZhciBmYWN0b3IgPSAyOyBmYWN0b3IgPD0gc3FydE47IGZhY3RvcisrKSB7XG4gICAgICBpZiAoIShuICUgZmFjdG9yKSkgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEZyYWN0aW9uYWxCaXRzKG4pIHtcbiAgICByZXR1cm4gKChuIC0gKG4gfCAwKSkgKiAweDEwMDAwMDAwMCkgfCAwXG4gIH1cblxuICB2YXIgbiA9IDJcbiAgdmFyIG5QcmltZSA9IDBcbiAgd2hpbGUgKG5QcmltZSA8IDY0KSB7XG4gICAgaWYgKGlzUHJpbWUobikpIHtcbiAgICAgIEtbblByaW1lXSA9IGdldEZyYWN0aW9uYWxCaXRzKE1hdGgucG93KG4sIDEgLyAzKSlcbiAgICAgIG5QcmltZSsrXG4gICAgfVxuXG4gICAgbisrXG4gIH1cbn0oKVxuXG52YXIgYnl0ZXNUb1dvcmRzID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gIHZhciB3b3JkcyA9IFtdXG4gIGZvciAodmFyIGkgPSAwLCBiID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrLCBiICs9IDgpIHtcbiAgICB3b3Jkc1tiID4+PiA1XSB8PSBieXRlc1tpXSA8PCAoMjQgLSBiICUgMzIpXG4gIH1cbiAgcmV0dXJuIHdvcmRzXG59XG5cbnZhciB3b3Jkc1RvQnl0ZXMgPSBmdW5jdGlvbiAod29yZHMpIHtcbiAgdmFyIGJ5dGVzID0gW11cbiAgZm9yICh2YXIgYiA9IDA7IGIgPCB3b3Jkcy5sZW5ndGggKiAzMjsgYiArPSA4KSB7XG4gICAgYnl0ZXMucHVzaCgod29yZHNbYiA+Pj4gNV0gPj4+ICgyNCAtIGIgJSAzMikpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZXNcbn1cblxuLy8gUmV1c2FibGUgb2JqZWN0XG52YXIgVyA9IFtdXG5cbnZhciBwcm9jZXNzQmxvY2sgPSBmdW5jdGlvbiAoSCwgTSwgb2Zmc2V0KSB7XG4gIC8vIFdvcmtpbmcgdmFyaWFibGVzXG4gIHZhciBhID0gSFswXSwgYiA9IEhbMV0sIGMgPSBIWzJdLCBkID0gSFszXVxuICB2YXIgZSA9IEhbNF0sIGYgPSBIWzVdLCBnID0gSFs2XSwgaCA9IEhbN11cblxuICAgIC8vIENvbXB1dGF0aW9uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuICAgIGlmIChpIDwgMTYpIHtcbiAgICAgIFdbaV0gPSBNW29mZnNldCArIGldIHwgMFxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZ2FtbWEweCA9IFdbaSAtIDE1XVxuICAgICAgdmFyIGdhbW1hMCAgPSAoKGdhbW1hMHggPDwgMjUpIHwgKGdhbW1hMHggPj4+IDcpKSAgXlxuICAgICAgICAgICAgICAgICAgICAoKGdhbW1hMHggPDwgMTQpIHwgKGdhbW1hMHggPj4+IDE4KSkgXlxuICAgICAgICAgICAgICAgICAgICAoZ2FtbWEweCA+Pj4gMylcblxuICAgICAgdmFyIGdhbW1hMXggPSBXW2kgLSAyXTtcbiAgICAgIHZhciBnYW1tYTEgID0gKChnYW1tYTF4IDw8IDE1KSB8IChnYW1tYTF4ID4+PiAxNykpIF5cbiAgICAgICAgICAgICAgICAgICAgKChnYW1tYTF4IDw8IDEzKSB8IChnYW1tYTF4ID4+PiAxOSkpIF5cbiAgICAgICAgICAgICAgICAgICAgKGdhbW1hMXggPj4+IDEwKVxuXG4gICAgICBXW2ldID0gZ2FtbWEwICsgV1tpIC0gN10gKyBnYW1tYTEgKyBXW2kgLSAxNl07XG4gICAgfVxuXG4gICAgdmFyIGNoICA9IChlICYgZikgXiAofmUgJiBnKTtcbiAgICB2YXIgbWFqID0gKGEgJiBiKSBeIChhICYgYykgXiAoYiAmIGMpO1xuXG4gICAgdmFyIHNpZ21hMCA9ICgoYSA8PCAzMCkgfCAoYSA+Pj4gMikpIF4gKChhIDw8IDE5KSB8IChhID4+PiAxMykpIF4gKChhIDw8IDEwKSB8IChhID4+PiAyMikpO1xuICAgIHZhciBzaWdtYTEgPSAoKGUgPDwgMjYpIHwgKGUgPj4+IDYpKSBeICgoZSA8PCAyMSkgfCAoZSA+Pj4gMTEpKSBeICgoZSA8PCA3KSAgfCAoZSA+Pj4gMjUpKTtcblxuICAgIHZhciB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbaV0gKyBXW2ldO1xuICAgIHZhciB0MiA9IHNpZ21hMCArIG1hajtcblxuICAgIGggPSBnO1xuICAgIGcgPSBmO1xuICAgIGYgPSBlO1xuICAgIGUgPSAoZCArIHQxKSB8IDA7XG4gICAgZCA9IGM7XG4gICAgYyA9IGI7XG4gICAgYiA9IGE7XG4gICAgYSA9ICh0MSArIHQyKSB8IDA7XG4gIH1cblxuICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7XG4gIEhbMV0gPSAoSFsxXSArIGIpIHwgMDtcbiAgSFsyXSA9IChIWzJdICsgYykgfCAwO1xuICBIWzNdID0gKEhbM10gKyBkKSB8IDA7XG4gIEhbNF0gPSAoSFs0XSArIGUpIHwgMDtcbiAgSFs1XSA9IChIWzVdICsgZikgfCAwO1xuICBIWzZdID0gKEhbNl0gKyBnKSB8IDA7XG4gIEhbN10gPSAoSFs3XSArIGgpIHwgMDtcbn1cblxuZnVuY3Rpb24gc2hhMjU2KG1lc3NhZ2UsIG9wdGlvbnMpIHs7XG4gIGlmIChtZXNzYWdlLmNvbnN0cnVjdG9yID09PSBTdHJpbmcpIHtcbiAgICBtZXNzYWdlID0gX2ltcG9ydHMuY29udmVydFN0cmluZy5VVEY4LnN0cmluZ1RvQnl0ZXMobWVzc2FnZSk7XG4gIH1cblxuICB2YXIgSCA9WyAweDZBMDlFNjY3LCAweEJCNjdBRTg1LCAweDNDNkVGMzcyLCAweEE1NEZGNTNBLFxuICAgICAgICAgICAweDUxMEU1MjdGLCAweDlCMDU2ODhDLCAweDFGODNEOUFCLCAweDVCRTBDRDE5IF07XG5cbiAgdmFyIG0gPSBieXRlc1RvV29yZHMobWVzc2FnZSk7XG4gIHZhciBsID0gbWVzc2FnZS5sZW5ndGggKiA4O1xuXG4gIG1bbCA+PiA1XSB8PSAweDgwIDw8ICgyNCAtIGwgJSAzMik7XG4gIG1bKChsICsgNjQgPj4gOSkgPDwgNCkgKyAxNV0gPSBsO1xuXG4gIGZvciAodmFyIGk9MCA7IGk8bS5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICBwcm9jZXNzQmxvY2soSCwgbSwgaSk7XG4gIH1cblxuICB2YXIgZGlnZXN0Ynl0ZXMgPSB3b3Jkc1RvQnl0ZXMoSCk7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuYXNCeXRlcyA/IGRpZ2VzdGJ5dGVzIDpcbiAgICAgICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5hc1N0cmluZyA/IF9pbXBvcnRzLmNvbnZlcnRTdHJpbmcuYnl0ZXNUb1N0cmluZyhkaWdlc3RieXRlcykgOlxuICAgICAgICAgX2ltcG9ydHMuYnl0ZXNUb0hleChkaWdlc3RieXRlcylcbn1cblxuc2hhMjU2LngyID0gZnVuY3Rpb24obWVzc2FnZSwgb3B0aW9ucykge1xuICByZXR1cm4gc2hhMjU2KHNoYTI1NihtZXNzYWdlLCB7IGFzQnl0ZXM6dHJ1ZSB9KSwgb3B0aW9ucylcbn1cblxufSh0aGlzKTtcbiIsImZldGNoID0gcmVxdWlyZSAnY3Jvc3MtZmV0Y2gnXG5zaGEyNTYgPSByZXF1aXJlICdzaGEyNTYnXG5TR04gPSByZXF1aXJlICcuLi8uLi9zZ24nXG5jbGllbnRDb29raWVTdG9yYWdlID0gcmVxdWlyZSAnLi4vLi4vc3RvcmFnZS9jbGllbnQtY29va2llJ1xuY2FsbGJhY2tRdWV1ZSA9IFtdXG5yZW5ld2VkID0gZmFsc2Vcblxuc2Vzc2lvbiA9XG4gICAgdHRsOiAxICogNjAgKiA2MCAqIDI0ICogNjBcblxuICAgIHNhdmVUb2tlbjogKHRva2VuKSAtPlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHRva2VuIHByb3ZpZGVkIGZvciBzYXZpbmcnKSBpZiBub3QgdG9rZW5cblxuICAgICAgICBTR04uY29uZmlnLnNldCBjb3JlU2Vzc2lvblRva2VuOiB0b2tlblxuXG4gICAgICAgIHNlc3Npb24uc2F2ZUNvb2tpZSgpXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBzYXZlQ2xpZW50SWQ6IChjbGllbnRJZCkgLT5cbiAgICAgICAgU0dOLmNvbmZpZy5zZXQgY29yZVNlc3Npb25DbGllbnRJZDogY2xpZW50SWRcblxuICAgICAgICBzZXNzaW9uLnNhdmVDb29raWUoKVxuXG4gICAgICAgIHJldHVyblxuXG4gICAgc2F2ZUNvb2tpZTogLT5cbiAgICAgICAgY2xpZW50Q29va2llU3RvcmFnZS5zZXQgJ3Nlc3Npb24nLFxuICAgICAgICAgICAgdG9rZW46IFNHTi5jb25maWcuZ2V0ICdjb3JlU2Vzc2lvblRva2VuJ1xuICAgICAgICAgICAgY2xpZW50X2lkOiBTR04uY29uZmlnLmdldCAnY29yZVNlc3Npb25DbGllbnRJZCdcblxuICAgICAgICByZXR1cm5cblxuICAgIGNyZWF0ZTogKGNhbGxiYWNrKSAtPlxuICAgICAgICBrZXkgPSBTR04uY29uZmlnLmdldCAnYXBwS2V5J1xuICAgICAgICB0dGwgPSBzZXNzaW9uLnR0bFxuXG4gICAgICAgIHJlcSA9IGZldGNoIFNHTi5jb25maWcuZ2V0KCdjb3JlVXJsJykgKyBcIi92Mi9zZXNzaW9ucz9hcGlfa2V5PSN7a2V5fSZ0b2tlbl90dGw9I3t0dGx9XCIsXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0J1xuXG4gICAgICAgIHJlcVxuICAgICAgICAgICAgLnRoZW4gKHJlc3BvbnNlKSAtPlxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuIChqc29uKSAtPlxuICAgICAgICAgICAgICAgICAgICBpZiByZXNwb25zZS5zdGF0dXMgaXMgMjAxXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLnNhdmVUb2tlbiBqc29uLnRva2VuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLnNhdmVDbGllbnRJZCBqc29uLmNsaWVudF9pZFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayBudWxsLCBqc29uXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrIG5ldyBFcnJvcignQ291bGQgbm90IGNyZWF0ZSBzZXNzaW9uJylcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgLmNhdGNoIChlcnIpIC0+XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgZXJyXG5cbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgXG4gICAgICAgIHJldHVyblxuICAgIFxuICAgIHVwZGF0ZTogKGNhbGxiYWNrKSAtPlxuICAgICAgICBoZWFkZXJzID0ge31cbiAgICAgICAgdG9rZW4gPSBTR04uY29uZmlnLmdldCAnY29yZVNlc3Npb25Ub2tlbidcbiAgICAgICAgYXBwU2VjcmV0ID0gU0dOLmNvbmZpZy5nZXQgJ2FwcFNlY3JldCdcblxuICAgICAgICBoZWFkZXJzWydYLVRva2VuJ10gPSB0b2tlblxuICAgICAgICBoZWFkZXJzWydYLVNpZ25hdHVyZSddID0gc2Vzc2lvbi5zaWduIGFwcFNlY3JldCwgdG9rZW4gaWYgYXBwU2VjcmV0P1xuXG4gICAgICAgIHJlcSA9IGZldGNoIFNHTi5jb25maWcuZ2V0KCdjb3JlVXJsJykgKyAnL3YyL3Nlc3Npb25zJyxcbiAgICAgICAgICAgIG1ldGhvZDogJ3B1dCdcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcblxuICAgICAgICByZXFcbiAgICAgICAgICAgIC50aGVuIChyZXNwb25zZSkgLT5cbiAgICAgICAgICAgICAgICByZXNwb25zZS5qc29uKCkudGhlbiAoanNvbikgLT5cbiAgICAgICAgICAgICAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzIGlzIDIwMFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5zYXZlVG9rZW4ganNvbi50b2tlblxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5zYXZlQ2xpZW50SWQganNvbi5jbGllbnRfaWRcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgbnVsbCwganNvblxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayBuZXcgRXJyb3IoJ0NvdWxkIG5vdCB1cGRhdGUgc2Vzc2lvbicpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIC5jYXRjaCAoZXJyKSAtPlxuICAgICAgICAgICAgICAgIGNhbGxiYWNrIGVyclxuXG4gICAgICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICByZW5ldzogKGNhbGxiYWNrKSAtPlxuICAgICAgICBoZWFkZXJzID0ge31cbiAgICAgICAgdG9rZW4gPSBTR04uY29uZmlnLmdldCAnY29yZVNlc3Npb25Ub2tlbidcbiAgICAgICAgYXBwU2VjcmV0ID0gU0dOLmNvbmZpZy5nZXQgJ2FwcFNlY3JldCdcblxuICAgICAgICBoZWFkZXJzWydYLVRva2VuJ10gPSB0b2tlblxuICAgICAgICBoZWFkZXJzWydYLVNpZ25hdHVyZSddID0gc2Vzc2lvbi5zaWduIGFwcFNlY3JldCwgdG9rZW4gaWYgYXBwU2VjcmV0XG5cbiAgICAgICAgcmVxID0gZmV0Y2ggU0dOLmNvbmZpZy5nZXQoJ2NvcmVVcmwnKSArICcvdjIvc2Vzc2lvbnMnLFxuICAgICAgICAgICAgbWV0aG9kOiAncHV0J1xuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVyc1xuXG4gICAgICAgIHJlcVxuICAgICAgICAgICAgLnRoZW4gKHJlc3BvbnNlKSAtPlxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuIChqc29uKSAtPlxuICAgICAgICAgICAgICAgICAgICBpZiByZXNwb25zZS5zdGF0dXMgaXMgMjAwXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLnNhdmVUb2tlbiBqc29uLnRva2VuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLnNhdmVDbGllbnRJZCBqc29uLmNsaWVudF9pZFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayBudWxsLCBqc29uXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrIG5ldyBFcnJvcignQ291bGQgbm90IHJlbmV3IHNlc3Npb24nKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAuY2F0Y2ggKGVycikgLT5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayBlcnJcblxuICAgICAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIHJldHVyblxuXG4gICAgZW5zdXJlOiAoY2FsbGJhY2spIC0+XG4gICAgICAgIHF1ZXVlQ291bnQgPSBjYWxsYmFja1F1ZXVlLmxlbmd0aFxuICAgICAgICBjb21wbGV0ZSA9IChlcnIpIC0+XG4gICAgICAgICAgICBjYWxsYmFja1F1ZXVlID0gY2FsbGJhY2tRdWV1ZS5maWx0ZXIgKGZuKSAtPlxuICAgICAgICAgICAgICAgIGZuIGVyclxuXG4gICAgICAgICAgICAgICAgZmFsc2VcblxuICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgY2FsbGJhY2tRdWV1ZS5wdXNoIGNhbGxiYWNrXG5cbiAgICAgICAgaWYgcXVldWVDb3VudCBpcyAwXG4gICAgICAgICAgICBpZiBub3QgU0dOLmNvbmZpZy5nZXQoJ2NvcmVTZXNzaW9uVG9rZW4nKT9cbiAgICAgICAgICAgICAgICBzZXNzaW9uLmNyZWF0ZSBjb21wbGV0ZVxuICAgICAgICAgICAgZWxzZSBpZiByZW5ld2VkIGlzIGZhbHNlXG4gICAgICAgICAgICAgICAgcmVuZXdlZCA9IHRydWVcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnJlbmV3IChlcnIpIC0+XG4gICAgICAgICAgICAgICAgICAgIGlmIGVycj9cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uY3JlYXRlIGNvbXBsZXRlXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlKClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKClcblxuICAgICAgICByZXR1cm5cblxuICAgIHNpZ246IChhcHBTZWNyZXQsIHRva2VuKSAtPlxuICAgICAgICBzaGEyNTYgW2FwcFNlY3JldCwgdG9rZW5dLmpvaW4oJycpXG5cbm1vZHVsZS5leHBvcnRzID0gc2Vzc2lvblxuIiwiU0dOID0gcmVxdWlyZSAnLi4vLi4vc2duJ1xucmVxdWVzdCA9IHJlcXVpcmUgJy4vcmVxdWVzdCdcbnNlc3Npb24gPSByZXF1aXJlICcuL3Nlc3Npb24nXG5cbm1vZHVsZS5leHBvcnRzID1cbiAgICByZXF1ZXN0OiByZXF1ZXN0XG5cbiAgICBzZXNzaW9uOiBzZXNzaW9uXG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgZ2xvYmFsLnZlcnNvID0gZmFjdG9yeSgpO1xufSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgdmFyIF9pc09iamVjdCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG4gIH07XG5cbiAgdmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbiAgdmFyIF9jb2YgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcbiAgXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG4gIH1cblxuICB2YXIgX2NvcmUgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG4gIHZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMCcgfTtcbiAgaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgfSk7XG4gIHZhciBfY29yZV8xID0gX2NvcmUudmVyc2lvbjtcblxuICB2YXIgX2dsb2JhbCA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbiAgdmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gICAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gIGlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgfSk7XG5cbiAgdmFyIF9saWJyYXJ5ID0gZmFsc2U7XG5cbiAgdmFyIF9zaGFyZWQgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG4gIHZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbiAgdmFyIHN0b3JlID0gX2dsb2JhbFtTSEFSRURdIHx8IChfZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbiAgKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbiAgfSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICAgIHZlcnNpb246IF9jb3JlLnZlcnNpb24sXG4gICAgbW9kZTogJ2dsb2JhbCcsXG4gICAgY29weXJpZ2h0OiAnwqkgMjAxOCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbiAgfSk7XG4gIH0pO1xuXG4gIHZhciBpZCA9IDA7XG4gIHZhciBweCA9IE1hdGgucmFuZG9tKCk7XG4gIHZhciBfdWlkID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG4gIH07XG5cbiAgdmFyIF93a3MgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG4gIHZhciBzdG9yZSA9IF9zaGFyZWQoJ3drcycpO1xuXG4gIHZhciBTeW1ib2wgPSBfZ2xvYmFsLlN5bWJvbDtcbiAgdmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbiAgdmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiBfdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG4gIH07XG5cbiAgJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiAgfSk7XG5cbiAgLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG5cblxuICB2YXIgTUFUQ0ggPSBfd2tzKCdtYXRjaCcpO1xuICB2YXIgX2lzUmVnZXhwID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIGlzUmVnRXhwO1xuICAgIHJldHVybiBfaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogX2NvZihpdCkgPT0gJ1JlZ0V4cCcpO1xuICB9O1xuXG4gIHZhciBfYW5PYmplY3QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoIV9pc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgICByZXR1cm4gaXQ7XG4gIH07XG5cbiAgdmFyIF9hRnVuY3Rpb24gPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gICAgcmV0dXJuIGl0O1xuICB9O1xuXG4gIC8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxuXG5cbiAgdmFyIFNQRUNJRVMgPSBfd2tzKCdzcGVjaWVzJyk7XG4gIHZhciBfc3BlY2llc0NvbnN0cnVjdG9yID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgICB2YXIgQyA9IF9hbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgICB2YXIgUztcbiAgICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gX2FuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogX2FGdW5jdGlvbihTKTtcbiAgfTtcblxuICAvLyA3LjEuNCBUb0ludGVnZXJcbiAgdmFyIGNlaWwgPSBNYXRoLmNlaWw7XG4gIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBfdG9JbnRlZ2VyID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG4gIH07XG5cbiAgLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbiAgdmFyIF9kZWZpbmVkID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICAgIHJldHVybiBpdDtcbiAgfTtcblxuICAvLyB0cnVlICAtPiBTdHJpbmcjYXRcbiAgLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG4gIHZhciBfc3RyaW5nQXQgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICAgIHZhciBzID0gU3RyaW5nKF9kZWZpbmVkKHRoYXQpKTtcbiAgICAgIHZhciBpID0gX3RvSW50ZWdlcihwb3MpO1xuICAgICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICAgIHZhciBhLCBiO1xuICAgICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGF0ID0gX3N0cmluZ0F0KHRydWUpO1xuXG4gICAvLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG4gIHZhciBfYWR2YW5jZVN0cmluZ0luZGV4ID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gICAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBhdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG4gIH07XG5cbiAgLy8gNy4xLjE1IFRvTGVuZ3RoXG5cbiAgdmFyIG1pbiA9IE1hdGgubWluO1xuICB2YXIgX3RvTGVuZ3RoID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0ID4gMCA/IG1pbihfdG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG4gIH07XG5cbiAgLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcblxuICB2YXIgVEFHID0gX3drcygndG9TdHJpbmdUYWcnKTtcbiAgLy8gRVMzIHdyb25nIGhlcmVcbiAgdmFyIEFSRyA9IF9jb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4gIC8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG4gIHZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gaXRba2V5XTtcbiAgICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgfTtcblxuICB2YXIgX2NsYXNzb2YgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTywgVCwgQjtcbiAgICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgICA6IEFSRyA/IF9jb2YoTylcbiAgICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICAgIDogKEIgPSBfY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbiAgfTtcblxuICB2YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAgIC8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xuICB2YXIgX3JlZ2V4cEV4ZWNBYnN0cmFjdCA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gICAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gICAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgaWYgKF9jbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICAgIH1cbiAgICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbiAgfTtcblxuICAvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xuXG4gIHZhciBfZmxhZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRoYXQgPSBfYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICAgIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICAgIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuICAvLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbiAgLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4gIC8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbiAgdmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbiAgdmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxuICB2YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG4gIHZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciByZTEgPSAvYS8sXG4gICAgICAgIHJlMiA9IC9iKi9nO1xuICAgIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gICAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbiAgfSkoKTtcblxuICAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG4gIHZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbiAgdmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbiAgaWYgKFBBVENIKSB7XG4gICAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgICAgdmFyIHJlID0gdGhpcztcbiAgICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCBfZmxhZ3MuY2FsbChyZSkpO1xuICAgICAgfVxuICAgICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgICB9XG4gICAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH07XG4gIH1cblxuICB2YXIgX3JlZ2V4cEV4ZWMgPSBwYXRjaGVkRXhlYztcblxuICB2YXIgX2ZhaWxzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICEhZXhlYygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfTtcblxuICAvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG4gIHZhciBfZGVzY3JpcHRvcnMgPSAhX2ZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbiAgfSk7XG5cbiAgdmFyIGRvY3VtZW50JDEgPSBfZ2xvYmFsLmRvY3VtZW50O1xuICAvLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbiAgdmFyIGlzID0gX2lzT2JqZWN0KGRvY3VtZW50JDEpICYmIF9pc09iamVjdChkb2N1bWVudCQxLmNyZWF0ZUVsZW1lbnQpO1xuICB2YXIgX2RvbUNyZWF0ZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpcyA/IGRvY3VtZW50JDEuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbiAgfTtcblxuICB2YXIgX2llOERvbURlZmluZSA9ICFfZGVzY3JpcHRvcnMgJiYgIV9mYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfZG9tQ3JlYXRlKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG4gIH0pO1xuXG4gIC8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxuXG4gIC8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4gIC8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG4gIHZhciBfdG9QcmltaXRpdmUgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgICBpZiAoIV9pc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgICB2YXIgZm4sIHZhbDtcbiAgICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIV9pc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gICAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFfaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICAgIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIV9pc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuICB9O1xuXG4gIHZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuICB2YXIgZiA9IF9kZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgICBfYW5PYmplY3QoTyk7XG4gICAgUCA9IF90b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICBfYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gICAgaWYgKF9pZThEb21EZWZpbmUpIHRyeSB7XG4gICAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gICAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gICAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgICByZXR1cm4gTztcbiAgfTtcblxuICB2YXIgX29iamVjdERwID0ge1xuICBcdGY6IGZcbiAgfTtcblxuICB2YXIgX3Byb3BlcnR5RGVzYyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH07XG4gIH07XG5cbiAgdmFyIF9oaWRlID0gX2Rlc2NyaXB0b3JzID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBfb2JqZWN0RHAuZihvYmplY3QsIGtleSwgX3Byb3BlcnR5RGVzYygxLCB2YWx1ZSkpO1xuICB9IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcblxuICB2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIF9oYXMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xuICB9O1xuXG4gIHZhciBfcmVkZWZpbmUgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG4gIHZhciBTUkMgPSBfdWlkKCdzcmMnKTtcbiAgdmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG4gIHZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xuICB2YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG4gIF9jb3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xuXG4gIChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICAgIGlmIChpc0Z1bmN0aW9uKSBfaGFzKHZhbCwgJ25hbWUnKSB8fCBfaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgICBpZiAoaXNGdW5jdGlvbikgX2hhcyh2YWwsIFNSQykgfHwgX2hpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgICBpZiAoTyA9PT0gX2dsb2JhbCkge1xuICAgICAgT1trZXldID0gdmFsO1xuICAgIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICAgIGRlbGV0ZSBPW2tleV07XG4gICAgICBfaGlkZShPLCBrZXksIHZhbCk7XG4gICAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICAgIE9ba2V5XSA9IHZhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgX2hpZGUoTywga2V5LCB2YWwpO1xuICAgIH1cbiAgLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG4gIH0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xuICB9KTtcblxuICAvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcblxuICB2YXIgX2N0eCA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gICAgX2FGdW5jdGlvbihmbik7XG4gICAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICAgIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICAgIH07XG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICAgIH07XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbiAgdmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gICAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gICAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gICAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gICAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gICAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IF9nbG9iYWwgOiBJU19TVEFUSUMgPyBfZ2xvYmFsW25hbWVdIHx8IChfZ2xvYmFsW25hbWVdID0ge30pIDogKF9nbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gICAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBfY29yZSA6IF9jb3JlW25hbWVdIHx8IChfY29yZVtuYW1lXSA9IHt9KTtcbiAgICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICAgIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgICBleHAgPSBJU19CSU5EICYmIG93biA/IF9jdHgob3V0LCBfZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IF9jdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICAgIGlmICh0YXJnZXQpIF9yZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAgIC8vIGV4cG9ydFxuICAgICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIF9oaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgICB9XG4gIH07XG4gIF9nbG9iYWwuY29yZSA9IF9jb3JlO1xuICAvLyB0eXBlIGJpdG1hcFxuICAkZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuICAkZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuICAkZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuICAkZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4gICRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuICAkZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiAgJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4gICRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxuICB2YXIgX2V4cG9ydCA9ICRleHBvcnQ7XG5cbiAgX2V4cG9ydCh7XG4gICAgdGFyZ2V0OiAnUmVnRXhwJyxcbiAgICBwcm90bzogdHJ1ZSxcbiAgICBmb3JjZWQ6IF9yZWdleHBFeGVjICE9PSAvLi8uZXhlY1xuICB9LCB7XG4gICAgZXhlYzogX3JlZ2V4cEV4ZWNcbiAgfSk7XG5cbiAgdmFyIFNQRUNJRVMkMSA9IF93a3MoJ3NwZWNpZXMnKTtcblxuICB2YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhX2ZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gICAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAgIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICAgIHZhciByZSA9IC8uLztcbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3JztcbiAgfSk7XG5cbiAgdmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9IChmdW5jdGlvbiAoKSB7XG4gICAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gICAgdmFyIHJlID0gLyg/OikvO1xuICAgIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDIgJiYgcmVzdWx0WzBdID09PSAnYScgJiYgcmVzdWx0WzFdID09PSAnYic7XG4gIH0pKCk7XG5cbiAgdmFyIF9maXhSZVdrcyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICAgIHZhciBTWU1CT0wgPSBfd2tzKEtFWSk7XG5cbiAgICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFfZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgICAgdmFyIE8gPSB7fTtcbiAgICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICAgIH0pO1xuXG4gICAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCA/ICFfZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgICB2YXIgcmUgPSAvYS87XG4gICAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG4gICAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFUyQxXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgfVxuICAgICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gICAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoXG4gICAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICAgICkge1xuICAgICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgICAgdmFyIGZucyA9IGV4ZWMoXG4gICAgICAgIF9kZWZpbmVkLFxuICAgICAgICBTWU1CT0wsXG4gICAgICAgICcnW0tFWV0sXG4gICAgICAgIGZ1bmN0aW9uIG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gX3JlZ2V4cEV4ZWMpIHtcbiAgICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gICAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgICAgX3JlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgICAgX2hpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkbWluID0gTWF0aC5taW47XG4gIHZhciAkcHVzaCA9IFtdLnB1c2g7XG4gIHZhciAkU1BMSVQgPSAnc3BsaXQnO1xuICB2YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG4gIHZhciBMQVNUX0lOREVYJDEgPSAnbGFzdEluZGV4JztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgdmFyIFNVUFBPUlRTX1kgPSAhIShmdW5jdGlvbiAoKSB7IHRyeSB7IHJldHVybiBuZXcgUmVnRXhwKCd4JywgJ3knKTsgfSBjYXRjaCAoZSkge30gfSkoKTtcblxuICAvLyBAQHNwbGl0IGxvZ2ljXG4gIF9maXhSZVdrcygnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gICAgdmFyIGludGVybmFsU3BsaXQgPSAkc3BsaXQ7XG4gICAgaWYgKFxuICAgICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICAgICkge1xuICAgICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICAgIGlmICghX2lzUmVnZXhwKHNlcGFyYXRvcikpIHJldHVybiAkc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gNDI5NDk2NzI5NSA6IGxpbWl0ID4+PiAwO1xuICAgICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgICAgd2hpbGUgKG1hdGNoID0gX3JlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYJDFdO1xuICAgICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWCQxXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWCQxXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgICB9O1xuICAgIC8vIENoYWtyYSwgVjhcbiAgICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogJHNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBbXG4gICAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICAgIHJldHVybiBzcGxpdHRlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIH0sXG4gICAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAgIC8vXG4gICAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgICBmdW5jdGlvbiAocmVnZXhwLCBsaW1pdCkge1xuICAgICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09ICRzcGxpdCk7XG4gICAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgICB2YXIgcnggPSBfYW5PYmplY3QocmVnZXhwKTtcbiAgICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICAgIHZhciBDID0gX3NwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgICAoU1VQUE9SVFNfWSA/ICd5JyA6ICdnJyk7XG5cbiAgICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhTVVBQT1JUU19ZID8gcnggOiAnXig/OicgKyByeC5zb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyAweGZmZmZmZmZmIDogbGltaXQgPj4+IDA7XG4gICAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gX3JlZ2V4cEV4ZWNBYnN0cmFjdChzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgICAgdmFyIHAgPSAwO1xuICAgICAgICB2YXIgcSA9IDA7XG4gICAgICAgIHZhciBBID0gW107XG4gICAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBTVVBQT1JUU19ZID8gcSA6IDA7XG4gICAgICAgICAgdmFyIHogPSBfcmVnZXhwRXhlY0Fic3RyYWN0KHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICAgIHZhciBlO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAgIChlID0gJG1pbihfdG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBxID0gX2FkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgICByZXR1cm4gQTtcbiAgICAgIH1cbiAgICBdO1xuICB9KTtcblxuICAvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG4gIHZhciBVTlNDT1BBQkxFUyA9IF93a3MoJ3Vuc2NvcGFibGVzJyk7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuICBpZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSBfaGlkZShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xuICB2YXIgX2FkZFRvVW5zY29wYWJsZXMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG4gIH07XG5cbiAgdmFyIF9pdGVyU3RlcCA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICAgIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG4gIH07XG5cbiAgdmFyIF9pdGVyYXRvcnMgPSB7fTtcblxuICAvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgdmFyIF9pb2JqZWN0ID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gX2NvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xuICB9O1xuXG4gIC8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xuXG5cbiAgdmFyIF90b0lvYmplY3QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gX2lvYmplY3QoX2RlZmluZWQoaXQpKTtcbiAgfTtcblxuICB2YXIgbWF4ID0gTWF0aC5tYXg7XG4gIHZhciBtaW4kMSA9IE1hdGgubWluO1xuICB2YXIgX3RvQWJzb2x1dGVJbmRleCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gICAgaW5kZXggPSBfdG9JbnRlZ2VyKGluZGV4KTtcbiAgICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbiQxKGluZGV4LCBsZW5ndGgpO1xuICB9O1xuXG4gIC8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2ZcbiAgLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcblxuXG5cbiAgdmFyIF9hcnJheUluY2x1ZGVzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgICAgdmFyIE8gPSBfdG9Jb2JqZWN0KCR0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBfdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgdmFyIGluZGV4ID0gX3RvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgc2hhcmVkID0gX3NoYXJlZCgna2V5cycpO1xuXG4gIHZhciBfc2hhcmVkS2V5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSBfdWlkKGtleSkpO1xuICB9O1xuXG4gIHZhciBhcnJheUluZGV4T2YgPSBfYXJyYXlJbmNsdWRlcyhmYWxzZSk7XG4gIHZhciBJRV9QUk9UTyA9IF9zaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbiAgdmFyIF9vYmplY3RLZXlzSW50ZXJuYWwgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICAgIHZhciBPID0gX3RvSW9iamVjdChvYmplY3QpO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBfaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gICAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChfaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbiAgdmFyIF9lbnVtQnVnS2V5cyA9IChcbiAgICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuICApLnNwbGl0KCcsJyk7XG5cbiAgLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG5cblxuXG4gIHZhciBfb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICAgIHJldHVybiBfb2JqZWN0S2V5c0ludGVybmFsKE8sIF9lbnVtQnVnS2V5cyk7XG4gIH07XG5cbiAgdmFyIF9vYmplY3REcHMgPSBfZGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICAgIF9hbk9iamVjdChPKTtcbiAgICB2YXIga2V5cyA9IF9vYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIFA7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIF9vYmplY3REcC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICAgIHJldHVybiBPO1xuICB9O1xuXG4gIHZhciBkb2N1bWVudCQyID0gX2dsb2JhbC5kb2N1bWVudDtcbiAgdmFyIF9odG1sID0gZG9jdW1lbnQkMiAmJiBkb2N1bWVudCQyLmRvY3VtZW50RWxlbWVudDtcblxuICAvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcblxuXG5cbiAgdmFyIElFX1BST1RPJDEgPSBfc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuICB2YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4gIHZhciBQUk9UT1RZUEUkMSA9ICdwcm90b3R5cGUnO1xuXG4gIC8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbiAgdmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgICB2YXIgaWZyYW1lID0gX2RvbUNyZWF0ZSgnaWZyYW1lJyk7XG4gICAgdmFyIGkgPSBfZW51bUJ1Z0tleXMubGVuZ3RoO1xuICAgIHZhciBsdCA9ICc8JztcbiAgICB2YXIgZ3QgPSAnPic7XG4gICAgdmFyIGlmcmFtZURvY3VtZW50O1xuICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIF9odG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAgIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gICAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gICAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICAgIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICAgIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICAgIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRSQxXVtfZW51bUJ1Z0tleXNbaV1dO1xuICAgIHJldHVybiBjcmVhdGVEaWN0KCk7XG4gIH07XG5cbiAgdmFyIF9vYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoTyAhPT0gbnVsbCkge1xuICAgICAgRW1wdHlbUFJPVE9UWVBFJDFdID0gX2FuT2JqZWN0KE8pO1xuICAgICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgICBFbXB0eVtQUk9UT1RZUEUkMV0gPSBudWxsO1xuICAgICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgICAgcmVzdWx0W0lFX1BST1RPJDFdID0gTztcbiAgICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICAgIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBfb2JqZWN0RHBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG4gIH07XG5cbiAgdmFyIGRlZiA9IF9vYmplY3REcC5mO1xuXG4gIHZhciBUQUckMSA9IF93a3MoJ3RvU3RyaW5nVGFnJyk7XG5cbiAgdmFyIF9zZXRUb1N0cmluZ1RhZyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gICAgaWYgKGl0ICYmICFfaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUckMSkpIGRlZihpdCwgVEFHJDEsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xuICB9O1xuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4gIC8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG4gIF9oaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBfd2tzKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuICB2YXIgX2l0ZXJDcmVhdGUgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBfb2JqZWN0Q3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IF9wcm9wZXJ0eURlc2MoMSwgbmV4dCkgfSk7XG4gICAgX3NldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xuICB9O1xuXG4gIC8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcblxuICB2YXIgX3RvT2JqZWN0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIE9iamVjdChfZGVmaW5lZChpdCkpO1xuICB9O1xuXG4gIC8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG5cblxuICB2YXIgSUVfUFJPVE8kMiA9IF9zaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG4gIHZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgdmFyIF9vYmplY3RHcG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgICBPID0gX3RvT2JqZWN0KE8pO1xuICAgIGlmIChfaGFzKE8sIElFX1BST1RPJDIpKSByZXR1cm4gT1tJRV9QUk9UTyQyXTtcbiAgICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG4gIH07XG5cbiAgdmFyIElURVJBVE9SID0gX3drcygnaXRlcmF0b3InKTtcbiAgdmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIHZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbiAgdmFyIEtFWVMgPSAna2V5cyc7XG4gIHZhciBWQUxVRVMgPSAndmFsdWVzJztcblxuICB2YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbiAgdmFyIF9pdGVyRGVmaW5lID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAgIF9pdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9O1xuICAgIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gICAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICAgIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICAgIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICAgIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICAgIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gICAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICAgIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAgIC8vIEZpeCBuYXRpdmVcbiAgICBpZiAoJGFueU5hdGl2ZSkge1xuICAgICAgSXRlcmF0b3JQcm90b3R5cGUgPSBfb2JqZWN0R3BvKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICAgIF9zZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICAgIGlmICghX2xpYnJhcnkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBfaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gICAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgICB9XG4gICAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gICAgaWYgKCghX2xpYnJhcnkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgICAgX2hpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gICAgfVxuICAgIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgICBfaXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gICAgX2l0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgICBpZiAoREVGQVVMVCkge1xuICAgICAgbWV0aG9kcyA9IHtcbiAgICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgICB9O1xuICAgICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSBfcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICAgIH0gZWxzZSBfZXhwb3J0KF9leHBvcnQuUCArIF9leHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gICAgfVxuICAgIHJldHVybiBtZXRob2RzO1xuICB9O1xuXG4gIC8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbiAgLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbiAgLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuICAvLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbiAgdmFyIGVzNl9hcnJheV9pdGVyYXRvciA9IF9pdGVyRGVmaW5lKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICB0aGlzLl90ID0gX3RvSW9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICAgIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG4gIH0sIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgTyA9IHRoaXMuX3Q7XG4gICAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICAgIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gX2l0ZXJTdGVwKDEpO1xuICAgIH1cbiAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBfaXRlclN0ZXAoMCwgaW5kZXgpO1xuICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gX2l0ZXJTdGVwKDAsIE9baW5kZXhdKTtcbiAgICByZXR1cm4gX2l0ZXJTdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbiAgfSwgJ3ZhbHVlcycpO1xuXG4gIC8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbiAgX2l0ZXJhdG9ycy5Bcmd1bWVudHMgPSBfaXRlcmF0b3JzLkFycmF5O1xuXG4gIF9hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG4gIF9hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbiAgX2FkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcblxuICB2YXIgSVRFUkFUT1IkMSA9IF93a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gX3drcygndG9TdHJpbmdUYWcnKTtcbiAgdmFyIEFycmF5VmFsdWVzID0gX2l0ZXJhdG9ycy5BcnJheTtcblxuICB2YXIgRE9NSXRlcmFibGVzID0ge1xuICAgIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICAgIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgICBET01SZWN0TGlzdDogZmFsc2UsXG4gICAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gICAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICAgIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgICBGaWxlTGlzdDogZmFsc2UsXG4gICAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICAgIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICAgIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICAgIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICAgIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gICAgTm9kZUxpc3Q6IHRydWUsXG4gICAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gICAgUGx1Z2luOiBmYWxzZSxcbiAgICBQbHVnaW5BcnJheTogZmFsc2UsXG4gICAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gICAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gICAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICAgIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gICAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gICAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gICAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gICAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICAgIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICAgIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICAgIFRvdWNoTGlzdDogZmFsc2VcbiAgfTtcblxuICBmb3IgKHZhciBjb2xsZWN0aW9ucyA9IF9vYmplY3RLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICAgIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgICB2YXIgQ29sbGVjdGlvbiA9IF9nbG9iYWxbTkFNRV07XG4gICAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgICB2YXIga2V5O1xuICAgIGlmIChwcm90bykge1xuICAgICAgaWYgKCFwcm90b1tJVEVSQVRPUiQxXSkgX2hpZGUocHJvdG8sIElURVJBVE9SJDEsIEFycmF5VmFsdWVzKTtcbiAgICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIF9oaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICAgIF9pdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gZXM2X2FycmF5X2l0ZXJhdG9yKSBpZiAoIXByb3RvW2tleV0pIF9yZWRlZmluZShwcm90bywga2V5LCBlczZfYXJyYXlfaXRlcmF0b3Jba2V5XSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBfdHlwZW9mKG9iaik7XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgdmFyIF9zdHJpY3RNZXRob2QgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgICByZXR1cm4gISFtZXRob2QgJiYgX2ZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgJHNvcnQgPSBbXS5zb3J0O1xuICB2YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuICBfZXhwb3J0KF9leHBvcnQuUCArIF9leHBvcnQuRiAqIChfZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIElFOC1cbiAgICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbiAgfSkgfHwgIV9mYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gVjggYnVnXG4gICAgdGVzdC5zb3J0KG51bGwpO1xuICAgIC8vIE9sZCBXZWJLaXRcbiAgfSkgfHwgIV9zdHJpY3RNZXRob2QoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAgIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgICA/ICRzb3J0LmNhbGwoX3RvT2JqZWN0KHRoaXMpKVxuICAgICAgICA6ICRzb3J0LmNhbGwoX3RvT2JqZWN0KHRoaXMpLCBfYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG5cblxuXG4gIHZhciBfb2JqZWN0U2FwID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICAgIHZhciBmbiA9IChfY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gICAgdmFyIGV4cCA9IHt9O1xuICAgIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICAgX2V4cG9ydChfZXhwb3J0LlMgKyBfZXhwb3J0LkYgKiBfZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xuICB9O1xuXG4gIC8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxuXG5cblxuICBfb2JqZWN0U2FwKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgICByZXR1cm4gX29iamVjdEtleXMoX3RvT2JqZWN0KGl0KSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgdmFyIGYkMSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgdmFyIF9vYmplY3RHb3BzID0ge1xuICBcdGY6IGYkMVxuICB9O1xuXG4gIHZhciBmJDIgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuICB2YXIgX29iamVjdFBpZSA9IHtcbiAgXHRmOiBmJDJcbiAgfTtcblxuICAvLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG5cblxuXG5cblxuICB2YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbiAgLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG4gIHZhciBfb2JqZWN0QXNzaWduID0gISRhc3NpZ24gfHwgX2ZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgQSA9IHt9O1xuICAgIHZhciBCID0ge307XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIFMgPSBTeW1ib2woKTtcbiAgICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gICAgQVtTXSA9IDc7XG4gICAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gICAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG4gIH0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgVCA9IF90b09iamVjdCh0YXJnZXQpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaW5kZXggPSAxO1xuICAgIHZhciBnZXRTeW1ib2xzID0gX29iamVjdEdvcHMuZjtcbiAgICB2YXIgaXNFbnVtID0gX29iamVjdFBpZS5mO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICAgIHZhciBTID0gX2lvYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IF9vYmplY3RLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IF9vYmplY3RLZXlzKFMpO1xuICAgICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgICAgdmFyIGogPSAwO1xuICAgICAgdmFyIGtleTtcbiAgICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xuICAgIH0gcmV0dXJuIFQ7XG4gIH0gOiAkYXNzaWduO1xuXG4gIC8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG5cblxuICBfZXhwb3J0KF9leHBvcnQuUyArIF9leHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiBfb2JqZWN0QXNzaWduIH0pO1xuXG4gIHZhciBtYXgkMSA9IE1hdGgubWF4O1xuICB2YXIgbWluJDIgPSBNYXRoLm1pbjtcbiAgdmFyIGZsb29yJDEgPSBNYXRoLmZsb29yO1xuICB2YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG4gIHZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmYCddfFxcZFxcZD8pL2c7XG5cbiAgdmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbiAgfTtcblxuICAvLyBAQHJlcGxhY2UgbG9naWNcbiAgX2ZpeFJlV2tzKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgICByZXR1cm4gW1xuICAgICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgICAgfSxcbiAgICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgICB2YXIgcnggPSBfYW5PYmplY3QocmVnZXhwKTtcbiAgICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IF9yZWdleHBFeGVjQWJzdHJhY3QocngsIFMpO1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcbiAgICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBfYWR2YW5jZVN0cmluZ0luZGV4KFMsIF90b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4JDEobWluJDIoX3RvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgICAgfVxuICAgIF07XG5cbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxuICAgIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICAgICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmFtZWRDYXB0dXJlcyA9IF90b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgICAgfVxuICAgICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBjaDtcbiAgICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgICB2YXIgZiA9IGZsb29yJDEobiAvIDEwKTtcbiAgICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBjaDtcbiAgICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgICByZXR1cm4gY2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qISBIYW1tZXIuSlMgLSB2Mi4wLjcgLSAyMDE2LTA0LTIyXG4gICAqIGh0dHA6Ly9oYW1tZXJqcy5naXRodWIuaW8vXG4gICAqXG4gICAqIENvcHlyaWdodCAoYykgMjAxNiBKb3JpayBUYW5nZWxkZXI7XG4gICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAqL1xuICB2YXIgVkVORE9SX1BSRUZJWEVTID0gWycnLCAnd2Via2l0JywgJ01veicsICdNUycsICdtcycsICdvJ107XG5cbiAgdmFyIFRFU1RfRUxFTUVOVCA9IGZ1bmN0aW9uIFRFU1RfRUxFTUVOVCgpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIH07XG5cbiAgdmFyIFRZUEVfRlVOQ1RJT04gPSAnZnVuY3Rpb24nO1xuICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xuICB2YXIgYWJzID0gTWF0aC5hYnM7XG4gIHZhciBub3cgPSBEYXRlLm5vdztcbiAgLyoqXG4gICAqIHNldCBhIHRpbWVvdXQgd2l0aCBhIGdpdmVuIHNjb3BlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lb3V0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIHNldFRpbWVvdXRDb250ZXh0KGZuLCB0aW1lb3V0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoYmluZEZuKGZuLCBjb250ZXh0KSwgdGltZW91dCk7XG4gIH1cbiAgLyoqXG4gICAqIGlmIHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheSwgd2Ugd2FudCB0byBleGVjdXRlIHRoZSBmbiBvbiBlYWNoIGVudHJ5XG4gICAqIGlmIGl0IGFpbnQgYW4gYXJyYXkgd2UgZG9uJ3Qgd2FudCB0byBkbyBhIHRoaW5nLlxuICAgKiB0aGlzIGlzIHVzZWQgYnkgYWxsIHRoZSBtZXRob2RzIHRoYXQgYWNjZXB0IGEgc2luZ2xlIGFuZCBhcnJheSBhcmd1bWVudC5cbiAgICogQHBhcmFtIHsqfEFycmF5fSBhcmdcbiAgICogQHBhcmFtIHtTdHJpbmd9IGZuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dF1cbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gaW52b2tlQXJyYXlBcmcoYXJnLCBmbiwgY29udGV4dCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgIGVhY2goYXJnLCBjb250ZXh0W2ZuXSwgY29udGV4dCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIHdhbGsgb2JqZWN0cyBhbmQgYXJyYXlzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0b3JcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAgICovXG5cblxuICBmdW5jdGlvbiBlYWNoKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICB2YXIgaTtcblxuICAgIGlmICghb2JqKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9iai5mb3JFYWNoKSB7XG4gICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCk7XG4gICAgfSBlbHNlIGlmIChvYmoubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGkgPSAwO1xuXG4gICAgICB3aGlsZSAoaSA8IG9iai5sZW5ndGgpIHtcbiAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaik7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICBvYmouaGFzT3duUHJvcGVydHkoaSkgJiYgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiB3cmFwIGEgbWV0aG9kIHdpdGggYSBkZXByZWNhdGlvbiB3YXJuaW5nIGFuZCBzdGFjayB0cmFjZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXRob2RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIG5ldyBmdW5jdGlvbiB3cmFwcGluZyB0aGUgc3VwcGxpZWQgbWV0aG9kLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZShtZXRob2QsIG5hbWUsIG1lc3NhZ2UpIHtcbiAgICB2YXIgZGVwcmVjYXRpb25NZXNzYWdlID0gJ0RFUFJFQ0FURUQgTUVUSE9EOiAnICsgbmFtZSArICdcXG4nICsgbWVzc2FnZSArICcgQVQgXFxuJztcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGUgPSBuZXcgRXJyb3IoJ2dldC1zdGFjay10cmFjZScpO1xuICAgICAgdmFyIHN0YWNrID0gZSAmJiBlLnN0YWNrID8gZS5zdGFjay5yZXBsYWNlKC9eW15cXChdKz9bXFxuJF0vZ20sICcnKS5yZXBsYWNlKC9eXFxzK2F0XFxzKy9nbSwgJycpLnJlcGxhY2UoL15PYmplY3QuPGFub255bW91cz5cXHMqXFwoL2dtLCAne2Fub255bW91c30oKUAnKSA6ICdVbmtub3duIFN0YWNrIFRyYWNlJztcbiAgICAgIHZhciBsb2cgPSB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUud2FybiB8fCB3aW5kb3cuY29uc29sZS5sb2cpO1xuXG4gICAgICBpZiAobG9nKSB7XG4gICAgICAgIGxvZy5jYWxsKHdpbmRvdy5jb25zb2xlLCBkZXByZWNhdGlvbk1lc3NhZ2UsIHN0YWNrKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIGV4dGVuZCBvYmplY3QuXG4gICAqIG1lYW5zIHRoYXQgcHJvcGVydGllcyBpbiBkZXN0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gYnkgdGhlIG9uZXMgaW4gc3JjLlxuICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBvYmplY3RzX3RvX2Fzc2lnblxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSB0YXJnZXRcbiAgICovXG5cblxuICB2YXIgYXNzaWduO1xuXG4gIGlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQpIHtcbiAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdXRwdXQgPSBPYmplY3QodGFyZ2V0KTtcblxuICAgICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF07XG5cbiAgICAgICAgaWYgKHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGZvciAodmFyIG5leHRLZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KG5leHRLZXkpKSB7XG4gICAgICAgICAgICAgIG91dHB1dFtuZXh0S2V5XSA9IHNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG4gIH1cbiAgLyoqXG4gICAqIGV4dGVuZCBvYmplY3QuXG4gICAqIG1lYW5zIHRoYXQgcHJvcGVydGllcyBpbiBkZXN0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gYnkgdGhlIG9uZXMgaW4gc3JjLlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGVzdFxuICAgKiBAcGFyYW0ge09iamVjdH0gc3JjXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW21lcmdlPWZhbHNlXVxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBkZXN0XG4gICAqL1xuXG5cbiAgdmFyIGV4dGVuZCA9IGRlcHJlY2F0ZShmdW5jdGlvbiBleHRlbmQoZGVzdCwgc3JjLCBtZXJnZSkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc3JjKTtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGtleXMubGVuZ3RoKSB7XG4gICAgICBpZiAoIW1lcmdlIHx8IG1lcmdlICYmIGRlc3Rba2V5c1tpXV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZXN0W2tleXNbaV1dID0gc3JjW2tleXNbaV1dO1xuICAgICAgfVxuXG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc3Q7XG4gIH0sICdleHRlbmQnLCAnVXNlIGBhc3NpZ25gLicpO1xuICAvKipcbiAgICogbWVyZ2UgdGhlIHZhbHVlcyBmcm9tIHNyYyBpbiB0aGUgZGVzdC5cbiAgICogbWVhbnMgdGhhdCBwcm9wZXJ0aWVzIHRoYXQgZXhpc3QgaW4gZGVzdCB3aWxsIG5vdCBiZSBvdmVyd3JpdHRlbiBieSBzcmNcbiAgICogQHBhcmFtIHtPYmplY3R9IGRlc3RcbiAgICogQHBhcmFtIHtPYmplY3R9IHNyY1xuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBkZXN0XG4gICAqL1xuXG4gIHZhciBtZXJnZSA9IGRlcHJlY2F0ZShmdW5jdGlvbiBtZXJnZShkZXN0LCBzcmMpIHtcbiAgICByZXR1cm4gZXh0ZW5kKGRlc3QsIHNyYywgdHJ1ZSk7XG4gIH0sICdtZXJnZScsICdVc2UgYGFzc2lnbmAuJyk7XG4gIC8qKlxuICAgKiBzaW1wbGUgY2xhc3MgaW5oZXJpdGFuY2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2hpbGRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gYmFzZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGluaGVyaXQoY2hpbGQsIGJhc2UsIHByb3BlcnRpZXMpIHtcbiAgICB2YXIgYmFzZVAgPSBiYXNlLnByb3RvdHlwZSxcbiAgICAgICAgY2hpbGRQO1xuICAgIGNoaWxkUCA9IGNoaWxkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoYmFzZVApO1xuICAgIGNoaWxkUC5jb25zdHJ1Y3RvciA9IGNoaWxkO1xuICAgIGNoaWxkUC5fc3VwZXIgPSBiYXNlUDtcblxuICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICBhc3NpZ24oY2hpbGRQLCBwcm9wZXJ0aWVzKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIHNpbXBsZSBmdW5jdGlvbiBiaW5kXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAgICovXG5cblxuICBmdW5jdGlvbiBiaW5kRm4oZm4sIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYm91bmRGbigpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIGxldCBhIGJvb2xlYW4gdmFsdWUgYWxzbyBiZSBhIGZ1bmN0aW9uIHRoYXQgbXVzdCByZXR1cm4gYSBib29sZWFuXG4gICAqIHRoaXMgZmlyc3QgaXRlbSBpbiBhcmdzIHdpbGwgYmUgdXNlZCBhcyB0aGUgY29udGV4dFxuICAgKiBAcGFyYW0ge0Jvb2xlYW58RnVuY3Rpb259IHZhbFxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnc11cbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gYm9vbE9yRm4odmFsLCBhcmdzKSB7XG4gICAgaWYgKF90eXBlb2YodmFsKSA9PSBUWVBFX0ZVTkNUSU9OKSB7XG4gICAgICByZXR1cm4gdmFsLmFwcGx5KGFyZ3MgPyBhcmdzWzBdIHx8IHVuZGVmaW5lZCA6IHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuICAvKipcbiAgICogdXNlIHRoZSB2YWwyIHdoZW4gdmFsMSBpcyB1bmRlZmluZWRcbiAgICogQHBhcmFtIHsqfSB2YWwxXG4gICAqIEBwYXJhbSB7Kn0gdmFsMlxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG5cblxuICBmdW5jdGlvbiBpZlVuZGVmaW5lZCh2YWwxLCB2YWwyKSB7XG4gICAgcmV0dXJuIHZhbDEgPT09IHVuZGVmaW5lZCA/IHZhbDIgOiB2YWwxO1xuICB9XG4gIC8qKlxuICAgKiBhZGRFdmVudExpc3RlbmVyIHdpdGggbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2VcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcnModGFyZ2V0LCB0eXBlcywgaGFuZGxlcikge1xuICAgIGVhY2goc3BsaXRTdHIodHlwZXMpLCBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiByZW1vdmVFdmVudExpc3RlbmVyIHdpdGggbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2VcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGFyZ2V0LCB0eXBlcywgaGFuZGxlcikge1xuICAgIGVhY2goc3BsaXRTdHIodHlwZXMpLCBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBmaW5kIGlmIGEgbm9kZSBpcyBpbiB0aGUgZ2l2ZW4gcGFyZW50XG4gICAqIEBtZXRob2QgaGFzUGFyZW50XG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50XG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IGZvdW5kXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gaGFzUGFyZW50KG5vZGUsIHBhcmVudCkge1xuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICBpZiAobm9kZSA9PSBwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBzbWFsbCBpbmRleE9mIHdyYXBwZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICAgKiBAcGFyYW0ge1N0cmluZ30gZmluZFxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gZm91bmRcbiAgICovXG5cblxuICBmdW5jdGlvbiBpblN0cihzdHIsIGZpbmQpIHtcbiAgICByZXR1cm4gc3RyLmluZGV4T2YoZmluZCkgPiAtMTtcbiAgfVxuICAvKipcbiAgICogc3BsaXQgc3RyaW5nIG9uIHdoaXRlc3BhY2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICAgKiBAcmV0dXJucyB7QXJyYXl9IHdvcmRzXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3BsaXRTdHIoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci50cmltKCkuc3BsaXQoL1xccysvZyk7XG4gIH1cbiAgLyoqXG4gICAqIGZpbmQgaWYgYSBhcnJheSBjb250YWlucyB0aGUgb2JqZWN0IHVzaW5nIGluZGV4T2Ygb3IgYSBzaW1wbGUgcG9seUZpbGxcbiAgICogQHBhcmFtIHtBcnJheX0gc3JjXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBmaW5kXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbZmluZEJ5S2V5XVxuICAgKiBAcmV0dXJuIHtCb29sZWFufE51bWJlcn0gZmFsc2Ugd2hlbiBub3QgZm91bmQsIG9yIHRoZSBpbmRleFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGluQXJyYXkoc3JjLCBmaW5kLCBmaW5kQnlLZXkpIHtcbiAgICBpZiAoc3JjLmluZGV4T2YgJiYgIWZpbmRCeUtleSkge1xuICAgICAgcmV0dXJuIHNyYy5pbmRleE9mKGZpbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHdoaWxlIChpIDwgc3JjLmxlbmd0aCkge1xuICAgICAgICBpZiAoZmluZEJ5S2V5ICYmIHNyY1tpXVtmaW5kQnlLZXldID09IGZpbmQgfHwgIWZpbmRCeUtleSAmJiBzcmNbaV0gPT09IGZpbmQpIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkrKztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogY29udmVydCBhcnJheS1saWtlIG9iamVjdHMgdG8gcmVhbCBhcnJheXNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gdG9BcnJheShvYmopIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqLCAwKTtcbiAgfVxuICAvKipcbiAgICogdW5pcXVlIGFycmF5IHdpdGggb2JqZWN0cyBiYXNlZCBvbiBhIGtleSAobGlrZSAnaWQnKSBvciBqdXN0IGJ5IHRoZSBhcnJheSdzIHZhbHVlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNyYyBbe2lkOjF9LHtpZDoyfSx7aWQ6MX1dXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBba2V5XVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtzb3J0PUZhbHNlXVxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFt7aWQ6MX0se2lkOjJ9XVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHVuaXF1ZUFycmF5KHNyYywga2V5LCBzb3J0KSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBzcmMubGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsID0ga2V5ID8gc3JjW2ldW2tleV0gOiBzcmNbaV07XG5cbiAgICAgIGlmIChpbkFycmF5KHZhbHVlcywgdmFsKSA8IDApIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHNyY1tpXSk7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlc1tpXSA9IHZhbDtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICBpZiAoc29ydCkge1xuICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuc29ydCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuc29ydChmdW5jdGlvbiBzb3J0VW5pcXVlQXJyYXkoYSwgYikge1xuICAgICAgICAgIHJldHVybiBhW2tleV0gPiBiW2tleV07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG4gIC8qKlxuICAgKiBnZXQgdGhlIHByZWZpeGVkIHByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEByZXR1cm5zIHtTdHJpbmd8VW5kZWZpbmVkfSBwcmVmaXhlZFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHByZWZpeGVkKG9iaiwgcHJvcGVydHkpIHtcbiAgICB2YXIgcHJlZml4LCBwcm9wO1xuICAgIHZhciBjYW1lbFByb3AgPSBwcm9wZXJ0eVswXS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBWRU5ET1JfUFJFRklYRVMubGVuZ3RoKSB7XG4gICAgICBwcmVmaXggPSBWRU5ET1JfUFJFRklYRVNbaV07XG4gICAgICBwcm9wID0gcHJlZml4ID8gcHJlZml4ICsgY2FtZWxQcm9wIDogcHJvcGVydHk7XG5cbiAgICAgIGlmIChwcm9wIGluIG9iaikge1xuICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgIH1cblxuICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgLyoqXG4gICAqIGdldCBhIHVuaXF1ZSBpZFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB1bmlxdWVJZFxuICAgKi9cblxuXG4gIHZhciBfdW5pcXVlSWQgPSAxO1xuXG4gIGZ1bmN0aW9uIHVuaXF1ZUlkKCkge1xuICAgIHJldHVybiBfdW5pcXVlSWQrKztcbiAgfVxuICAvKipcbiAgICogZ2V0IHRoZSB3aW5kb3cgb2JqZWN0IG9mIGFuIGVsZW1lbnRcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgKiBAcmV0dXJucyB7RG9jdW1lbnRWaWV3fFdpbmRvd31cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRXaW5kb3dGb3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgICB2YXIgZG9jID0gZWxlbWVudC5vd25lckRvY3VtZW50IHx8IGVsZW1lbnQ7XG4gICAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93IHx8IHdpbmRvdztcbiAgfVxuXG4gIHZhciBNT0JJTEVfUkVHRVggPSAvbW9iaWxlfHRhYmxldHxpcChhZHxob25lfG9kKXxhbmRyb2lkL2k7XG5cbiAgdmFyIFNVUFBPUlRfVE9VQ0ggPSBmdW5jdGlvbiBTVVBQT1JUX1RPVUNIKCkge1xuICAgIHJldHVybiAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3c7XG4gIH07XG5cbiAgdmFyIFNVUFBPUlRfUE9JTlRFUl9FVkVOVFMgPSBmdW5jdGlvbiBTVVBQT1JUX1BPSU5URVJfRVZFTlRTKCkge1xuICAgIHJldHVybiBwcmVmaXhlZCh3aW5kb3csICdQb2ludGVyRXZlbnQnKSAhPT0gdW5kZWZpbmVkO1xuICB9O1xuXG4gIHZhciBTVVBQT1JUX09OTFlfVE9VQ0ggPSBmdW5jdGlvbiBTVVBQT1JUX09OTFlfVE9VQ0goKSB7XG4gICAgcmV0dXJuIFNVUFBPUlRfVE9VQ0goKSAmJiBNT0JJTEVfUkVHRVgudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgfTtcblxuICB2YXIgSU5QVVRfVFlQRV9UT1VDSCA9ICd0b3VjaCc7XG4gIHZhciBJTlBVVF9UWVBFX1BFTiA9ICdwZW4nO1xuICB2YXIgSU5QVVRfVFlQRV9NT1VTRSA9ICdtb3VzZSc7XG4gIHZhciBJTlBVVF9UWVBFX0tJTkVDVCA9ICdraW5lY3QnO1xuICB2YXIgQ09NUFVURV9JTlRFUlZBTCA9IDI1O1xuICB2YXIgSU5QVVRfU1RBUlQgPSAxO1xuICB2YXIgSU5QVVRfTU9WRSA9IDI7XG4gIHZhciBJTlBVVF9FTkQgPSA0O1xuICB2YXIgSU5QVVRfQ0FOQ0VMID0gODtcbiAgdmFyIERJUkVDVElPTl9OT05FID0gMTtcbiAgdmFyIERJUkVDVElPTl9MRUZUID0gMjtcbiAgdmFyIERJUkVDVElPTl9SSUdIVCA9IDQ7XG4gIHZhciBESVJFQ1RJT05fVVAgPSA4O1xuICB2YXIgRElSRUNUSU9OX0RPV04gPSAxNjtcbiAgdmFyIERJUkVDVElPTl9IT1JJWk9OVEFMID0gRElSRUNUSU9OX0xFRlQgfCBESVJFQ1RJT05fUklHSFQ7XG4gIHZhciBESVJFQ1RJT05fVkVSVElDQUwgPSBESVJFQ1RJT05fVVAgfCBESVJFQ1RJT05fRE9XTjtcbiAgdmFyIERJUkVDVElPTl9BTEwgPSBESVJFQ1RJT05fSE9SSVpPTlRBTCB8IERJUkVDVElPTl9WRVJUSUNBTDtcbiAgdmFyIFBST1BTX1hZID0gWyd4JywgJ3knXTtcbiAgdmFyIFBST1BTX0NMSUVOVF9YWSA9IFsnY2xpZW50WCcsICdjbGllbnRZJ107XG4gIC8qKlxuICAgKiBjcmVhdGUgbmV3IGlucHV0IHR5cGUgbWFuYWdlclxuICAgKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQHJldHVybnMge0lucHV0fVxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG5cbiAgZnVuY3Rpb24gSW5wdXQobWFuYWdlciwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5tYW5hZ2VyID0gbWFuYWdlcjtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5lbGVtZW50ID0gbWFuYWdlci5lbGVtZW50O1xuICAgIHRoaXMudGFyZ2V0ID0gbWFuYWdlci5vcHRpb25zLmlucHV0VGFyZ2V0OyAvLyBzbWFsbGVyIHdyYXBwZXIgYXJvdW5kIHRoZSBoYW5kbGVyLCBmb3IgdGhlIHNjb3BlIGFuZCB0aGUgZW5hYmxlZCBzdGF0ZSBvZiB0aGUgbWFuYWdlcixcbiAgICAvLyBzbyB3aGVuIGRpc2FibGVkIHRoZSBpbnB1dCBldmVudHMgYXJlIGNvbXBsZXRlbHkgYnlwYXNzZWQuXG5cbiAgICB0aGlzLmRvbUhhbmRsZXIgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgIGlmIChib29sT3JGbihtYW5hZ2VyLm9wdGlvbnMuZW5hYmxlLCBbbWFuYWdlcl0pKSB7XG4gICAgICAgIHNlbGYuaGFuZGxlcihldik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgSW5wdXQucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIHNob3VsZCBoYW5kbGUgdGhlIGlucHV0RXZlbnQgZGF0YSBhbmQgdHJpZ2dlciB0aGUgY2FsbGJhY2tcbiAgICAgKiBAdmlydHVhbFxuICAgICAqL1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoKSB7fSxcblxuICAgIC8qKlxuICAgICAqIGJpbmQgdGhlIGV2ZW50c1xuICAgICAqL1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB0aGlzLmV2RWwgJiYgYWRkRXZlbnRMaXN0ZW5lcnModGhpcy5lbGVtZW50LCB0aGlzLmV2RWwsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICB0aGlzLmV2VGFyZ2V0ICYmIGFkZEV2ZW50TGlzdGVuZXJzKHRoaXMudGFyZ2V0LCB0aGlzLmV2VGFyZ2V0LCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgICAgdGhpcy5ldldpbiAmJiBhZGRFdmVudExpc3RlbmVycyhnZXRXaW5kb3dGb3JFbGVtZW50KHRoaXMuZWxlbWVudCksIHRoaXMuZXZXaW4sIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVuYmluZCB0aGUgZXZlbnRzXG4gICAgICovXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuZXZFbCAmJiByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLmVsZW1lbnQsIHRoaXMuZXZFbCwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICAgIHRoaXMuZXZUYXJnZXQgJiYgcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy50YXJnZXQsIHRoaXMuZXZUYXJnZXQsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICB0aGlzLmV2V2luICYmIHJlbW92ZUV2ZW50TGlzdGVuZXJzKGdldFdpbmRvd0ZvckVsZW1lbnQodGhpcy5lbGVtZW50KSwgdGhpcy5ldldpbiwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBjcmVhdGUgbmV3IGlucHV0IHR5cGUgbWFuYWdlclxuICAgKiBjYWxsZWQgYnkgdGhlIE1hbmFnZXIgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtIYW1tZXJ9IG1hbmFnZXJcbiAgICogQHJldHVybnMge0lucHV0fVxuICAgKi9cblxuICBmdW5jdGlvbiBjcmVhdGVJbnB1dEluc3RhbmNlKG1hbmFnZXIpIHtcbiAgICB2YXIgVHlwZTtcbiAgICB2YXIgaW5wdXRDbGFzcyA9IG1hbmFnZXIub3B0aW9ucy5pbnB1dENsYXNzO1xuXG4gICAgaWYgKGlucHV0Q2xhc3MpIHtcbiAgICAgIFR5cGUgPSBpbnB1dENsYXNzO1xuICAgIH0gZWxzZSBpZiAoU1VQUE9SVF9QT0lOVEVSX0VWRU5UUygpKSB7XG4gICAgICBUeXBlID0gUG9pbnRlckV2ZW50SW5wdXQ7XG4gICAgfSBlbHNlIGlmIChTVVBQT1JUX09OTFlfVE9VQ0goKSkge1xuICAgICAgVHlwZSA9IFRvdWNoSW5wdXQ7XG4gICAgfSBlbHNlIGlmICghU1VQUE9SVF9UT1VDSCgpKSB7XG4gICAgICBUeXBlID0gTW91c2VJbnB1dDtcbiAgICB9IGVsc2Uge1xuICAgICAgVHlwZSA9IFRvdWNoTW91c2VJbnB1dDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFR5cGUobWFuYWdlciwgaW5wdXRIYW5kbGVyKTtcbiAgfVxuICAvKipcbiAgICogaGFuZGxlIGlucHV0IGV2ZW50c1xuICAgKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50VHlwZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICovXG5cblxuICBmdW5jdGlvbiBpbnB1dEhhbmRsZXIobWFuYWdlciwgZXZlbnRUeXBlLCBpbnB1dCkge1xuICAgIHZhciBwb2ludGVyc0xlbiA9IGlucHV0LnBvaW50ZXJzLmxlbmd0aDtcbiAgICB2YXIgY2hhbmdlZFBvaW50ZXJzTGVuID0gaW5wdXQuY2hhbmdlZFBvaW50ZXJzLmxlbmd0aDtcbiAgICB2YXIgaXNGaXJzdCA9IGV2ZW50VHlwZSAmIElOUFVUX1NUQVJUICYmIHBvaW50ZXJzTGVuIC0gY2hhbmdlZFBvaW50ZXJzTGVuID09PSAwO1xuICAgIHZhciBpc0ZpbmFsID0gZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkgJiYgcG9pbnRlcnNMZW4gLSBjaGFuZ2VkUG9pbnRlcnNMZW4gPT09IDA7XG4gICAgaW5wdXQuaXNGaXJzdCA9ICEhaXNGaXJzdDtcbiAgICBpbnB1dC5pc0ZpbmFsID0gISFpc0ZpbmFsO1xuXG4gICAgaWYgKGlzRmlyc3QpIHtcbiAgICAgIG1hbmFnZXIuc2Vzc2lvbiA9IHt9O1xuICAgIH0gLy8gc291cmNlIGV2ZW50IGlzIHRoZSBub3JtYWxpemVkIHZhbHVlIG9mIHRoZSBkb21FdmVudHNcbiAgICAvLyBsaWtlICd0b3VjaHN0YXJ0LCBtb3VzZXVwLCBwb2ludGVyZG93bidcblxuXG4gICAgaW5wdXQuZXZlbnRUeXBlID0gZXZlbnRUeXBlOyAvLyBjb21wdXRlIHNjYWxlLCByb3RhdGlvbiBldGNcblxuICAgIGNvbXB1dGVJbnB1dERhdGEobWFuYWdlciwgaW5wdXQpOyAvLyBlbWl0IHNlY3JldCBldmVudFxuXG4gICAgbWFuYWdlci5lbWl0KCdoYW1tZXIuaW5wdXQnLCBpbnB1dCk7XG4gICAgbWFuYWdlci5yZWNvZ25pemUoaW5wdXQpO1xuICAgIG1hbmFnZXIuc2Vzc2lvbi5wcmV2SW5wdXQgPSBpbnB1dDtcbiAgfVxuICAvKipcbiAgICogZXh0ZW5kIHRoZSBkYXRhIHdpdGggc29tZSB1c2FibGUgcHJvcGVydGllcyBsaWtlIHNjYWxlLCByb3RhdGUsIHZlbG9jaXR5IGV0Y1xuICAgKiBAcGFyYW0ge09iamVjdH0gbWFuYWdlclxuICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICovXG5cblxuICBmdW5jdGlvbiBjb21wdXRlSW5wdXREYXRhKG1hbmFnZXIsIGlucHV0KSB7XG4gICAgdmFyIHNlc3Npb24gPSBtYW5hZ2VyLnNlc3Npb247XG4gICAgdmFyIHBvaW50ZXJzID0gaW5wdXQucG9pbnRlcnM7XG4gICAgdmFyIHBvaW50ZXJzTGVuZ3RoID0gcG9pbnRlcnMubGVuZ3RoOyAvLyBzdG9yZSB0aGUgZmlyc3QgaW5wdXQgdG8gY2FsY3VsYXRlIHRoZSBkaXN0YW5jZSBhbmQgZGlyZWN0aW9uXG5cbiAgICBpZiAoIXNlc3Npb24uZmlyc3RJbnB1dCkge1xuICAgICAgc2Vzc2lvbi5maXJzdElucHV0ID0gc2ltcGxlQ2xvbmVJbnB1dERhdGEoaW5wdXQpO1xuICAgIH0gLy8gdG8gY29tcHV0ZSBzY2FsZSBhbmQgcm90YXRpb24gd2UgbmVlZCB0byBzdG9yZSB0aGUgbXVsdGlwbGUgdG91Y2hlc1xuXG5cbiAgICBpZiAocG9pbnRlcnNMZW5ndGggPiAxICYmICFzZXNzaW9uLmZpcnN0TXVsdGlwbGUpIHtcbiAgICAgIHNlc3Npb24uZmlyc3RNdWx0aXBsZSA9IHNpbXBsZUNsb25lSW5wdXREYXRhKGlucHV0KTtcbiAgICB9IGVsc2UgaWYgKHBvaW50ZXJzTGVuZ3RoID09PSAxKSB7XG4gICAgICBzZXNzaW9uLmZpcnN0TXVsdGlwbGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RJbnB1dCA9IHNlc3Npb24uZmlyc3RJbnB1dDtcbiAgICB2YXIgZmlyc3RNdWx0aXBsZSA9IHNlc3Npb24uZmlyc3RNdWx0aXBsZTtcbiAgICB2YXIgb2Zmc2V0Q2VudGVyID0gZmlyc3RNdWx0aXBsZSA/IGZpcnN0TXVsdGlwbGUuY2VudGVyIDogZmlyc3RJbnB1dC5jZW50ZXI7XG4gICAgdmFyIGNlbnRlciA9IGlucHV0LmNlbnRlciA9IGdldENlbnRlcihwb2ludGVycyk7XG4gICAgaW5wdXQudGltZVN0YW1wID0gbm93KCk7XG4gICAgaW5wdXQuZGVsdGFUaW1lID0gaW5wdXQudGltZVN0YW1wIC0gZmlyc3RJbnB1dC50aW1lU3RhbXA7XG4gICAgaW5wdXQuYW5nbGUgPSBnZXRBbmdsZShvZmZzZXRDZW50ZXIsIGNlbnRlcik7XG4gICAgaW5wdXQuZGlzdGFuY2UgPSBnZXREaXN0YW5jZShvZmZzZXRDZW50ZXIsIGNlbnRlcik7XG4gICAgY29tcHV0ZURlbHRhWFkoc2Vzc2lvbiwgaW5wdXQpO1xuICAgIGlucHV0Lm9mZnNldERpcmVjdGlvbiA9IGdldERpcmVjdGlvbihpbnB1dC5kZWx0YVgsIGlucHV0LmRlbHRhWSk7XG4gICAgdmFyIG92ZXJhbGxWZWxvY2l0eSA9IGdldFZlbG9jaXR5KGlucHV0LmRlbHRhVGltZSwgaW5wdXQuZGVsdGFYLCBpbnB1dC5kZWx0YVkpO1xuICAgIGlucHV0Lm92ZXJhbGxWZWxvY2l0eVggPSBvdmVyYWxsVmVsb2NpdHkueDtcbiAgICBpbnB1dC5vdmVyYWxsVmVsb2NpdHlZID0gb3ZlcmFsbFZlbG9jaXR5Lnk7XG4gICAgaW5wdXQub3ZlcmFsbFZlbG9jaXR5ID0gYWJzKG92ZXJhbGxWZWxvY2l0eS54KSA+IGFicyhvdmVyYWxsVmVsb2NpdHkueSkgPyBvdmVyYWxsVmVsb2NpdHkueCA6IG92ZXJhbGxWZWxvY2l0eS55O1xuICAgIGlucHV0LnNjYWxlID0gZmlyc3RNdWx0aXBsZSA/IGdldFNjYWxlKGZpcnN0TXVsdGlwbGUucG9pbnRlcnMsIHBvaW50ZXJzKSA6IDE7XG4gICAgaW5wdXQucm90YXRpb24gPSBmaXJzdE11bHRpcGxlID8gZ2V0Um90YXRpb24oZmlyc3RNdWx0aXBsZS5wb2ludGVycywgcG9pbnRlcnMpIDogMDtcbiAgICBpbnB1dC5tYXhQb2ludGVycyA9ICFzZXNzaW9uLnByZXZJbnB1dCA/IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA6IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA+IHNlc3Npb24ucHJldklucHV0Lm1heFBvaW50ZXJzID8gaW5wdXQucG9pbnRlcnMubGVuZ3RoIDogc2Vzc2lvbi5wcmV2SW5wdXQubWF4UG9pbnRlcnM7XG4gICAgY29tcHV0ZUludGVydmFsSW5wdXREYXRhKHNlc3Npb24sIGlucHV0KTsgLy8gZmluZCB0aGUgY29ycmVjdCB0YXJnZXRcblxuICAgIHZhciB0YXJnZXQgPSBtYW5hZ2VyLmVsZW1lbnQ7XG5cbiAgICBpZiAoaGFzUGFyZW50KGlucHV0LnNyY0V2ZW50LnRhcmdldCwgdGFyZ2V0KSkge1xuICAgICAgdGFyZ2V0ID0gaW5wdXQuc3JjRXZlbnQudGFyZ2V0O1xuICAgIH1cblxuICAgIGlucHV0LnRhcmdldCA9IHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVEZWx0YVhZKHNlc3Npb24sIGlucHV0KSB7XG4gICAgdmFyIGNlbnRlciA9IGlucHV0LmNlbnRlcjtcbiAgICB2YXIgb2Zmc2V0ID0gc2Vzc2lvbi5vZmZzZXREZWx0YSB8fCB7fTtcbiAgICB2YXIgcHJldkRlbHRhID0gc2Vzc2lvbi5wcmV2RGVsdGEgfHwge307XG4gICAgdmFyIHByZXZJbnB1dCA9IHNlc3Npb24ucHJldklucHV0IHx8IHt9O1xuXG4gICAgaWYgKGlucHV0LmV2ZW50VHlwZSA9PT0gSU5QVVRfU1RBUlQgfHwgcHJldklucHV0LmV2ZW50VHlwZSA9PT0gSU5QVVRfRU5EKSB7XG4gICAgICBwcmV2RGVsdGEgPSBzZXNzaW9uLnByZXZEZWx0YSA9IHtcbiAgICAgICAgeDogcHJldklucHV0LmRlbHRhWCB8fCAwLFxuICAgICAgICB5OiBwcmV2SW5wdXQuZGVsdGFZIHx8IDBcbiAgICAgIH07XG4gICAgICBvZmZzZXQgPSBzZXNzaW9uLm9mZnNldERlbHRhID0ge1xuICAgICAgICB4OiBjZW50ZXIueCxcbiAgICAgICAgeTogY2VudGVyLnlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaW5wdXQuZGVsdGFYID0gcHJldkRlbHRhLnggKyAoY2VudGVyLnggLSBvZmZzZXQueCk7XG4gICAgaW5wdXQuZGVsdGFZID0gcHJldkRlbHRhLnkgKyAoY2VudGVyLnkgLSBvZmZzZXQueSk7XG4gIH1cbiAgLyoqXG4gICAqIHZlbG9jaXR5IGlzIGNhbGN1bGF0ZWQgZXZlcnkgeCBtc1xuICAgKiBAcGFyYW0ge09iamVjdH0gc2Vzc2lvblxuICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICovXG5cblxuICBmdW5jdGlvbiBjb21wdXRlSW50ZXJ2YWxJbnB1dERhdGEoc2Vzc2lvbiwgaW5wdXQpIHtcbiAgICB2YXIgbGFzdCA9IHNlc3Npb24ubGFzdEludGVydmFsIHx8IGlucHV0LFxuICAgICAgICBkZWx0YVRpbWUgPSBpbnB1dC50aW1lU3RhbXAgLSBsYXN0LnRpbWVTdGFtcCxcbiAgICAgICAgdmVsb2NpdHksXG4gICAgICAgIHZlbG9jaXR5WCxcbiAgICAgICAgdmVsb2NpdHlZLFxuICAgICAgICBkaXJlY3Rpb247XG5cbiAgICBpZiAoaW5wdXQuZXZlbnRUeXBlICE9IElOUFVUX0NBTkNFTCAmJiAoZGVsdGFUaW1lID4gQ09NUFVURV9JTlRFUlZBTCB8fCBsYXN0LnZlbG9jaXR5ID09PSB1bmRlZmluZWQpKSB7XG4gICAgICB2YXIgZGVsdGFYID0gaW5wdXQuZGVsdGFYIC0gbGFzdC5kZWx0YVg7XG4gICAgICB2YXIgZGVsdGFZID0gaW5wdXQuZGVsdGFZIC0gbGFzdC5kZWx0YVk7XG4gICAgICB2YXIgdiA9IGdldFZlbG9jaXR5KGRlbHRhVGltZSwgZGVsdGFYLCBkZWx0YVkpO1xuICAgICAgdmVsb2NpdHlYID0gdi54O1xuICAgICAgdmVsb2NpdHlZID0gdi55O1xuICAgICAgdmVsb2NpdHkgPSBhYnModi54KSA+IGFicyh2LnkpID8gdi54IDogdi55O1xuICAgICAgZGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uKGRlbHRhWCwgZGVsdGFZKTtcbiAgICAgIHNlc3Npb24ubGFzdEludGVydmFsID0gaW5wdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVzZSBsYXRlc3QgdmVsb2NpdHkgaW5mbyBpZiBpdCBkb2Vzbid0IG92ZXJ0YWtlIGEgbWluaW11bSBwZXJpb2RcbiAgICAgIHZlbG9jaXR5ID0gbGFzdC52ZWxvY2l0eTtcbiAgICAgIHZlbG9jaXR5WCA9IGxhc3QudmVsb2NpdHlYO1xuICAgICAgdmVsb2NpdHlZID0gbGFzdC52ZWxvY2l0eVk7XG4gICAgICBkaXJlY3Rpb24gPSBsYXN0LmRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICBpbnB1dC52ZWxvY2l0eSA9IHZlbG9jaXR5O1xuICAgIGlucHV0LnZlbG9jaXR5WCA9IHZlbG9jaXR5WDtcbiAgICBpbnB1dC52ZWxvY2l0eVkgPSB2ZWxvY2l0eVk7XG4gICAgaW5wdXQuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBjcmVhdGUgYSBzaW1wbGUgY2xvbmUgZnJvbSB0aGUgaW5wdXQgdXNlZCBmb3Igc3RvcmFnZSBvZiBmaXJzdElucHV0IGFuZCBmaXJzdE11bHRpcGxlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBjbG9uZWRJbnB1dERhdGFcbiAgICovXG5cblxuICBmdW5jdGlvbiBzaW1wbGVDbG9uZUlucHV0RGF0YShpbnB1dCkge1xuICAgIC8vIG1ha2UgYSBzaW1wbGUgY29weSBvZiB0aGUgcG9pbnRlcnMgYmVjYXVzZSB3ZSB3aWxsIGdldCBhIHJlZmVyZW5jZSBpZiB3ZSBkb24ndFxuICAgIC8vIHdlIG9ubHkgbmVlZCBjbGllbnRYWSBmb3IgdGhlIGNhbGN1bGF0aW9uc1xuICAgIHZhciBwb2ludGVycyA9IFtdO1xuICAgIHZhciBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgaW5wdXQucG9pbnRlcnMubGVuZ3RoKSB7XG4gICAgICBwb2ludGVyc1tpXSA9IHtcbiAgICAgICAgY2xpZW50WDogcm91bmQoaW5wdXQucG9pbnRlcnNbaV0uY2xpZW50WCksXG4gICAgICAgIGNsaWVudFk6IHJvdW5kKGlucHV0LnBvaW50ZXJzW2ldLmNsaWVudFkpXG4gICAgICB9O1xuICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0aW1lU3RhbXA6IG5vdygpLFxuICAgICAgcG9pbnRlcnM6IHBvaW50ZXJzLFxuICAgICAgY2VudGVyOiBnZXRDZW50ZXIocG9pbnRlcnMpLFxuICAgICAgZGVsdGFYOiBpbnB1dC5kZWx0YVgsXG4gICAgICBkZWx0YVk6IGlucHV0LmRlbHRhWVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIGdldCB0aGUgY2VudGVyIG9mIGFsbCB0aGUgcG9pbnRlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gcG9pbnRlcnNcbiAgICogQHJldHVybiB7T2JqZWN0fSBjZW50ZXIgY29udGFpbnMgYHhgIGFuZCBgeWAgcHJvcGVydGllc1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldENlbnRlcihwb2ludGVycykge1xuICAgIHZhciBwb2ludGVyc0xlbmd0aCA9IHBvaW50ZXJzLmxlbmd0aDsgLy8gbm8gbmVlZCB0byBsb29wIHdoZW4gb25seSBvbmUgdG91Y2hcblxuICAgIGlmIChwb2ludGVyc0xlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogcm91bmQocG9pbnRlcnNbMF0uY2xpZW50WCksXG4gICAgICAgIHk6IHJvdW5kKHBvaW50ZXJzWzBdLmNsaWVudFkpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciB4ID0gMCxcbiAgICAgICAgeSA9IDAsXG4gICAgICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBwb2ludGVyc0xlbmd0aCkge1xuICAgICAgeCArPSBwb2ludGVyc1tpXS5jbGllbnRYO1xuICAgICAgeSArPSBwb2ludGVyc1tpXS5jbGllbnRZO1xuICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB4OiByb3VuZCh4IC8gcG9pbnRlcnNMZW5ndGgpLFxuICAgICAgeTogcm91bmQoeSAvIHBvaW50ZXJzTGVuZ3RoKVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIGNhbGN1bGF0ZSB0aGUgdmVsb2NpdHkgYmV0d2VlbiB0d28gcG9pbnRzLiB1bml0IGlzIGluIHB4IHBlciBtcy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhVGltZVxuICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IHZlbG9jaXR5IGB4YCBhbmQgYHlgXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0VmVsb2NpdHkoZGVsdGFUaW1lLCB4LCB5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHggLyBkZWx0YVRpbWUgfHwgMCxcbiAgICAgIHk6IHkgLyBkZWx0YVRpbWUgfHwgMFxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIGdldCB0aGUgZGlyZWN0aW9uIGJldHdlZW4gdHdvIHBvaW50c1xuICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGRpcmVjdGlvblxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldERpcmVjdGlvbih4LCB5KSB7XG4gICAgaWYgKHggPT09IHkpIHtcbiAgICAgIHJldHVybiBESVJFQ1RJT05fTk9ORTtcbiAgICB9XG5cbiAgICBpZiAoYWJzKHgpID49IGFicyh5KSkge1xuICAgICAgcmV0dXJuIHggPCAwID8gRElSRUNUSU9OX0xFRlQgOiBESVJFQ1RJT05fUklHSFQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHkgPCAwID8gRElSRUNUSU9OX1VQIDogRElSRUNUSU9OX0RPV047XG4gIH1cbiAgLyoqXG4gICAqIGNhbGN1bGF0ZSB0aGUgYWJzb2x1dGUgZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwMSB7eCwgeX1cbiAgICogQHBhcmFtIHtPYmplY3R9IHAyIHt4LCB5fVxuICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHNdIGNvbnRhaW5pbmcgeCBhbmQgeSBrZXlzXG4gICAqIEByZXR1cm4ge051bWJlcn0gZGlzdGFuY2VcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXREaXN0YW5jZShwMSwgcDIsIHByb3BzKSB7XG4gICAgaWYgKCFwcm9wcykge1xuICAgICAgcHJvcHMgPSBQUk9QU19YWTtcbiAgICB9XG5cbiAgICB2YXIgeCA9IHAyW3Byb3BzWzBdXSAtIHAxW3Byb3BzWzBdXSxcbiAgICAgICAgeSA9IHAyW3Byb3BzWzFdXSAtIHAxW3Byb3BzWzFdXTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICB9XG4gIC8qKlxuICAgKiBjYWxjdWxhdGUgdGhlIGFuZ2xlIGJldHdlZW4gdHdvIGNvb3JkaW5hdGVzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwMVxuICAgKiBAcGFyYW0ge09iamVjdH0gcDJcbiAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzXSBjb250YWluaW5nIHggYW5kIHkga2V5c1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGFuZ2xlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0QW5nbGUocDEsIHAyLCBwcm9wcykge1xuICAgIGlmICghcHJvcHMpIHtcbiAgICAgIHByb3BzID0gUFJPUFNfWFk7XG4gICAgfVxuXG4gICAgdmFyIHggPSBwMltwcm9wc1swXV0gLSBwMVtwcm9wc1swXV0sXG4gICAgICAgIHkgPSBwMltwcm9wc1sxXV0gLSBwMVtwcm9wc1sxXV07XG4gICAgcmV0dXJuIE1hdGguYXRhbjIoeSwgeCkgKiAxODAgLyBNYXRoLlBJO1xuICB9XG4gIC8qKlxuICAgKiBjYWxjdWxhdGUgdGhlIHJvdGF0aW9uIGRlZ3JlZXMgYmV0d2VlbiB0d28gcG9pbnRlcnNldHNcbiAgICogQHBhcmFtIHtBcnJheX0gc3RhcnQgYXJyYXkgb2YgcG9pbnRlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gZW5kIGFycmF5IG9mIHBvaW50ZXJzXG4gICAqIEByZXR1cm4ge051bWJlcn0gcm90YXRpb25cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRSb3RhdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGdldEFuZ2xlKGVuZFsxXSwgZW5kWzBdLCBQUk9QU19DTElFTlRfWFkpICsgZ2V0QW5nbGUoc3RhcnRbMV0sIHN0YXJ0WzBdLCBQUk9QU19DTElFTlRfWFkpO1xuICB9XG4gIC8qKlxuICAgKiBjYWxjdWxhdGUgdGhlIHNjYWxlIGZhY3RvciBiZXR3ZWVuIHR3byBwb2ludGVyc2V0c1xuICAgKiBubyBzY2FsZSBpcyAxLCBhbmQgZ29lcyBkb3duIHRvIDAgd2hlbiBwaW5jaGVkIHRvZ2V0aGVyLCBhbmQgYmlnZ2VyIHdoZW4gcGluY2hlZCBvdXRcbiAgICogQHBhcmFtIHtBcnJheX0gc3RhcnQgYXJyYXkgb2YgcG9pbnRlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gZW5kIGFycmF5IG9mIHBvaW50ZXJzXG4gICAqIEByZXR1cm4ge051bWJlcn0gc2NhbGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTY2FsZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGdldERpc3RhbmNlKGVuZFswXSwgZW5kWzFdLCBQUk9QU19DTElFTlRfWFkpIC8gZ2V0RGlzdGFuY2Uoc3RhcnRbMF0sIHN0YXJ0WzFdLCBQUk9QU19DTElFTlRfWFkpO1xuICB9XG5cbiAgdmFyIE1PVVNFX0lOUFVUX01BUCA9IHtcbiAgICBtb3VzZWRvd246IElOUFVUX1NUQVJULFxuICAgIG1vdXNlbW92ZTogSU5QVVRfTU9WRSxcbiAgICBtb3VzZXVwOiBJTlBVVF9FTkRcbiAgfTtcbiAgdmFyIE1PVVNFX0VMRU1FTlRfRVZFTlRTID0gJ21vdXNlZG93bic7XG4gIHZhciBNT1VTRV9XSU5ET1dfRVZFTlRTID0gJ21vdXNlbW92ZSBtb3VzZXVwJztcbiAgLyoqXG4gICAqIE1vdXNlIGV2ZW50cyBpbnB1dFxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgSW5wdXRcbiAgICovXG5cbiAgZnVuY3Rpb24gTW91c2VJbnB1dCgpIHtcbiAgICB0aGlzLmV2RWwgPSBNT1VTRV9FTEVNRU5UX0VWRU5UUztcbiAgICB0aGlzLmV2V2luID0gTU9VU0VfV0lORE9XX0VWRU5UUztcbiAgICB0aGlzLnByZXNzZWQgPSBmYWxzZTsgLy8gbW91c2Vkb3duIHN0YXRlXG5cbiAgICBJbnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgaW5oZXJpdChNb3VzZUlucHV0LCBJbnB1dCwge1xuICAgIC8qKlxuICAgICAqIGhhbmRsZSBtb3VzZSBldmVudHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZcbiAgICAgKi9cbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBNRWhhbmRsZXIoZXYpIHtcbiAgICAgIHZhciBldmVudFR5cGUgPSBNT1VTRV9JTlBVVF9NQVBbZXYudHlwZV07IC8vIG9uIHN0YXJ0IHdlIHdhbnQgdG8gaGF2ZSB0aGUgbGVmdCBtb3VzZSBidXR0b24gZG93blxuXG4gICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQgJiYgZXYuYnV0dG9uID09PSAwKSB7XG4gICAgICAgIHRoaXMucHJlc3NlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9NT1ZFICYmIGV2LndoaWNoICE9PSAxKSB7XG4gICAgICAgIGV2ZW50VHlwZSA9IElOUFVUX0VORDtcbiAgICAgIH0gLy8gbW91c2UgbXVzdCBiZSBkb3duXG5cblxuICAgICAgaWYgKCF0aGlzLnByZXNzZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfRU5EKSB7XG4gICAgICAgIHRoaXMucHJlc3NlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbGxiYWNrKHRoaXMubWFuYWdlciwgZXZlbnRUeXBlLCB7XG4gICAgICAgIHBvaW50ZXJzOiBbZXZdLFxuICAgICAgICBjaGFuZ2VkUG9pbnRlcnM6IFtldl0sXG4gICAgICAgIHBvaW50ZXJUeXBlOiBJTlBVVF9UWVBFX01PVVNFLFxuICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHZhciBQT0lOVEVSX0lOUFVUX01BUCA9IHtcbiAgICBwb2ludGVyZG93bjogSU5QVVRfU1RBUlQsXG4gICAgcG9pbnRlcm1vdmU6IElOUFVUX01PVkUsXG4gICAgcG9pbnRlcnVwOiBJTlBVVF9FTkQsXG4gICAgcG9pbnRlcmNhbmNlbDogSU5QVVRfQ0FOQ0VMLFxuICAgIHBvaW50ZXJvdXQ6IElOUFVUX0NBTkNFTFxuICB9OyAvLyBpbiBJRTEwIHRoZSBwb2ludGVyIHR5cGVzIGlzIGRlZmluZWQgYXMgYW4gZW51bVxuXG4gIHZhciBJRTEwX1BPSU5URVJfVFlQRV9FTlVNID0ge1xuICAgIDI6IElOUFVUX1RZUEVfVE9VQ0gsXG4gICAgMzogSU5QVVRfVFlQRV9QRU4sXG4gICAgNDogSU5QVVRfVFlQRV9NT1VTRSxcbiAgICA1OiBJTlBVVF9UWVBFX0tJTkVDVCAvLyBzZWUgaHR0cHM6Ly90d2l0dGVyLmNvbS9qYWNvYnJvc3NpL3N0YXR1cy80ODA1OTY0Mzg0ODk4OTA4MTZcblxuICB9O1xuICB2YXIgUE9JTlRFUl9FTEVNRU5UX0VWRU5UUyA9ICdwb2ludGVyZG93bic7XG4gIHZhciBQT0lOVEVSX1dJTkRPV19FVkVOVFMgPSAncG9pbnRlcm1vdmUgcG9pbnRlcnVwIHBvaW50ZXJjYW5jZWwnOyAvLyBJRTEwIGhhcyBwcmVmaXhlZCBzdXBwb3J0LCBhbmQgY2FzZS1zZW5zaXRpdmVcblxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1TUG9pbnRlckV2ZW50ICYmICF3aW5kb3cuUG9pbnRlckV2ZW50KSB7XG4gICAgUE9JTlRFUl9FTEVNRU5UX0VWRU5UUyA9ICdNU1BvaW50ZXJEb3duJztcbiAgICBQT0lOVEVSX1dJTkRPV19FVkVOVFMgPSAnTVNQb2ludGVyTW92ZSBNU1BvaW50ZXJVcCBNU1BvaW50ZXJDYW5jZWwnO1xuICB9XG4gIC8qKlxuICAgKiBQb2ludGVyIGV2ZW50cyBpbnB1dFxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgSW5wdXRcbiAgICovXG5cblxuICBmdW5jdGlvbiBQb2ludGVyRXZlbnRJbnB1dCgpIHtcbiAgICB0aGlzLmV2RWwgPSBQT0lOVEVSX0VMRU1FTlRfRVZFTlRTO1xuICAgIHRoaXMuZXZXaW4gPSBQT0lOVEVSX1dJTkRPV19FVkVOVFM7XG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnN0b3JlID0gdGhpcy5tYW5hZ2VyLnNlc3Npb24ucG9pbnRlckV2ZW50cyA9IFtdO1xuICB9XG5cbiAgaW5oZXJpdChQb2ludGVyRXZlbnRJbnB1dCwgSW5wdXQsIHtcbiAgICAvKipcbiAgICAgKiBoYW5kbGUgbW91c2UgZXZlbnRzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2XG4gICAgICovXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gUEVoYW5kbGVyKGV2KSB7XG4gICAgICB2YXIgc3RvcmUgPSB0aGlzLnN0b3JlO1xuICAgICAgdmFyIHJlbW92ZVBvaW50ZXIgPSBmYWxzZTtcbiAgICAgIHZhciBldmVudFR5cGVOb3JtYWxpemVkID0gZXYudHlwZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ21zJywgJycpO1xuICAgICAgdmFyIGV2ZW50VHlwZSA9IFBPSU5URVJfSU5QVVRfTUFQW2V2ZW50VHlwZU5vcm1hbGl6ZWRdO1xuICAgICAgdmFyIHBvaW50ZXJUeXBlID0gSUUxMF9QT0lOVEVSX1RZUEVfRU5VTVtldi5wb2ludGVyVHlwZV0gfHwgZXYucG9pbnRlclR5cGU7XG4gICAgICB2YXIgaXNUb3VjaCA9IHBvaW50ZXJUeXBlID09IElOUFVUX1RZUEVfVE9VQ0g7IC8vIGdldCBpbmRleCBvZiB0aGUgZXZlbnQgaW4gdGhlIHN0b3JlXG5cbiAgICAgIHZhciBzdG9yZUluZGV4ID0gaW5BcnJheShzdG9yZSwgZXYucG9pbnRlcklkLCAncG9pbnRlcklkJyk7IC8vIHN0YXJ0IGFuZCBtb3VzZSBtdXN0IGJlIGRvd25cblxuICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX1NUQVJUICYmIChldi5idXR0b24gPT09IDAgfHwgaXNUb3VjaCkpIHtcbiAgICAgICAgaWYgKHN0b3JlSW5kZXggPCAwKSB7XG4gICAgICAgICAgc3RvcmUucHVzaChldik7XG4gICAgICAgICAgc3RvcmVJbmRleCA9IHN0b3JlLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcbiAgICAgICAgcmVtb3ZlUG9pbnRlciA9IHRydWU7XG4gICAgICB9IC8vIGl0IG5vdCBmb3VuZCwgc28gdGhlIHBvaW50ZXIgaGFzbid0IGJlZW4gZG93biAoc28gaXQncyBwcm9iYWJseSBhIGhvdmVyKVxuXG5cbiAgICAgIGlmIChzdG9yZUluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIHVwZGF0ZSB0aGUgZXZlbnQgaW4gdGhlIHN0b3JlXG5cblxuICAgICAgc3RvcmVbc3RvcmVJbmRleF0gPSBldjtcbiAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCBldmVudFR5cGUsIHtcbiAgICAgICAgcG9pbnRlcnM6IHN0b3JlLFxuICAgICAgICBjaGFuZ2VkUG9pbnRlcnM6IFtldl0sXG4gICAgICAgIHBvaW50ZXJUeXBlOiBwb2ludGVyVHlwZSxcbiAgICAgICAgc3JjRXZlbnQ6IGV2XG4gICAgICB9KTtcblxuICAgICAgaWYgKHJlbW92ZVBvaW50ZXIpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGZyb20gdGhlIHN0b3JlXG4gICAgICAgIHN0b3JlLnNwbGljZShzdG9yZUluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB2YXIgU0lOR0xFX1RPVUNIX0lOUFVUX01BUCA9IHtcbiAgICB0b3VjaHN0YXJ0OiBJTlBVVF9TVEFSVCxcbiAgICB0b3VjaG1vdmU6IElOUFVUX01PVkUsXG4gICAgdG91Y2hlbmQ6IElOUFVUX0VORCxcbiAgICB0b3VjaGNhbmNlbDogSU5QVVRfQ0FOQ0VMXG4gIH07XG4gIHZhciBTSU5HTEVfVE9VQ0hfVEFSR0VUX0VWRU5UUyA9ICd0b3VjaHN0YXJ0JztcbiAgdmFyIFNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTID0gJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJztcbiAgLyoqXG4gICAqIFRvdWNoIGV2ZW50cyBpbnB1dFxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgSW5wdXRcbiAgICovXG5cbiAgZnVuY3Rpb24gU2luZ2xlVG91Y2hJbnB1dCgpIHtcbiAgICB0aGlzLmV2VGFyZ2V0ID0gU0lOR0xFX1RPVUNIX1RBUkdFVF9FVkVOVFM7XG4gICAgdGhpcy5ldldpbiA9IFNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTO1xuICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBpbmhlcml0KFNpbmdsZVRvdWNoSW5wdXQsIElucHV0LCB7XG4gICAgaGFuZGxlcjogZnVuY3Rpb24gVEVoYW5kbGVyKGV2KSB7XG4gICAgICB2YXIgdHlwZSA9IFNJTkdMRV9UT1VDSF9JTlBVVF9NQVBbZXYudHlwZV07IC8vIHNob3VsZCB3ZSBoYW5kbGUgdGhlIHRvdWNoIGV2ZW50cz9cblxuICAgICAgaWYgKHR5cGUgPT09IElOUFVUX1NUQVJUKSB7XG4gICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5zdGFydGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRvdWNoZXMgPSBub3JtYWxpemVTaW5nbGVUb3VjaGVzLmNhbGwodGhpcywgZXYsIHR5cGUpOyAvLyB3aGVuIGRvbmUsIHJlc2V0IHRoZSBzdGFydGVkIHN0YXRlXG5cbiAgICAgIGlmICh0eXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkgJiYgdG91Y2hlc1swXS5sZW5ndGggLSB0b3VjaGVzWzFdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIHR5cGUsIHtcbiAgICAgICAgcG9pbnRlcnM6IHRvdWNoZXNbMF0sXG4gICAgICAgIGNoYW5nZWRQb2ludGVyczogdG91Y2hlc1sxXSxcbiAgICAgICAgcG9pbnRlclR5cGU6IElOUFVUX1RZUEVfVE9VQ0gsXG4gICAgICAgIHNyY0V2ZW50OiBldlxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgLyoqXG4gICAqIEB0aGlzIHtUb3VjaElucHV0fVxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHR5cGUgZmxhZ1xuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfEFycmF5fSBbYWxsLCBjaGFuZ2VkXVxuICAgKi9cblxuICBmdW5jdGlvbiBub3JtYWxpemVTaW5nbGVUb3VjaGVzKGV2LCB0eXBlKSB7XG4gICAgdmFyIGFsbCA9IHRvQXJyYXkoZXYudG91Y2hlcyk7XG4gICAgdmFyIGNoYW5nZWQgPSB0b0FycmF5KGV2LmNoYW5nZWRUb3VjaGVzKTtcblxuICAgIGlmICh0eXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcbiAgICAgIGFsbCA9IHVuaXF1ZUFycmF5KGFsbC5jb25jYXQoY2hhbmdlZCksICdpZGVudGlmaWVyJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFthbGwsIGNoYW5nZWRdO1xuICB9XG5cbiAgdmFyIFRPVUNIX0lOUFVUX01BUCA9IHtcbiAgICB0b3VjaHN0YXJ0OiBJTlBVVF9TVEFSVCxcbiAgICB0b3VjaG1vdmU6IElOUFVUX01PVkUsXG4gICAgdG91Y2hlbmQ6IElOUFVUX0VORCxcbiAgICB0b3VjaGNhbmNlbDogSU5QVVRfQ0FOQ0VMXG4gIH07XG4gIHZhciBUT1VDSF9UQVJHRVRfRVZFTlRTID0gJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJztcbiAgLyoqXG4gICAqIE11bHRpLXVzZXIgdG91Y2ggZXZlbnRzIGlucHV0XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyBJbnB1dFxuICAgKi9cblxuICBmdW5jdGlvbiBUb3VjaElucHV0KCkge1xuICAgIHRoaXMuZXZUYXJnZXQgPSBUT1VDSF9UQVJHRVRfRVZFTlRTO1xuICAgIHRoaXMudGFyZ2V0SWRzID0ge307XG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGluaGVyaXQoVG91Y2hJbnB1dCwgSW5wdXQsIHtcbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBNVEVoYW5kbGVyKGV2KSB7XG4gICAgICB2YXIgdHlwZSA9IFRPVUNIX0lOUFVUX01BUFtldi50eXBlXTtcbiAgICAgIHZhciB0b3VjaGVzID0gZ2V0VG91Y2hlcy5jYWxsKHRoaXMsIGV2LCB0eXBlKTtcblxuICAgICAgaWYgKCF0b3VjaGVzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIHR5cGUsIHtcbiAgICAgICAgcG9pbnRlcnM6IHRvdWNoZXNbMF0sXG4gICAgICAgIGNoYW5nZWRQb2ludGVyczogdG91Y2hlc1sxXSxcbiAgICAgICAgcG9pbnRlclR5cGU6IElOUFVUX1RZUEVfVE9VQ0gsXG4gICAgICAgIHNyY0V2ZW50OiBldlxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgLyoqXG4gICAqIEB0aGlzIHtUb3VjaElucHV0fVxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHR5cGUgZmxhZ1xuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfEFycmF5fSBbYWxsLCBjaGFuZ2VkXVxuICAgKi9cblxuICBmdW5jdGlvbiBnZXRUb3VjaGVzKGV2LCB0eXBlKSB7XG4gICAgdmFyIGFsbFRvdWNoZXMgPSB0b0FycmF5KGV2LnRvdWNoZXMpO1xuICAgIHZhciB0YXJnZXRJZHMgPSB0aGlzLnRhcmdldElkczsgLy8gd2hlbiB0aGVyZSBpcyBvbmx5IG9uZSB0b3VjaCwgdGhlIHByb2Nlc3MgY2FuIGJlIHNpbXBsaWZpZWRcblxuICAgIGlmICh0eXBlICYgKElOUFVUX1NUQVJUIHwgSU5QVVRfTU9WRSkgJiYgYWxsVG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRhcmdldElkc1thbGxUb3VjaGVzWzBdLmlkZW50aWZpZXJdID0gdHJ1ZTtcbiAgICAgIHJldHVybiBbYWxsVG91Y2hlcywgYWxsVG91Y2hlc107XG4gICAgfVxuXG4gICAgdmFyIGksXG4gICAgICAgIHRhcmdldFRvdWNoZXMsXG4gICAgICAgIGNoYW5nZWRUb3VjaGVzID0gdG9BcnJheShldi5jaGFuZ2VkVG91Y2hlcyksXG4gICAgICAgIGNoYW5nZWRUYXJnZXRUb3VjaGVzID0gW10sXG4gICAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0OyAvLyBnZXQgdGFyZ2V0IHRvdWNoZXMgZnJvbSB0b3VjaGVzXG5cbiAgICB0YXJnZXRUb3VjaGVzID0gYWxsVG91Y2hlcy5maWx0ZXIoZnVuY3Rpb24gKHRvdWNoKSB7XG4gICAgICByZXR1cm4gaGFzUGFyZW50KHRvdWNoLnRhcmdldCwgdGFyZ2V0KTtcbiAgICB9KTsgLy8gY29sbGVjdCB0b3VjaGVzXG5cbiAgICBpZiAodHlwZSA9PT0gSU5QVVRfU1RBUlQpIHtcbiAgICAgIGkgPSAwO1xuXG4gICAgICB3aGlsZSAoaSA8IHRhcmdldFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgIHRhcmdldElkc1t0YXJnZXRUb3VjaGVzW2ldLmlkZW50aWZpZXJdID0gdHJ1ZTtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH0gLy8gZmlsdGVyIGNoYW5nZWQgdG91Y2hlcyB0byBvbmx5IGNvbnRhaW4gdG91Y2hlcyB0aGF0IGV4aXN0IGluIHRoZSBjb2xsZWN0ZWQgdGFyZ2V0IGlkc1xuXG5cbiAgICBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgY2hhbmdlZFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICBpZiAodGFyZ2V0SWRzW2NoYW5nZWRUb3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgIGNoYW5nZWRUYXJnZXRUb3VjaGVzLnB1c2goY2hhbmdlZFRvdWNoZXNbaV0pO1xuICAgICAgfSAvLyBjbGVhbnVwIHJlbW92ZWQgdG91Y2hlc1xuXG5cbiAgICAgIGlmICh0eXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcbiAgICAgICAgZGVsZXRlIHRhcmdldElkc1tjaGFuZ2VkVG91Y2hlc1tpXS5pZGVudGlmaWVyXTtcbiAgICAgIH1cblxuICAgICAgaSsrO1xuICAgIH1cblxuICAgIGlmICghY2hhbmdlZFRhcmdldFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIFsvLyBtZXJnZSB0YXJnZXRUb3VjaGVzIHdpdGggY2hhbmdlZFRhcmdldFRvdWNoZXMgc28gaXQgY29udGFpbnMgQUxMIHRvdWNoZXMsIGluY2x1ZGluZyAnZW5kJyBhbmQgJ2NhbmNlbCdcbiAgICB1bmlxdWVBcnJheSh0YXJnZXRUb3VjaGVzLmNvbmNhdChjaGFuZ2VkVGFyZ2V0VG91Y2hlcyksICdpZGVudGlmaWVyJywgdHJ1ZSksIGNoYW5nZWRUYXJnZXRUb3VjaGVzXTtcbiAgfVxuICAvKipcbiAgICogQ29tYmluZWQgdG91Y2ggYW5kIG1vdXNlIGlucHV0XG4gICAqXG4gICAqIFRvdWNoIGhhcyBhIGhpZ2hlciBwcmlvcml0eSB0aGVuIG1vdXNlLCBhbmQgd2hpbGUgdG91Y2hpbmcgbm8gbW91c2UgZXZlbnRzIGFyZSBhbGxvd2VkLlxuICAgKiBUaGlzIGJlY2F1c2UgdG91Y2ggZGV2aWNlcyBhbHNvIGVtaXQgbW91c2UgZXZlbnRzIHdoaWxlIGRvaW5nIGEgdG91Y2guXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyBJbnB1dFxuICAgKi9cblxuXG4gIHZhciBERURVUF9USU1FT1VUID0gMjUwMDtcbiAgdmFyIERFRFVQX0RJU1RBTkNFID0gMjU7XG5cbiAgZnVuY3Rpb24gVG91Y2hNb3VzZUlucHV0KCkge1xuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdmFyIGhhbmRsZXIgPSBiaW5kRm4odGhpcy5oYW5kbGVyLCB0aGlzKTtcbiAgICB0aGlzLnRvdWNoID0gbmV3IFRvdWNoSW5wdXQodGhpcy5tYW5hZ2VyLCBoYW5kbGVyKTtcbiAgICB0aGlzLm1vdXNlID0gbmV3IE1vdXNlSW5wdXQodGhpcy5tYW5hZ2VyLCBoYW5kbGVyKTtcbiAgICB0aGlzLnByaW1hcnlUb3VjaCA9IG51bGw7XG4gICAgdGhpcy5sYXN0VG91Y2hlcyA9IFtdO1xuICB9XG5cbiAgaW5oZXJpdChUb3VjaE1vdXNlSW5wdXQsIElucHV0LCB7XG4gICAgLyoqXG4gICAgICogaGFuZGxlIG1vdXNlIGFuZCB0b3VjaCBldmVudHNcbiAgICAgKiBAcGFyYW0ge0hhbW1lcn0gbWFuYWdlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dEV2ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxuICAgICAqL1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIFRNRWhhbmRsZXIobWFuYWdlciwgaW5wdXRFdmVudCwgaW5wdXREYXRhKSB7XG4gICAgICB2YXIgaXNUb3VjaCA9IGlucHV0RGF0YS5wb2ludGVyVHlwZSA9PSBJTlBVVF9UWVBFX1RPVUNILFxuICAgICAgICAgIGlzTW91c2UgPSBpbnB1dERhdGEucG9pbnRlclR5cGUgPT0gSU5QVVRfVFlQRV9NT1VTRTtcblxuICAgICAgaWYgKGlzTW91c2UgJiYgaW5wdXREYXRhLnNvdXJjZUNhcGFiaWxpdGllcyAmJiBpbnB1dERhdGEuc291cmNlQ2FwYWJpbGl0aWVzLmZpcmVzVG91Y2hFdmVudHMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyB3aGVuIHdlJ3JlIGluIGEgdG91Y2ggZXZlbnQsIHJlY29yZCB0b3VjaGVzIHRvICBkZS1kdXBlIHN5bnRoZXRpYyBtb3VzZSBldmVudFxuXG5cbiAgICAgIGlmIChpc1RvdWNoKSB7XG4gICAgICAgIHJlY29yZFRvdWNoZXMuY2FsbCh0aGlzLCBpbnB1dEV2ZW50LCBpbnB1dERhdGEpO1xuICAgICAgfSBlbHNlIGlmIChpc01vdXNlICYmIGlzU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBpbnB1dERhdGEpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWxsYmFjayhtYW5hZ2VyLCBpbnB1dEV2ZW50LCBpbnB1dERhdGEpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZW1vdmUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAqL1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLnRvdWNoLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMubW91c2UuZGVzdHJveSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gcmVjb3JkVG91Y2hlcyhldmVudFR5cGUsIGV2ZW50RGF0YSkge1xuICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCkge1xuICAgICAgdGhpcy5wcmltYXJ5VG91Y2ggPSBldmVudERhdGEuY2hhbmdlZFBvaW50ZXJzWzBdLmlkZW50aWZpZXI7XG4gICAgICBzZXRMYXN0VG91Y2guY2FsbCh0aGlzLCBldmVudERhdGEpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcbiAgICAgIHNldExhc3RUb3VjaC5jYWxsKHRoaXMsIGV2ZW50RGF0YSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0TGFzdFRvdWNoKGV2ZW50RGF0YSkge1xuICAgIHZhciB0b3VjaCA9IGV2ZW50RGF0YS5jaGFuZ2VkUG9pbnRlcnNbMF07XG5cbiAgICBpZiAodG91Y2guaWRlbnRpZmllciA9PT0gdGhpcy5wcmltYXJ5VG91Y2gpIHtcbiAgICAgIHZhciBsYXN0VG91Y2ggPSB7XG4gICAgICAgIHg6IHRvdWNoLmNsaWVudFgsXG4gICAgICAgIHk6IHRvdWNoLmNsaWVudFlcbiAgICAgIH07XG4gICAgICB0aGlzLmxhc3RUb3VjaGVzLnB1c2gobGFzdFRvdWNoKTtcbiAgICAgIHZhciBsdHMgPSB0aGlzLmxhc3RUb3VjaGVzO1xuXG4gICAgICB2YXIgcmVtb3ZlTGFzdFRvdWNoID0gZnVuY3Rpb24gcmVtb3ZlTGFzdFRvdWNoKCkge1xuICAgICAgICB2YXIgaSA9IGx0cy5pbmRleE9mKGxhc3RUb3VjaCk7XG5cbiAgICAgICAgaWYgKGkgPiAtMSkge1xuICAgICAgICAgIGx0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNldFRpbWVvdXQocmVtb3ZlTGFzdFRvdWNoLCBERURVUF9USU1FT1VUKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1N5bnRoZXRpY0V2ZW50KGV2ZW50RGF0YSkge1xuICAgIHZhciB4ID0gZXZlbnREYXRhLnNyY0V2ZW50LmNsaWVudFgsXG4gICAgICAgIHkgPSBldmVudERhdGEuc3JjRXZlbnQuY2xpZW50WTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sYXN0VG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHQgPSB0aGlzLmxhc3RUb3VjaGVzW2ldO1xuICAgICAgdmFyIGR4ID0gTWF0aC5hYnMoeCAtIHQueCksXG4gICAgICAgICAgZHkgPSBNYXRoLmFicyh5IC0gdC55KTtcblxuICAgICAgaWYgKGR4IDw9IERFRFVQX0RJU1RBTkNFICYmIGR5IDw9IERFRFVQX0RJU1RBTkNFKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBQUkVGSVhFRF9UT1VDSF9BQ1RJT04gPSBmdW5jdGlvbiBQUkVGSVhFRF9UT1VDSF9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIHByZWZpeGVkKFRFU1RfRUxFTUVOVCgpLnN0eWxlLCAndG91Y2hBY3Rpb24nKTtcbiAgfTtcblxuICB2YXIgTkFUSVZFX1RPVUNIX0FDVElPTiA9IGZ1bmN0aW9uIE5BVElWRV9UT1VDSF9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFBSRUZJWEVEX1RPVUNIX0FDVElPTigpICE9PSB1bmRlZmluZWQ7XG4gIH07IC8vIG1hZ2ljYWwgdG91Y2hBY3Rpb24gdmFsdWVcblxuXG4gIHZhciBUT1VDSF9BQ1RJT05fQ09NUFVURSA9ICdjb21wdXRlJztcbiAgdmFyIFRPVUNIX0FDVElPTl9BVVRPID0gJ2F1dG8nO1xuICB2YXIgVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTiA9ICdtYW5pcHVsYXRpb24nOyAvLyBub3QgaW1wbGVtZW50ZWRcblxuICB2YXIgVE9VQ0hfQUNUSU9OX05PTkUgPSAnbm9uZSc7XG4gIHZhciBUT1VDSF9BQ1RJT05fUEFOX1ggPSAncGFuLXgnO1xuICB2YXIgVE9VQ0hfQUNUSU9OX1BBTl9ZID0gJ3Bhbi15JztcbiAgLyoqXG4gICAqIFRvdWNoIEFjdGlvblxuICAgKiBzZXRzIHRoZSB0b3VjaEFjdGlvbiBwcm9wZXJ0eSBvciB1c2VzIHRoZSBqcyBhbHRlcm5hdGl2ZVxuICAgKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cblxuICBmdW5jdGlvbiBUb3VjaEFjdGlvbihtYW5hZ2VyLCB2YWx1ZSkge1xuICAgIHRoaXMubWFuYWdlciA9IG1hbmFnZXI7XG4gICAgdGhpcy5zZXQodmFsdWUpO1xuICB9XG5cbiAgVG91Y2hBY3Rpb24ucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIHNldCB0aGUgdG91Y2hBY3Rpb24gdmFsdWUgb24gdGhlIGVsZW1lbnQgb3IgZW5hYmxlIHRoZSBwb2x5ZmlsbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAvLyBmaW5kIG91dCB0aGUgdG91Y2gtYWN0aW9uIGJ5IHRoZSBldmVudCBoYW5kbGVyc1xuICAgICAgaWYgKHZhbHVlID09IFRPVUNIX0FDVElPTl9DT01QVVRFKSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy5jb21wdXRlKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBUT1VDSF9BQ1RJT05fTUFQID0gZ2V0VG91Y2hBY3Rpb25Qcm9wcygpO1xuXG4gICAgICBpZiAoTkFUSVZFX1RPVUNIX0FDVElPTigpICYmIHRoaXMubWFuYWdlci5lbGVtZW50LnN0eWxlICYmIFRPVUNIX0FDVElPTl9NQVBbdmFsdWVdKSB7XG4gICAgICAgIHRoaXMubWFuYWdlci5lbGVtZW50LnN0eWxlW1BSRUZJWEVEX1RPVUNIX0FDVElPTigpXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFjdGlvbnMgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICoganVzdCByZS1zZXQgdGhlIHRvdWNoQWN0aW9uIHZhbHVlXG4gICAgICovXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB0aGlzLnNldCh0aGlzLm1hbmFnZXIub3B0aW9ucy50b3VjaEFjdGlvbik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNvbXB1dGUgdGhlIHZhbHVlIGZvciB0aGUgdG91Y2hBY3Rpb24gcHJvcGVydHkgYmFzZWQgb24gdGhlIHJlY29nbml6ZXIncyBzZXR0aW5nc1xuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHZhbHVlXG4gICAgICovXG4gICAgY29tcHV0ZTogZnVuY3Rpb24gY29tcHV0ZSgpIHtcbiAgICAgIHZhciBhY3Rpb25zID0gW107XG4gICAgICBlYWNoKHRoaXMubWFuYWdlci5yZWNvZ25pemVycywgZnVuY3Rpb24gKHJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKGJvb2xPckZuKHJlY29nbml6ZXIub3B0aW9ucy5lbmFibGUsIFtyZWNvZ25pemVyXSkpIHtcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9ucy5jb25jYXQocmVjb2duaXplci5nZXRUb3VjaEFjdGlvbigpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY2xlYW5Ub3VjaEFjdGlvbnMoYWN0aW9ucy5qb2luKCcgJykpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQgb24gZWFjaCBpbnB1dCBjeWNsZSBhbmQgcHJvdmlkZXMgdGhlIHByZXZlbnRpbmcgb2YgdGhlIGJyb3dzZXIgYmVoYXZpb3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKi9cbiAgICBwcmV2ZW50RGVmYXVsdHM6IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0cyhpbnB1dCkge1xuICAgICAgdmFyIHNyY0V2ZW50ID0gaW5wdXQuc3JjRXZlbnQ7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gaW5wdXQub2Zmc2V0RGlyZWN0aW9uOyAvLyBpZiB0aGUgdG91Y2ggYWN0aW9uIGRpZCBwcmV2ZW50ZWQgb25jZSB0aGlzIHNlc3Npb25cblxuICAgICAgaWYgKHRoaXMubWFuYWdlci5zZXNzaW9uLnByZXZlbnRlZCkge1xuICAgICAgICBzcmNFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgdmFyIFRPVUNIX0FDVElPTl9NQVAgPSBnZXRUb3VjaEFjdGlvblByb3BzKCk7XG4gICAgICB2YXIgaGFzTm9uZSA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9OT05FKSAmJiAhVE9VQ0hfQUNUSU9OX01BUFtUT1VDSF9BQ1RJT05fTk9ORV07XG4gICAgICB2YXIgaGFzUGFuWSA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9QQU5fWSkgJiYgIVRPVUNIX0FDVElPTl9NQVBbVE9VQ0hfQUNUSU9OX1BBTl9ZXTtcbiAgICAgIHZhciBoYXNQYW5YID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9YKSAmJiAhVE9VQ0hfQUNUSU9OX01BUFtUT1VDSF9BQ1RJT05fUEFOX1hdO1xuXG4gICAgICBpZiAoaGFzTm9uZSkge1xuICAgICAgICAvL2RvIG5vdCBwcmV2ZW50IGRlZmF1bHRzIGlmIHRoaXMgaXMgYSB0YXAgZ2VzdHVyZVxuICAgICAgICB2YXIgaXNUYXBQb2ludGVyID0gaW5wdXQucG9pbnRlcnMubGVuZ3RoID09PSAxO1xuICAgICAgICB2YXIgaXNUYXBNb3ZlbWVudCA9IGlucHV0LmRpc3RhbmNlIDwgMjtcbiAgICAgICAgdmFyIGlzVGFwVG91Y2hUaW1lID0gaW5wdXQuZGVsdGFUaW1lIDwgMjUwO1xuXG4gICAgICAgIGlmIChpc1RhcFBvaW50ZXIgJiYgaXNUYXBNb3ZlbWVudCAmJiBpc1RhcFRvdWNoVGltZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaGFzUGFuWCAmJiBoYXNQYW5ZKSB7XG4gICAgICAgIC8vIGBwYW4teCBwYW4teWAgbWVhbnMgYnJvd3NlciBoYW5kbGVzIGFsbCBzY3JvbGxpbmcvcGFubmluZywgZG8gbm90IHByZXZlbnRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzTm9uZSB8fCBoYXNQYW5ZICYmIGRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMIHx8IGhhc1BhblggJiYgZGlyZWN0aW9uICYgRElSRUNUSU9OX1ZFUlRJQ0FMKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZXZlbnRTcmMoc3JjRXZlbnQpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYWxsIHByZXZlbnREZWZhdWx0IHRvIHByZXZlbnQgdGhlIGJyb3dzZXIncyBkZWZhdWx0IGJlaGF2aW9yIChzY3JvbGxpbmcgaW4gbW9zdCBjYXNlcylcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3JjRXZlbnRcbiAgICAgKi9cbiAgICBwcmV2ZW50U3JjOiBmdW5jdGlvbiBwcmV2ZW50U3JjKHNyY0V2ZW50KSB7XG4gICAgICB0aGlzLm1hbmFnZXIuc2Vzc2lvbi5wcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiB3aGVuIHRoZSB0b3VjaEFjdGlvbnMgYXJlIGNvbGxlY3RlZCB0aGV5IGFyZSBub3QgYSB2YWxpZCB2YWx1ZSwgc28gd2UgbmVlZCB0byBjbGVhbiB0aGluZ3MgdXAuICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGFjdGlvbnNcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNsZWFuVG91Y2hBY3Rpb25zKGFjdGlvbnMpIHtcbiAgICAvLyBub25lXG4gICAgaWYgKGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9OT05FKSkge1xuICAgICAgcmV0dXJuIFRPVUNIX0FDVElPTl9OT05FO1xuICAgIH1cblxuICAgIHZhciBoYXNQYW5YID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9YKTtcbiAgICB2YXIgaGFzUGFuWSA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9QQU5fWSk7IC8vIGlmIGJvdGggcGFuLXggYW5kIHBhbi15IGFyZSBzZXQgKGRpZmZlcmVudCByZWNvZ25pemVyc1xuICAgIC8vIGZvciBkaWZmZXJlbnQgZGlyZWN0aW9ucywgZS5nLiBob3Jpem9udGFsIHBhbiBidXQgdmVydGljYWwgc3dpcGU/KVxuICAgIC8vIHdlIG5lZWQgbm9uZSAoYXMgb3RoZXJ3aXNlIHdpdGggcGFuLXggcGFuLXkgY29tYmluZWQgbm9uZSBvZiB0aGVzZVxuICAgIC8vIHJlY29nbml6ZXJzIHdpbGwgd29yaywgc2luY2UgdGhlIGJyb3dzZXIgd291bGQgaGFuZGxlIGFsbCBwYW5uaW5nXG5cbiAgICBpZiAoaGFzUGFuWCAmJiBoYXNQYW5ZKSB7XG4gICAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX05PTkU7XG4gICAgfSAvLyBwYW4teCBPUiBwYW4teVxuXG5cbiAgICBpZiAoaGFzUGFuWCB8fCBoYXNQYW5ZKSB7XG4gICAgICByZXR1cm4gaGFzUGFuWCA/IFRPVUNIX0FDVElPTl9QQU5fWCA6IFRPVUNIX0FDVElPTl9QQU5fWTtcbiAgICB9IC8vIG1hbmlwdWxhdGlvblxuXG5cbiAgICBpZiAoaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTikpIHtcbiAgICAgIHJldHVybiBUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OO1xuICAgIH1cblxuICAgIHJldHVybiBUT1VDSF9BQ1RJT05fQVVUTztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRvdWNoQWN0aW9uUHJvcHMoKSB7XG4gICAgaWYgKCFOQVRJVkVfVE9VQ0hfQUNUSU9OKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdG91Y2hNYXAgPSB7fTtcblxuICAgIHZhciBjc3NTdXBwb3J0cyA9IGZ1bmN0aW9uIGNzc1N1cHBvcnRzKCkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5DU1MgJiYgd2luZG93LkNTUy5zdXBwb3J0cztcbiAgICB9O1xuXG4gICAgWydhdXRvJywgJ21hbmlwdWxhdGlvbicsICdwYW4teScsICdwYW4teCcsICdwYW4teCBwYW4teScsICdub25lJ10uZm9yRWFjaChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAvLyBJZiBjc3Muc3VwcG9ydHMgaXMgbm90IHN1cHBvcnRlZCBidXQgdGhlcmUgaXMgbmF0aXZlIHRvdWNoLWFjdGlvbiBhc3N1bWUgaXQgc3VwcG9ydHNcbiAgICAgIC8vIGFsbCB2YWx1ZXMuIFRoaXMgaXMgdGhlIGNhc2UgZm9yIElFIDEwIGFuZCAxMS5cbiAgICAgIHRvdWNoTWFwW3ZhbF0gPSBjc3NTdXBwb3J0cygpID8gd2luZG93LkNTUy5zdXBwb3J0cygndG91Y2gtYWN0aW9uJywgdmFsKSA6IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRvdWNoTWFwO1xuICB9XG4gIC8qKlxuICAgKiBSZWNvZ25pemVyIGZsb3cgZXhwbGFpbmVkOyAqXG4gICAqIEFsbCByZWNvZ25pemVycyBoYXZlIHRoZSBpbml0aWFsIHN0YXRlIG9mIFBPU1NJQkxFIHdoZW4gYSBpbnB1dCBzZXNzaW9uIHN0YXJ0cy5cbiAgICogVGhlIGRlZmluaXRpb24gb2YgYSBpbnB1dCBzZXNzaW9uIGlzIGZyb20gdGhlIGZpcnN0IGlucHV0IHVudGlsIHRoZSBsYXN0IGlucHV0LCB3aXRoIGFsbCBpdCdzIG1vdmVtZW50IGluIGl0LiAqXG4gICAqIEV4YW1wbGUgc2Vzc2lvbiBmb3IgbW91c2UtaW5wdXQ6IG1vdXNlZG93biAtPiBtb3VzZW1vdmUgLT4gbW91c2V1cFxuICAgKlxuICAgKiBPbiBlYWNoIHJlY29nbml6aW5nIGN5Y2xlIChzZWUgTWFuYWdlci5yZWNvZ25pemUpIHRoZSAucmVjb2duaXplKCkgbWV0aG9kIGlzIGV4ZWN1dGVkXG4gICAqIHdoaWNoIGRldGVybWluZXMgd2l0aCBzdGF0ZSBpdCBzaG91bGQgYmUuXG4gICAqXG4gICAqIElmIHRoZSByZWNvZ25pemVyIGhhcyB0aGUgc3RhdGUgRkFJTEVELCBDQU5DRUxMRUQgb3IgUkVDT0dOSVpFRCAoZXF1YWxzIEVOREVEKSwgaXQgaXMgcmVzZXQgdG9cbiAgICogUE9TU0lCTEUgdG8gZ2l2ZSBpdCBhbm90aGVyIGNoYW5nZSBvbiB0aGUgbmV4dCBjeWNsZS5cbiAgICpcbiAgICogICAgICAgICAgICAgICBQb3NzaWJsZVxuICAgKiAgICAgICAgICAgICAgICAgIHxcbiAgICogICAgICAgICAgICArLS0tLS0rLS0tLS0tLS0tLS0tLS0tK1xuICAgKiAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICB8XG4gICAqICAgICAgKy0tLS0tKy0tLS0tKyAgICAgICAgICAgICAgIHxcbiAgICogICAgICB8ICAgICAgICAgICB8ICAgICAgICAgICAgICAgfFxuICAgKiAgIEZhaWxlZCAgICAgIENhbmNlbGxlZCAgICAgICAgICB8XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLSstLS0tLS0rXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICB8XG4gICAqICAgICAgICAgICAgICAgICAgICAgIFJlY29nbml6ZWQgICAgICAgQmVnYW5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYW5nZWRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRW5kZWQvUmVjb2duaXplZFxuICAgKi9cblxuXG4gIHZhciBTVEFURV9QT1NTSUJMRSA9IDE7XG4gIHZhciBTVEFURV9CRUdBTiA9IDI7XG4gIHZhciBTVEFURV9DSEFOR0VEID0gNDtcbiAgdmFyIFNUQVRFX0VOREVEID0gODtcbiAgdmFyIFNUQVRFX1JFQ09HTklaRUQgPSBTVEFURV9FTkRFRDtcbiAgdmFyIFNUQVRFX0NBTkNFTExFRCA9IDE2O1xuICB2YXIgU1RBVEVfRkFJTEVEID0gMzI7XG4gIC8qKlxuICAgKiBSZWNvZ25pemVyXG4gICAqIEV2ZXJ5IHJlY29nbml6ZXIgbmVlZHMgdG8gZXh0ZW5kIGZyb20gdGhpcyBjbGFzcy5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqL1xuXG4gIGZ1bmN0aW9uIFJlY29nbml6ZXIob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IGFzc2lnbih7fSwgdGhpcy5kZWZhdWx0cywgb3B0aW9ucyB8fCB7fSk7XG4gICAgdGhpcy5pZCA9IHVuaXF1ZUlkKCk7XG4gICAgdGhpcy5tYW5hZ2VyID0gbnVsbDsgLy8gZGVmYXVsdCBpcyBlbmFibGUgdHJ1ZVxuXG4gICAgdGhpcy5vcHRpb25zLmVuYWJsZSA9IGlmVW5kZWZpbmVkKHRoaXMub3B0aW9ucy5lbmFibGUsIHRydWUpO1xuICAgIHRoaXMuc3RhdGUgPSBTVEFURV9QT1NTSUJMRTtcbiAgICB0aGlzLnNpbXVsdGFuZW91cyA9IHt9O1xuICAgIHRoaXMucmVxdWlyZUZhaWwgPSBbXTtcbiAgfVxuXG4gIFJlY29nbml6ZXIucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIEB2aXJ0dWFsXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBkZWZhdWx0czoge30sXG5cbiAgICAvKipcbiAgICAgKiBzZXQgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7UmVjb2duaXplcn1cbiAgICAgKi9cbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChvcHRpb25zKSB7XG4gICAgICBhc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTsgLy8gYWxzbyB1cGRhdGUgdGhlIHRvdWNoQWN0aW9uLCBpbiBjYXNlIHNvbWV0aGluZyBjaGFuZ2VkIGFib3V0IHRoZSBkaXJlY3Rpb25zL2VuYWJsZWQgc3RhdGVcblxuICAgICAgdGhpcy5tYW5hZ2VyICYmIHRoaXMubWFuYWdlci50b3VjaEFjdGlvbi51cGRhdGUoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZWNvZ25pemUgc2ltdWx0YW5lb3VzIHdpdGggYW4gb3RoZXIgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG4gICAgcmVjb2duaXplV2l0aDogZnVuY3Rpb24gcmVjb2duaXplV2l0aChvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdyZWNvZ25pemVXaXRoJywgdGhpcykpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaW11bHRhbmVvdXMgPSB0aGlzLnNpbXVsdGFuZW91cztcbiAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcblxuICAgICAgaWYgKCFzaW11bHRhbmVvdXNbb3RoZXJSZWNvZ25pemVyLmlkXSkge1xuICAgICAgICBzaW11bHRhbmVvdXNbb3RoZXJSZWNvZ25pemVyLmlkXSA9IG90aGVyUmVjb2duaXplcjtcbiAgICAgICAgb3RoZXJSZWNvZ25pemVyLnJlY29nbml6ZVdpdGgodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBkcm9wIHRoZSBzaW11bHRhbmVvdXMgbGluay4gaXQgZG9lc250IHJlbW92ZSB0aGUgbGluayBvbiB0aGUgb3RoZXIgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG4gICAgZHJvcFJlY29nbml6ZVdpdGg6IGZ1bmN0aW9uIGRyb3BSZWNvZ25pemVXaXRoKG90aGVyUmVjb2duaXplcikge1xuICAgICAgaWYgKGludm9rZUFycmF5QXJnKG90aGVyUmVjb2duaXplciwgJ2Ryb3BSZWNvZ25pemVXaXRoJywgdGhpcykpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcbiAgICAgIGRlbGV0ZSB0aGlzLnNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlY29nbml6ZXIgY2FuIG9ubHkgcnVuIHdoZW4gYW4gb3RoZXIgaXMgZmFpbGluZ1xuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICByZXF1aXJlRmFpbHVyZTogZnVuY3Rpb24gcmVxdWlyZUZhaWx1cmUob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAncmVxdWlyZUZhaWx1cmUnLCB0aGlzKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIHJlcXVpcmVGYWlsID0gdGhpcy5yZXF1aXJlRmFpbDtcbiAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcblxuICAgICAgaWYgKGluQXJyYXkocmVxdWlyZUZhaWwsIG90aGVyUmVjb2duaXplcikgPT09IC0xKSB7XG4gICAgICAgIHJlcXVpcmVGYWlsLnB1c2gob3RoZXJSZWNvZ25pemVyKTtcbiAgICAgICAgb3RoZXJSZWNvZ25pemVyLnJlcXVpcmVGYWlsdXJlKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZHJvcCB0aGUgcmVxdWlyZUZhaWx1cmUgbGluay4gaXQgZG9lcyBub3QgcmVtb3ZlIHRoZSBsaW5rIG9uIHRoZSBvdGhlciByZWNvZ25pemVyLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBkcm9wUmVxdWlyZUZhaWx1cmU6IGZ1bmN0aW9uIGRyb3BSZXF1aXJlRmFpbHVyZShvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdkcm9wUmVxdWlyZUZhaWx1cmUnLCB0aGlzKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xuICAgICAgdmFyIGluZGV4ID0gaW5BcnJheSh0aGlzLnJlcXVpcmVGYWlsLCBvdGhlclJlY29nbml6ZXIpO1xuXG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICB0aGlzLnJlcXVpcmVGYWlsLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBoYXMgcmVxdWlyZSBmYWlsdXJlcyBib29sZWFuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgaGFzUmVxdWlyZUZhaWx1cmVzOiBmdW5jdGlvbiBoYXNSZXF1aXJlRmFpbHVyZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1aXJlRmFpbC5sZW5ndGggPiAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBpZiB0aGUgcmVjb2duaXplciBjYW4gcmVjb2duaXplIHNpbXVsdGFuZW91cyB3aXRoIGFuIG90aGVyIHJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGNhblJlY29nbml6ZVdpdGg6IGZ1bmN0aW9uIGNhblJlY29nbml6ZVdpdGgob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICByZXR1cm4gISF0aGlzLnNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBZb3Ugc2hvdWxkIHVzZSBgdHJ5RW1pdGAgaW5zdGVhZCBvZiBgZW1pdGAgZGlyZWN0bHkgdG8gY2hlY2tcbiAgICAgKiB0aGF0IGFsbCB0aGUgbmVlZGVkIHJlY29nbml6ZXJzIGhhcyBmYWlsZWQgYmVmb3JlIGVtaXR0aW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqL1xuICAgIGVtaXQ6IGZ1bmN0aW9uIGVtaXQoaW5wdXQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgIGZ1bmN0aW9uIGVtaXQoZXZlbnQpIHtcbiAgICAgICAgc2VsZi5tYW5hZ2VyLmVtaXQoZXZlbnQsIGlucHV0KTtcbiAgICAgIH0gLy8gJ3BhbnN0YXJ0JyBhbmQgJ3Bhbm1vdmUnXG5cblxuICAgICAgaWYgKHN0YXRlIDwgU1RBVEVfRU5ERUQpIHtcbiAgICAgICAgZW1pdChzZWxmLm9wdGlvbnMuZXZlbnQgKyBzdGF0ZVN0cihzdGF0ZSkpO1xuICAgICAgfVxuXG4gICAgICBlbWl0KHNlbGYub3B0aW9ucy5ldmVudCk7IC8vIHNpbXBsZSAnZXZlbnROYW1lJyBldmVudHNcblxuICAgICAgaWYgKGlucHV0LmFkZGl0aW9uYWxFdmVudCkge1xuICAgICAgICAvLyBhZGRpdGlvbmFsIGV2ZW50KHBhbmxlZnQsIHBhbnJpZ2h0LCBwaW5jaGluLCBwaW5jaG91dC4uLilcbiAgICAgICAgZW1pdChpbnB1dC5hZGRpdGlvbmFsRXZlbnQpO1xuICAgICAgfSAvLyBwYW5lbmQgYW5kIHBhbmNhbmNlbFxuXG5cbiAgICAgIGlmIChzdGF0ZSA+PSBTVEFURV9FTkRFRCkge1xuICAgICAgICBlbWl0KHNlbGYub3B0aW9ucy5ldmVudCArIHN0YXRlU3RyKHN0YXRlKSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIHRoYXQgYWxsIHRoZSByZXF1aXJlIGZhaWx1cmUgcmVjb2duaXplcnMgaGFzIGZhaWxlZCxcbiAgICAgKiBpZiB0cnVlLCBpdCBlbWl0cyBhIGdlc3R1cmUgZXZlbnQsXG4gICAgICogb3RoZXJ3aXNlLCBzZXR1cCB0aGUgc3RhdGUgdG8gRkFJTEVELlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqL1xuICAgIHRyeUVtaXQ6IGZ1bmN0aW9uIHRyeUVtaXQoaW5wdXQpIHtcbiAgICAgIGlmICh0aGlzLmNhbkVtaXQoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbWl0KGlucHV0KTtcbiAgICAgIH0gLy8gaXQncyBmYWlsaW5nIGFueXdheVxuXG5cbiAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9GQUlMRUQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNhbiB3ZSBlbWl0P1xuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGNhbkVtaXQ6IGZ1bmN0aW9uIGNhbkVtaXQoKSB7XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHdoaWxlIChpIDwgdGhpcy5yZXF1aXJlRmFpbC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKCEodGhpcy5yZXF1aXJlRmFpbFtpXS5zdGF0ZSAmIChTVEFURV9GQUlMRUQgfCBTVEFURV9QT1NTSUJMRSkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaSsrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdXBkYXRlIHRoZSByZWNvZ25pemVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxuICAgICAqL1xuICAgIHJlY29nbml6ZTogZnVuY3Rpb24gcmVjb2duaXplKGlucHV0RGF0YSkge1xuICAgICAgLy8gbWFrZSBhIG5ldyBjb3B5IG9mIHRoZSBpbnB1dERhdGFcbiAgICAgIC8vIHNvIHdlIGNhbiBjaGFuZ2UgdGhlIGlucHV0RGF0YSB3aXRob3V0IG1lc3NpbmcgdXAgdGhlIG90aGVyIHJlY29nbml6ZXJzXG4gICAgICB2YXIgaW5wdXREYXRhQ2xvbmUgPSBhc3NpZ24oe30sIGlucHV0RGF0YSk7IC8vIGlzIGlzIGVuYWJsZWQgYW5kIGFsbG93IHJlY29nbml6aW5nP1xuXG4gICAgICBpZiAoIWJvb2xPckZuKHRoaXMub3B0aW9ucy5lbmFibGUsIFt0aGlzLCBpbnB1dERhdGFDbG9uZV0pKSB7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0ZBSUxFRDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyByZXNldCB3aGVuIHdlJ3ZlIHJlYWNoZWQgdGhlIGVuZFxuXG5cbiAgICAgIGlmICh0aGlzLnN0YXRlICYgKFNUQVRFX1JFQ09HTklaRUQgfCBTVEFURV9DQU5DRUxMRUQgfCBTVEFURV9GQUlMRUQpKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9QT1NTSUJMRTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMucHJvY2VzcyhpbnB1dERhdGFDbG9uZSk7IC8vIHRoZSByZWNvZ25pemVyIGhhcyByZWNvZ25pemVkIGEgZ2VzdHVyZVxuICAgICAgLy8gc28gdHJpZ2dlciBhbiBldmVudFxuXG4gICAgICBpZiAodGhpcy5zdGF0ZSAmIChTVEFURV9CRUdBTiB8IFNUQVRFX0NIQU5HRUQgfCBTVEFURV9FTkRFRCB8IFNUQVRFX0NBTkNFTExFRCkpIHtcbiAgICAgICAgdGhpcy50cnlFbWl0KGlucHV0RGF0YUNsb25lKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIHRoZSBzdGF0ZSBvZiB0aGUgcmVjb2duaXplclxuICAgICAqIHRoZSBhY3R1YWwgcmVjb2duaXppbmcgaGFwcGVucyBpbiB0aGlzIG1ldGhvZFxuICAgICAqIEB2aXJ0dWFsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxuICAgICAqIEByZXR1cm5zIHtDb25zdH0gU1RBVEVcbiAgICAgKi9cbiAgICBwcm9jZXNzOiBmdW5jdGlvbiBwcm9jZXNzKGlucHV0RGF0YSkge30sXG4gICAgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gdGhlIHByZWZlcnJlZCB0b3VjaC1hY3Rpb25cbiAgICAgKiBAdmlydHVhbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICAgKi9cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24gZ2V0VG91Y2hBY3Rpb24oKSB7fSxcblxuICAgIC8qKlxuICAgICAqIGNhbGxlZCB3aGVuIHRoZSBnZXN0dXJlIGlzbid0IGFsbG93ZWQgdG8gcmVjb2duaXplXG4gICAgICogbGlrZSB3aGVuIGFub3RoZXIgaXMgYmVpbmcgcmVjb2duaXplZCBvciBpdCBpcyBkaXNhYmxlZFxuICAgICAqIEB2aXJ0dWFsXG4gICAgICovXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkge31cbiAgfTtcbiAgLyoqXG4gICAqIGdldCBhIHVzYWJsZSBzdHJpbmcsIHVzZWQgYXMgZXZlbnQgcG9zdGZpeFxuICAgKiBAcGFyYW0ge0NvbnN0fSBzdGF0ZVxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBzdGF0ZVxuICAgKi9cblxuICBmdW5jdGlvbiBzdGF0ZVN0cihzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSAmIFNUQVRFX0NBTkNFTExFRCkge1xuICAgICAgcmV0dXJuICdjYW5jZWwnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUgJiBTVEFURV9FTkRFRCkge1xuICAgICAgcmV0dXJuICdlbmQnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUgJiBTVEFURV9DSEFOR0VEKSB7XG4gICAgICByZXR1cm4gJ21vdmUnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUgJiBTVEFURV9CRUdBTikge1xuICAgICAgcmV0dXJuICdzdGFydCc7XG4gICAgfVxuXG4gICAgcmV0dXJuICcnO1xuICB9XG4gIC8qKlxuICAgKiBkaXJlY3Rpb24gY29ucyB0byBzdHJpbmdcbiAgICogQHBhcmFtIHtDb25zdH0gZGlyZWN0aW9uXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlyZWN0aW9uU3RyKGRpcmVjdGlvbikge1xuICAgIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX0RPV04pIHtcbiAgICAgIHJldHVybiAnZG93bic7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX1VQKSB7XG4gICAgICByZXR1cm4gJ3VwJztcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBESVJFQ1RJT05fTEVGVCkge1xuICAgICAgcmV0dXJuICdsZWZ0JztcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBESVJFQ1RJT05fUklHSFQpIHtcbiAgICAgIHJldHVybiAncmlnaHQnO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxuICAvKipcbiAgICogZ2V0IGEgcmVjb2duaXplciBieSBuYW1lIGlmIGl0IGlzIGJvdW5kIHRvIGEgbWFuYWdlclxuICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ8U3RyaW5nfSBvdGhlclJlY29nbml6ZXJcbiAgICogQHBhcmFtIHtSZWNvZ25pemVyfSByZWNvZ25pemVyXG4gICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCByZWNvZ25pemVyKSB7XG4gICAgdmFyIG1hbmFnZXIgPSByZWNvZ25pemVyLm1hbmFnZXI7XG5cbiAgICBpZiAobWFuYWdlcikge1xuICAgICAgcmV0dXJuIG1hbmFnZXIuZ2V0KG90aGVyUmVjb2duaXplcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG90aGVyUmVjb2duaXplcjtcbiAgfVxuICAvKipcbiAgICogVGhpcyByZWNvZ25pemVyIGlzIGp1c3QgdXNlZCBhcyBhIGJhc2UgZm9yIHRoZSBzaW1wbGUgYXR0cmlidXRlIHJlY29nbml6ZXJzLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgUmVjb2duaXplclxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIEF0dHJSZWNvZ25pemVyKCkge1xuICAgIFJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGluaGVyaXQoQXR0clJlY29nbml6ZXIsIFJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIEF0dHJSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAqIEBkZWZhdWx0IDFcbiAgICAgICAqL1xuICAgICAgcG9pbnRlcnM6IDFcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBjaGVjayBpZiBpdCB0aGUgcmVjb2duaXplciByZWNlaXZlcyB2YWxpZCBpbnB1dCwgbGlrZSBpbnB1dC5kaXN0YW5jZSA+IDEwLlxuICAgICAqIEBtZW1iZXJvZiBBdHRyUmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSByZWNvZ25pemVkXG4gICAgICovXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uIGF0dHJUZXN0KGlucHV0KSB7XG4gICAgICB2YXIgb3B0aW9uUG9pbnRlcnMgPSB0aGlzLm9wdGlvbnMucG9pbnRlcnM7XG4gICAgICByZXR1cm4gb3B0aW9uUG9pbnRlcnMgPT09IDAgfHwgaW5wdXQucG9pbnRlcnMubGVuZ3RoID09PSBvcHRpb25Qb2ludGVycztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvY2VzcyB0aGUgaW5wdXQgYW5kIHJldHVybiB0aGUgc3RhdGUgZm9yIHRoZSByZWNvZ25pemVyXG4gICAgICogQG1lbWJlcm9mIEF0dHJSZWNvZ25pemVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICogQHJldHVybnMgeyp9IFN0YXRlXG4gICAgICovXG4gICAgcHJvY2VzczogZnVuY3Rpb24gcHJvY2VzcyhpbnB1dCkge1xuICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgIHZhciBldmVudFR5cGUgPSBpbnB1dC5ldmVudFR5cGU7XG4gICAgICB2YXIgaXNSZWNvZ25pemVkID0gc3RhdGUgJiAoU1RBVEVfQkVHQU4gfCBTVEFURV9DSEFOR0VEKTtcbiAgICAgIHZhciBpc1ZhbGlkID0gdGhpcy5hdHRyVGVzdChpbnB1dCk7IC8vIG9uIGNhbmNlbCBpbnB1dCBhbmQgd2UndmUgcmVjb2duaXplZCBiZWZvcmUsIHJldHVybiBTVEFURV9DQU5DRUxMRURcblxuICAgICAgaWYgKGlzUmVjb2duaXplZCAmJiAoZXZlbnRUeXBlICYgSU5QVVRfQ0FOQ0VMIHx8ICFpc1ZhbGlkKSkge1xuICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9DQU5DRUxMRUQ7XG4gICAgICB9IGVsc2UgaWYgKGlzUmVjb2duaXplZCB8fCBpc1ZhbGlkKSB7XG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9FTkQpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9FTkRFRDtcbiAgICAgICAgfSBlbHNlIGlmICghKHN0YXRlICYgU1RBVEVfQkVHQU4pKSB7XG4gICAgICAgICAgcmV0dXJuIFNUQVRFX0JFR0FOO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0YXRlIHwgU1RBVEVfQ0hBTkdFRDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9XG4gIH0pO1xuICAvKipcbiAgICogUGFuXG4gICAqIFJlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBkb3duIGFuZCBtb3ZlZCBpbiB0aGUgYWxsb3dlZCBkaXJlY3Rpb24uXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxuICAgKi9cblxuICBmdW5jdGlvbiBQYW5SZWNvZ25pemVyKCkge1xuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5wWCA9IG51bGw7XG4gICAgdGhpcy5wWSA9IG51bGw7XG4gIH1cblxuICBpbmhlcml0KFBhblJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQYW5SZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgIGV2ZW50OiAncGFuJyxcbiAgICAgIHRocmVzaG9sZDogMTAsXG4gICAgICBwb2ludGVyczogMSxcbiAgICAgIGRpcmVjdGlvbjogRElSRUNUSU9OX0FMTFxuICAgIH0sXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uIGdldFRvdWNoQWN0aW9uKCkge1xuICAgICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5kaXJlY3Rpb247XG4gICAgICB2YXIgYWN0aW9ucyA9IFtdO1xuXG4gICAgICBpZiAoZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHtcbiAgICAgICAgYWN0aW9ucy5wdXNoKFRPVUNIX0FDVElPTl9QQU5fWSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fVkVSVElDQUwpIHtcbiAgICAgICAgYWN0aW9ucy5wdXNoKFRPVUNIX0FDVElPTl9QQU5fWCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY3Rpb25zO1xuICAgIH0sXG4gICAgZGlyZWN0aW9uVGVzdDogZnVuY3Rpb24gZGlyZWN0aW9uVGVzdChpbnB1dCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICB2YXIgaGFzTW92ZWQgPSB0cnVlO1xuICAgICAgdmFyIGRpc3RhbmNlID0gaW5wdXQuZGlzdGFuY2U7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gaW5wdXQuZGlyZWN0aW9uO1xuICAgICAgdmFyIHggPSBpbnB1dC5kZWx0YVg7XG4gICAgICB2YXIgeSA9IGlucHV0LmRlbHRhWTsgLy8gbG9jayB0byBheGlzP1xuXG4gICAgICBpZiAoIShkaXJlY3Rpb24gJiBvcHRpb25zLmRpcmVjdGlvbikpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHtcbiAgICAgICAgICBkaXJlY3Rpb24gPSB4ID09PSAwID8gRElSRUNUSU9OX05PTkUgOiB4IDwgMCA/IERJUkVDVElPTl9MRUZUIDogRElSRUNUSU9OX1JJR0hUO1xuICAgICAgICAgIGhhc01vdmVkID0geCAhPSB0aGlzLnBYO1xuICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoaW5wdXQuZGVsdGFYKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaXJlY3Rpb24gPSB5ID09PSAwID8gRElSRUNUSU9OX05PTkUgOiB5IDwgMCA/IERJUkVDVElPTl9VUCA6IERJUkVDVElPTl9ET1dOO1xuICAgICAgICAgIGhhc01vdmVkID0geSAhPSB0aGlzLnBZO1xuICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoaW5wdXQuZGVsdGFZKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbnB1dC5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICByZXR1cm4gaGFzTW92ZWQgJiYgZGlzdGFuY2UgPiBvcHRpb25zLnRocmVzaG9sZCAmJiBkaXJlY3Rpb24gJiBvcHRpb25zLmRpcmVjdGlvbjtcbiAgICB9LFxuICAgIGF0dHJUZXN0OiBmdW5jdGlvbiBhdHRyVGVzdChpbnB1dCkge1xuICAgICAgcmV0dXJuIEF0dHJSZWNvZ25pemVyLnByb3RvdHlwZS5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJiAodGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOIHx8ICEodGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOKSAmJiB0aGlzLmRpcmVjdGlvblRlc3QoaW5wdXQpKTtcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uIGVtaXQoaW5wdXQpIHtcbiAgICAgIHRoaXMucFggPSBpbnB1dC5kZWx0YVg7XG4gICAgICB0aGlzLnBZID0gaW5wdXQuZGVsdGFZO1xuICAgICAgdmFyIGRpcmVjdGlvbiA9IGRpcmVjdGlvblN0cihpbnB1dC5kaXJlY3Rpb24pO1xuXG4gICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgIGlucHV0LmFkZGl0aW9uYWxFdmVudCA9IHRoaXMub3B0aW9ucy5ldmVudCArIGRpcmVjdGlvbjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc3VwZXIuZW1pdC5jYWxsKHRoaXMsIGlucHV0KTtcbiAgICB9XG4gIH0pO1xuICAvKipcbiAgICogUGluY2hcbiAgICogUmVjb2duaXplZCB3aGVuIHR3byBvciBtb3JlIHBvaW50ZXJzIGFyZSBtb3ZpbmcgdG93YXJkICh6b29tLWluKSBvciBhd2F5IGZyb20gZWFjaCBvdGhlciAoem9vbS1vdXQpLlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgQXR0clJlY29nbml6ZXJcbiAgICovXG5cbiAgZnVuY3Rpb24gUGluY2hSZWNvZ25pemVyKCkge1xuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBpbmhlcml0KFBpbmNoUmVjb2duaXplciwgQXR0clJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFBpbmNoUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICBldmVudDogJ3BpbmNoJyxcbiAgICAgIHRocmVzaG9sZDogMCxcbiAgICAgIHBvaW50ZXJzOiAyXG4gICAgfSxcbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24gZ2V0VG91Y2hBY3Rpb24oKSB7XG4gICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9OT05FXTtcbiAgICB9LFxuICAgIGF0dHJUZXN0OiBmdW5jdGlvbiBhdHRyVGVzdChpbnB1dCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3N1cGVyLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmIChNYXRoLmFicyhpbnB1dC5zY2FsZSAtIDEpID4gdGhpcy5vcHRpb25zLnRocmVzaG9sZCB8fCB0aGlzLnN0YXRlICYgU1RBVEVfQkVHQU4pO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24gZW1pdChpbnB1dCkge1xuICAgICAgaWYgKGlucHV0LnNjYWxlICE9PSAxKSB7XG4gICAgICAgIHZhciBpbk91dCA9IGlucHV0LnNjYWxlIDwgMSA/ICdpbicgOiAnb3V0JztcbiAgICAgICAgaW5wdXQuYWRkaXRpb25hbEV2ZW50ID0gdGhpcy5vcHRpb25zLmV2ZW50ICsgaW5PdXQ7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3N1cGVyLmVtaXQuY2FsbCh0aGlzLCBpbnB1dCk7XG4gICAgfVxuICB9KTtcbiAgLyoqXG4gICAqIFByZXNzXG4gICAqIFJlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBkb3duIGZvciB4IG1zIHdpdGhvdXQgYW55IG1vdmVtZW50LlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMgUmVjb2duaXplclxuICAgKi9cblxuICBmdW5jdGlvbiBQcmVzc1JlY29nbml6ZXIoKSB7XG4gICAgUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcbiAgICB0aGlzLl9pbnB1dCA9IG51bGw7XG4gIH1cblxuICBpbmhlcml0KFByZXNzUmVjb2duaXplciwgUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUHJlc3NSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgIGV2ZW50OiAncHJlc3MnLFxuICAgICAgcG9pbnRlcnM6IDEsXG4gICAgICB0aW1lOiAyNTEsXG4gICAgICAvLyBtaW5pbWFsIHRpbWUgb2YgdGhlIHBvaW50ZXIgdG8gYmUgcHJlc3NlZFxuICAgICAgdGhyZXNob2xkOiA5IC8vIGEgbWluaW1hbCBtb3ZlbWVudCBpcyBvaywgYnV0IGtlZXAgaXQgbG93XG5cbiAgICB9LFxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbiBnZXRUb3VjaEFjdGlvbigpIHtcbiAgICAgIHJldHVybiBbVE9VQ0hfQUNUSU9OX0FVVE9dO1xuICAgIH0sXG4gICAgcHJvY2VzczogZnVuY3Rpb24gcHJvY2VzcyhpbnB1dCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICB2YXIgdmFsaWRQb2ludGVycyA9IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA9PT0gb3B0aW9ucy5wb2ludGVycztcbiAgICAgIHZhciB2YWxpZE1vdmVtZW50ID0gaW5wdXQuZGlzdGFuY2UgPCBvcHRpb25zLnRocmVzaG9sZDtcbiAgICAgIHZhciB2YWxpZFRpbWUgPSBpbnB1dC5kZWx0YVRpbWUgPiBvcHRpb25zLnRpbWU7XG4gICAgICB0aGlzLl9pbnB1dCA9IGlucHV0OyAvLyB3ZSBvbmx5IGFsbG93IGxpdHRsZSBtb3ZlbWVudFxuICAgICAgLy8gYW5kIHdlJ3ZlIHJlYWNoZWQgYW4gZW5kIGV2ZW50LCBzbyBhIHRhcCBpcyBwb3NzaWJsZVxuXG4gICAgICBpZiAoIXZhbGlkTW92ZW1lbnQgfHwgIXZhbGlkUG9pbnRlcnMgfHwgaW5wdXQuZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkgJiYgIXZhbGlkVGltZSkge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICB9IGVsc2UgaWYgKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX1NUQVJUKSB7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0Q29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgICAgdGhpcy50cnlFbWl0KCk7XG4gICAgICAgIH0sIG9wdGlvbnMudGltZSwgdGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX0VORCkge1xuICAgICAgICByZXR1cm4gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbiBlbWl0KGlucHV0KSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gU1RBVEVfUkVDT0dOSVpFRCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnB1dCAmJiBpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9FTkQpIHtcbiAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50ICsgJ3VwJywgaW5wdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faW5wdXQudGltZVN0YW1wID0gbm93KCk7XG4gICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCwgdGhpcy5faW5wdXQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIC8qKlxuICAgKiBSb3RhdGVcbiAgICogUmVjb2duaXplZCB3aGVuIHR3byBvciBtb3JlIHBvaW50ZXIgYXJlIG1vdmluZyBpbiBhIGNpcmN1bGFyIG1vdGlvbi5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIEF0dHJSZWNvZ25pemVyXG4gICAqL1xuXG4gIGZ1bmN0aW9uIFJvdGF0ZVJlY29nbml6ZXIoKSB7XG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGluaGVyaXQoUm90YXRlUmVjb2duaXplciwgQXR0clJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFJvdGF0ZVJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgZXZlbnQ6ICdyb3RhdGUnLFxuICAgICAgdGhyZXNob2xkOiAwLFxuICAgICAgcG9pbnRlcnM6IDJcbiAgICB9LFxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbiBnZXRUb3VjaEFjdGlvbigpIHtcbiAgICAgIHJldHVybiBbVE9VQ0hfQUNUSU9OX05PTkVdO1xuICAgIH0sXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uIGF0dHJUZXN0KGlucHV0KSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3VwZXIuYXR0clRlc3QuY2FsbCh0aGlzLCBpbnB1dCkgJiYgKE1hdGguYWJzKGlucHV0LnJvdGF0aW9uKSA+IHRoaXMub3B0aW9ucy50aHJlc2hvbGQgfHwgdGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOKTtcbiAgICB9XG4gIH0pO1xuICAvKipcbiAgICogU3dpcGVcbiAgICogUmVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIG1vdmluZyBmYXN0ICh2ZWxvY2l0eSksIHdpdGggZW5vdWdoIGRpc3RhbmNlIGluIHRoZSBhbGxvd2VkIGRpcmVjdGlvbi5cbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBleHRlbmRzIEF0dHJSZWNvZ25pemVyXG4gICAqL1xuXG4gIGZ1bmN0aW9uIFN3aXBlUmVjb2duaXplcigpIHtcbiAgICBBdHRyUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgaW5oZXJpdChTd2lwZVJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBTd2lwZVJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgZXZlbnQ6ICdzd2lwZScsXG4gICAgICB0aHJlc2hvbGQ6IDEwLFxuICAgICAgdmVsb2NpdHk6IDAuMyxcbiAgICAgIGRpcmVjdGlvbjogRElSRUNUSU9OX0hPUklaT05UQUwgfCBESVJFQ1RJT05fVkVSVElDQUwsXG4gICAgICBwb2ludGVyczogMVxuICAgIH0sXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uIGdldFRvdWNoQWN0aW9uKCkge1xuICAgICAgcmV0dXJuIFBhblJlY29nbml6ZXIucHJvdG90eXBlLmdldFRvdWNoQWN0aW9uLmNhbGwodGhpcyk7XG4gICAgfSxcbiAgICBhdHRyVGVzdDogZnVuY3Rpb24gYXR0clRlc3QoaW5wdXQpIHtcbiAgICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uO1xuICAgICAgdmFyIHZlbG9jaXR5O1xuXG4gICAgICBpZiAoZGlyZWN0aW9uICYgKERJUkVDVElPTl9IT1JJWk9OVEFMIHwgRElSRUNUSU9OX1ZFUlRJQ0FMKSkge1xuICAgICAgICB2ZWxvY2l0eSA9IGlucHV0Lm92ZXJhbGxWZWxvY2l0eTtcbiAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHtcbiAgICAgICAgdmVsb2NpdHkgPSBpbnB1dC5vdmVyYWxsVmVsb2NpdHlYO1xuICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fVkVSVElDQUwpIHtcbiAgICAgICAgdmVsb2NpdHkgPSBpbnB1dC5vdmVyYWxsVmVsb2NpdHlZO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fc3VwZXIuYXR0clRlc3QuY2FsbCh0aGlzLCBpbnB1dCkgJiYgZGlyZWN0aW9uICYgaW5wdXQub2Zmc2V0RGlyZWN0aW9uICYmIGlucHV0LmRpc3RhbmNlID4gdGhpcy5vcHRpb25zLnRocmVzaG9sZCAmJiBpbnB1dC5tYXhQb2ludGVycyA9PSB0aGlzLm9wdGlvbnMucG9pbnRlcnMgJiYgYWJzKHZlbG9jaXR5KSA+IHRoaXMub3B0aW9ucy52ZWxvY2l0eSAmJiBpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9FTkQ7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbiBlbWl0KGlucHV0KSB7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gZGlyZWN0aW9uU3RyKGlucHV0Lm9mZnNldERpcmVjdGlvbik7XG5cbiAgICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50ICsgZGlyZWN0aW9uLCBpbnB1dCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCwgaW5wdXQpO1xuICAgIH1cbiAgfSk7XG4gIC8qKlxuICAgKiBBIHRhcCBpcyBlY29nbml6ZWQgd2hlbiB0aGUgcG9pbnRlciBpcyBkb2luZyBhIHNtYWxsIHRhcC9jbGljay4gTXVsdGlwbGUgdGFwcyBhcmUgcmVjb2duaXplZCBpZiB0aGV5IG9jY3VyXG4gICAqIGJldHdlZW4gdGhlIGdpdmVuIGludGVydmFsIGFuZCBwb3NpdGlvbi4gVGhlIGRlbGF5IG9wdGlvbiBjYW4gYmUgdXNlZCB0byByZWNvZ25pemUgbXVsdGktdGFwcyB3aXRob3V0IGZpcmluZ1xuICAgKiBhIHNpbmdsZSB0YXAuXG4gICAqXG4gICAqIFRoZSBldmVudERhdGEgZnJvbSB0aGUgZW1pdHRlZCBldmVudCBjb250YWlucyB0aGUgcHJvcGVydHkgYHRhcENvdW50YCwgd2hpY2ggY29udGFpbnMgdGhlIGFtb3VudCBvZlxuICAgKiBtdWx0aS10YXBzIGJlaW5nIHJlY29nbml6ZWQuXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyBSZWNvZ25pemVyXG4gICAqL1xuXG4gIGZ1bmN0aW9uIFRhcFJlY29nbml6ZXIoKSB7XG4gICAgUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyAvLyBwcmV2aW91cyB0aW1lIGFuZCBjZW50ZXIsXG4gICAgLy8gdXNlZCBmb3IgdGFwIGNvdW50aW5nXG5cbiAgICB0aGlzLnBUaW1lID0gZmFsc2U7XG4gICAgdGhpcy5wQ2VudGVyID0gZmFsc2U7XG4gICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgIHRoaXMuX2lucHV0ID0gbnVsbDtcbiAgICB0aGlzLmNvdW50ID0gMDtcbiAgfVxuXG4gIGluaGVyaXQoVGFwUmVjb2duaXplciwgUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUGluY2hSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgIGV2ZW50OiAndGFwJyxcbiAgICAgIHBvaW50ZXJzOiAxLFxuICAgICAgdGFwczogMSxcbiAgICAgIGludGVydmFsOiAzMDAsXG4gICAgICAvLyBtYXggdGltZSBiZXR3ZWVuIHRoZSBtdWx0aS10YXAgdGFwc1xuICAgICAgdGltZTogMjUwLFxuICAgICAgLy8gbWF4IHRpbWUgb2YgdGhlIHBvaW50ZXIgdG8gYmUgZG93biAobGlrZSBmaW5nZXIgb24gdGhlIHNjcmVlbilcbiAgICAgIHRocmVzaG9sZDogOSxcbiAgICAgIC8vIGEgbWluaW1hbCBtb3ZlbWVudCBpcyBvaywgYnV0IGtlZXAgaXQgbG93XG4gICAgICBwb3NUaHJlc2hvbGQ6IDEwIC8vIGEgbXVsdGktdGFwIGNhbiBiZSBhIGJpdCBvZmYgdGhlIGluaXRpYWwgcG9zaXRpb25cblxuICAgIH0sXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uIGdldFRvdWNoQWN0aW9uKCkge1xuICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OXTtcbiAgICB9LFxuICAgIHByb2Nlc3M6IGZ1bmN0aW9uIHByb2Nlc3MoaW5wdXQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgdmFyIHZhbGlkUG9pbnRlcnMgPSBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IG9wdGlvbnMucG9pbnRlcnM7XG4gICAgICB2YXIgdmFsaWRNb3ZlbWVudCA9IGlucHV0LmRpc3RhbmNlIDwgb3B0aW9ucy50aHJlc2hvbGQ7XG4gICAgICB2YXIgdmFsaWRUb3VjaFRpbWUgPSBpbnB1dC5kZWx0YVRpbWUgPCBvcHRpb25zLnRpbWU7XG4gICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgIGlmIChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiB0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZhaWxUaW1lb3V0KCk7XG4gICAgICB9IC8vIHdlIG9ubHkgYWxsb3cgbGl0dGxlIG1vdmVtZW50XG4gICAgICAvLyBhbmQgd2UndmUgcmVhY2hlZCBhbiBlbmQgZXZlbnQsIHNvIGEgdGFwIGlzIHBvc3NpYmxlXG5cblxuICAgICAgaWYgKHZhbGlkTW92ZW1lbnQgJiYgdmFsaWRUb3VjaFRpbWUgJiYgdmFsaWRQb2ludGVycykge1xuICAgICAgICBpZiAoaW5wdXQuZXZlbnRUeXBlICE9IElOUFVUX0VORCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZhaWxUaW1lb3V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmFsaWRJbnRlcnZhbCA9IHRoaXMucFRpbWUgPyBpbnB1dC50aW1lU3RhbXAgLSB0aGlzLnBUaW1lIDwgb3B0aW9ucy5pbnRlcnZhbCA6IHRydWU7XG4gICAgICAgIHZhciB2YWxpZE11bHRpVGFwID0gIXRoaXMucENlbnRlciB8fCBnZXREaXN0YW5jZSh0aGlzLnBDZW50ZXIsIGlucHV0LmNlbnRlcikgPCBvcHRpb25zLnBvc1RocmVzaG9sZDtcbiAgICAgICAgdGhpcy5wVGltZSA9IGlucHV0LnRpbWVTdGFtcDtcbiAgICAgICAgdGhpcy5wQ2VudGVyID0gaW5wdXQuY2VudGVyO1xuXG4gICAgICAgIGlmICghdmFsaWRNdWx0aVRhcCB8fCAhdmFsaWRJbnRlcnZhbCkge1xuICAgICAgICAgIHRoaXMuY291bnQgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY291bnQgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7IC8vIGlmIHRhcCBjb3VudCBtYXRjaGVzIHdlIGhhdmUgcmVjb2duaXplZCBpdCxcbiAgICAgICAgLy8gZWxzZSBpdCBoYXMgYmVnYW4gcmVjb2duaXppbmcuLi5cblxuICAgICAgICB2YXIgdGFwQ291bnQgPSB0aGlzLmNvdW50ICUgb3B0aW9ucy50YXBzO1xuXG4gICAgICAgIGlmICh0YXBDb3VudCA9PT0gMCkge1xuICAgICAgICAgIC8vIG5vIGZhaWxpbmcgcmVxdWlyZW1lbnRzLCBpbW1lZGlhdGVseSB0cmlnZ2VyIHRoZSB0YXAgZXZlbnRcbiAgICAgICAgICAvLyBvciB3YWl0IGFzIGxvbmcgYXMgdGhlIG11bHRpdGFwIGludGVydmFsIHRvIHRyaWdnZXJcbiAgICAgICAgICBpZiAoIXRoaXMuaGFzUmVxdWlyZUZhaWx1cmVzKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBTVEFURV9SRUNPR05JWkVEO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXRDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgICAgICAgIHRoaXMudHJ5RW1pdCgpO1xuICAgICAgICAgICAgfSwgb3B0aW9ucy5pbnRlcnZhbCwgdGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gU1RBVEVfQkVHQU47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XG4gICAgfSxcbiAgICBmYWlsVGltZW91dDogZnVuY3Rpb24gZmFpbFRpbWVvdXQoKSB7XG4gICAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXRDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0ZBSUxFRDtcbiAgICAgIH0sIHRoaXMub3B0aW9ucy5pbnRlcnZhbCwgdGhpcyk7XG4gICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTtcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uIGVtaXQoKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PSBTVEFURV9SRUNPR05JWkVEKSB7XG4gICAgICAgIHRoaXMuX2lucHV0LnRhcENvdW50ID0gdGhpcy5jb3VudDtcbiAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCB0aGlzLl9pbnB1dCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgLyoqXG4gICAqIFNpbXBsZSB3YXkgdG8gY3JlYXRlIGEgbWFuYWdlciB3aXRoIGEgZGVmYXVsdCBzZXQgb2YgcmVjb2duaXplcnMuXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG5cbiAgZnVuY3Rpb24gSGFtbWVyKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnJlY29nbml6ZXJzID0gaWZVbmRlZmluZWQob3B0aW9ucy5yZWNvZ25pemVycywgSGFtbWVyLmRlZmF1bHRzLnByZXNldCk7XG4gICAgcmV0dXJuIG5ldyBNYW5hZ2VyKGVsZW1lbnQsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBAY29uc3Qge3N0cmluZ31cbiAgICovXG5cblxuICBIYW1tZXIuVkVSU0lPTiA9ICcyLjAuNyc7XG4gIC8qKlxuICAgKiBkZWZhdWx0IHNldHRpbmdzXG4gICAqIEBuYW1lc3BhY2VcbiAgICovXG5cbiAgSGFtbWVyLmRlZmF1bHRzID0ge1xuICAgIC8qKlxuICAgICAqIHNldCBpZiBET00gZXZlbnRzIGFyZSBiZWluZyB0cmlnZ2VyZWQuXG4gICAgICogQnV0IHRoaXMgaXMgc2xvd2VyIGFuZCB1bnVzZWQgYnkgc2ltcGxlIGltcGxlbWVudGF0aW9ucywgc28gZGlzYWJsZWQgYnkgZGVmYXVsdC5cbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGRvbUV2ZW50czogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgZm9yIHRoZSB0b3VjaEFjdGlvbiBwcm9wZXJ0eS9mYWxsYmFjay5cbiAgICAgKiBXaGVuIHNldCB0byBgY29tcHV0ZWAgaXQgd2lsbCBtYWdpY2FsbHkgc2V0IHRoZSBjb3JyZWN0IHZhbHVlIGJhc2VkIG9uIHRoZSBhZGRlZCByZWNvZ25pemVycy5cbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBkZWZhdWx0IGNvbXB1dGVcbiAgICAgKi9cbiAgICB0b3VjaEFjdGlvbjogVE9VQ0hfQUNUSU9OX0NPTVBVVEUsXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgZW5hYmxlOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRVhQRVJJTUVOVEFMIEZFQVRVUkUgLS0gY2FuIGJlIHJlbW92ZWQvY2hhbmdlZFxuICAgICAqIENoYW5nZSB0aGUgcGFyZW50IGlucHV0IHRhcmdldCBlbGVtZW50LlxuICAgICAqIElmIE51bGwsIHRoZW4gaXQgaXMgYmVpbmcgc2V0IHRoZSB0byBtYWluIGVsZW1lbnQuXG4gICAgICogQHR5cGUge051bGx8RXZlbnRUYXJnZXR9XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIGlucHV0VGFyZ2V0OiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogZm9yY2UgYW4gaW5wdXQgY2xhc3NcbiAgICAgKiBAdHlwZSB7TnVsbHxGdW5jdGlvbn1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgaW5wdXRDbGFzczogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgcmVjb2duaXplciBzZXR1cCB3aGVuIGNhbGxpbmcgYEhhbW1lcigpYFxuICAgICAqIFdoZW4gY3JlYXRpbmcgYSBuZXcgTWFuYWdlciB0aGVzZSB3aWxsIGJlIHNraXBwZWQuXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIHByZXNldDogWy8vIFJlY29nbml6ZXJDbGFzcywgb3B0aW9ucywgW3JlY29nbml6ZVdpdGgsIC4uLl0sIFtyZXF1aXJlRmFpbHVyZSwgLi4uXVxuICAgIFtSb3RhdGVSZWNvZ25pemVyLCB7XG4gICAgICBlbmFibGU6IGZhbHNlXG4gICAgfV0sIFtQaW5jaFJlY29nbml6ZXIsIHtcbiAgICAgIGVuYWJsZTogZmFsc2VcbiAgICB9LCBbJ3JvdGF0ZSddXSwgW1N3aXBlUmVjb2duaXplciwge1xuICAgICAgZGlyZWN0aW9uOiBESVJFQ1RJT05fSE9SSVpPTlRBTFxuICAgIH1dLCBbUGFuUmVjb2duaXplciwge1xuICAgICAgZGlyZWN0aW9uOiBESVJFQ1RJT05fSE9SSVpPTlRBTFxuICAgIH0sIFsnc3dpcGUnXV0sIFtUYXBSZWNvZ25pemVyXSwgW1RhcFJlY29nbml6ZXIsIHtcbiAgICAgIGV2ZW50OiAnZG91YmxldGFwJyxcbiAgICAgIHRhcHM6IDJcbiAgICB9LCBbJ3RhcCddXSwgW1ByZXNzUmVjb2duaXplcl1dLFxuXG4gICAgLyoqXG4gICAgICogU29tZSBDU1MgcHJvcGVydGllcyBjYW4gYmUgdXNlZCB0byBpbXByb3ZlIHRoZSB3b3JraW5nIG9mIEhhbW1lci5cbiAgICAgKiBBZGQgdGhlbSB0byB0aGlzIG1ldGhvZCBhbmQgdGhleSB3aWxsIGJlIHNldCB3aGVuIGNyZWF0aW5nIGEgbmV3IE1hbmFnZXIuXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqL1xuICAgIGNzc1Byb3BzOiB7XG4gICAgICAvKipcbiAgICAgICAqIERpc2FibGVzIHRleHQgc2VsZWN0aW9uIHRvIGltcHJvdmUgdGhlIGRyYWdnaW5nIGdlc3R1cmUuIE1haW5seSBmb3IgZGVza3RvcCBicm93c2Vycy5cbiAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAqL1xuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuXG4gICAgICAvKipcbiAgICAgICAqIERpc2FibGUgdGhlIFdpbmRvd3MgUGhvbmUgZ3JpcHBlcnMgd2hlbiBwcmVzc2luZyBhbiBlbGVtZW50LlxuICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICovXG4gICAgICB0b3VjaFNlbGVjdDogJ25vbmUnLFxuXG4gICAgICAvKipcbiAgICAgICAqIERpc2FibGVzIHRoZSBkZWZhdWx0IGNhbGxvdXQgc2hvd24gd2hlbiB5b3UgdG91Y2ggYW5kIGhvbGQgYSB0b3VjaCB0YXJnZXQuXG4gICAgICAgKiBPbiBpT1MsIHdoZW4geW91IHRvdWNoIGFuZCBob2xkIGEgdG91Y2ggdGFyZ2V0IHN1Y2ggYXMgYSBsaW5rLCBTYWZhcmkgZGlzcGxheXNcbiAgICAgICAqIGEgY2FsbG91dCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsaW5rLiBUaGlzIHByb3BlcnR5IGFsbG93cyB5b3UgdG8gZGlzYWJsZSB0aGF0IGNhbGxvdXQuXG4gICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgKi9cbiAgICAgIHRvdWNoQ2FsbG91dDogJ25vbmUnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIHpvb21pbmcgaXMgZW5hYmxlZC4gVXNlZCBieSBJRTEwPlxuICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICovXG4gICAgICBjb250ZW50Wm9vbWluZzogJ25vbmUnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFNwZWNpZmllcyB0aGF0IGFuIGVudGlyZSBlbGVtZW50IHNob3VsZCBiZSBkcmFnZ2FibGUgaW5zdGVhZCBvZiBpdHMgY29udGVudHMuIE1haW5seSBmb3IgZGVza3RvcCBicm93c2Vycy5cbiAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAqL1xuICAgICAgdXNlckRyYWc6ICdub25lJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBPdmVycmlkZXMgdGhlIGhpZ2hsaWdodCBjb2xvciBzaG93biB3aGVuIHRoZSB1c2VyIHRhcHMgYSBsaW5rIG9yIGEgSmF2YVNjcmlwdFxuICAgICAgICogY2xpY2thYmxlIGVsZW1lbnQgaW4gaU9TLiBUaGlzIHByb3BlcnR5IG9iZXlzIHRoZSBhbHBoYSB2YWx1ZSwgaWYgc3BlY2lmaWVkLlxuICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAqIEBkZWZhdWx0ICdyZ2JhKDAsMCwwLDApJ1xuICAgICAgICovXG4gICAgICB0YXBIaWdobGlnaHRDb2xvcjogJ3JnYmEoMCwwLDAsMCknXG4gICAgfVxuICB9O1xuICB2YXIgU1RPUCA9IDE7XG4gIHZhciBGT1JDRURfU1RPUCA9IDI7XG4gIC8qKlxuICAgKiBNYW5hZ2VyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG5cbiAgZnVuY3Rpb24gTWFuYWdlcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gYXNzaWduKHt9LCBIYW1tZXIuZGVmYXVsdHMsIG9wdGlvbnMgfHwge30pO1xuICAgIHRoaXMub3B0aW9ucy5pbnB1dFRhcmdldCA9IHRoaXMub3B0aW9ucy5pbnB1dFRhcmdldCB8fCBlbGVtZW50O1xuICAgIHRoaXMuaGFuZGxlcnMgPSB7fTtcbiAgICB0aGlzLnNlc3Npb24gPSB7fTtcbiAgICB0aGlzLnJlY29nbml6ZXJzID0gW107XG4gICAgdGhpcy5vbGRDc3NQcm9wcyA9IHt9O1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5pbnB1dCA9IGNyZWF0ZUlucHV0SW5zdGFuY2UodGhpcyk7XG4gICAgdGhpcy50b3VjaEFjdGlvbiA9IG5ldyBUb3VjaEFjdGlvbih0aGlzLCB0aGlzLm9wdGlvbnMudG91Y2hBY3Rpb24pO1xuICAgIHRvZ2dsZUNzc1Byb3BzKHRoaXMsIHRydWUpO1xuICAgIGVhY2godGhpcy5vcHRpb25zLnJlY29nbml6ZXJzLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIHJlY29nbml6ZXIgPSB0aGlzLmFkZChuZXcgaXRlbVswXShpdGVtWzFdKSk7XG4gICAgICBpdGVtWzJdICYmIHJlY29nbml6ZXIucmVjb2duaXplV2l0aChpdGVtWzJdKTtcbiAgICAgIGl0ZW1bM10gJiYgcmVjb2duaXplci5yZXF1aXJlRmFpbHVyZShpdGVtWzNdKTtcbiAgICB9LCB0aGlzKTtcbiAgfVxuXG4gIE1hbmFnZXIucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIHNldCBvcHRpb25zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7TWFuYWdlcn1cbiAgICAgKi9cbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChvcHRpb25zKSB7XG4gICAgICBhc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTsgLy8gT3B0aW9ucyB0aGF0IG5lZWQgYSBsaXR0bGUgbW9yZSBzZXR1cFxuXG4gICAgICBpZiAob3B0aW9ucy50b3VjaEFjdGlvbikge1xuICAgICAgICB0aGlzLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5pbnB1dFRhcmdldCkge1xuICAgICAgICAvLyBDbGVhbiB1cCBleGlzdGluZyBldmVudCBsaXN0ZW5lcnMgYW5kIHJlaW5pdGlhbGl6ZVxuICAgICAgICB0aGlzLmlucHV0LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5pbnB1dC50YXJnZXQgPSBvcHRpb25zLmlucHV0VGFyZ2V0O1xuICAgICAgICB0aGlzLmlucHV0LmluaXQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHN0b3AgcmVjb2duaXppbmcgZm9yIHRoaXMgc2Vzc2lvbi5cbiAgICAgKiBUaGlzIHNlc3Npb24gd2lsbCBiZSBkaXNjYXJkZWQsIHdoZW4gYSBuZXcgW2lucHV0XXN0YXJ0IGV2ZW50IGlzIGZpcmVkLlxuICAgICAqIFdoZW4gZm9yY2VkLCB0aGUgcmVjb2duaXplciBjeWNsZSBpcyBzdG9wcGVkIGltbWVkaWF0ZWx5LlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ZvcmNlXVxuICAgICAqL1xuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoZm9yY2UpIHtcbiAgICAgIHRoaXMuc2Vzc2lvbi5zdG9wcGVkID0gZm9yY2UgPyBGT1JDRURfU1RPUCA6IFNUT1A7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJ1biB0aGUgcmVjb2duaXplcnMhXG4gICAgICogY2FsbGVkIGJ5IHRoZSBpbnB1dEhhbmRsZXIgZnVuY3Rpb24gb24gZXZlcnkgbW92ZW1lbnQgb2YgdGhlIHBvaW50ZXJzICh0b3VjaGVzKVxuICAgICAqIGl0IHdhbGtzIHRocm91Z2ggYWxsIHRoZSByZWNvZ25pemVycyBhbmQgdHJpZXMgdG8gZGV0ZWN0IHRoZSBnZXN0dXJlIHRoYXQgaXMgYmVpbmcgbWFkZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGFcbiAgICAgKi9cbiAgICByZWNvZ25pemU6IGZ1bmN0aW9uIHJlY29nbml6ZShpbnB1dERhdGEpIHtcbiAgICAgIHZhciBzZXNzaW9uID0gdGhpcy5zZXNzaW9uO1xuXG4gICAgICBpZiAoc2Vzc2lvbi5zdG9wcGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gcnVuIHRoZSB0b3VjaC1hY3Rpb24gcG9seWZpbGxcblxuXG4gICAgICB0aGlzLnRvdWNoQWN0aW9uLnByZXZlbnREZWZhdWx0cyhpbnB1dERhdGEpO1xuICAgICAgdmFyIHJlY29nbml6ZXI7XG4gICAgICB2YXIgcmVjb2duaXplcnMgPSB0aGlzLnJlY29nbml6ZXJzOyAvLyB0aGlzIGhvbGRzIHRoZSByZWNvZ25pemVyIHRoYXQgaXMgYmVpbmcgcmVjb2duaXplZC5cbiAgICAgIC8vIHNvIHRoZSByZWNvZ25pemVyJ3Mgc3RhdGUgbmVlZHMgdG8gYmUgQkVHQU4sIENIQU5HRUQsIEVOREVEIG9yIFJFQ09HTklaRURcbiAgICAgIC8vIGlmIG5vIHJlY29nbml6ZXIgaXMgZGV0ZWN0aW5nIGEgdGhpbmcsIGl0IGlzIHNldCB0byBgbnVsbGBcblxuICAgICAgdmFyIGN1clJlY29nbml6ZXIgPSBzZXNzaW9uLmN1clJlY29nbml6ZXI7IC8vIHJlc2V0IHdoZW4gdGhlIGxhc3QgcmVjb2duaXplciBpcyByZWNvZ25pemVkXG4gICAgICAvLyBvciB3aGVuIHdlJ3JlIGluIGEgbmV3IHNlc3Npb25cblxuICAgICAgaWYgKCFjdXJSZWNvZ25pemVyIHx8IGN1clJlY29nbml6ZXIgJiYgY3VyUmVjb2duaXplci5zdGF0ZSAmIFNUQVRFX1JFQ09HTklaRUQpIHtcbiAgICAgICAgY3VyUmVjb2duaXplciA9IHNlc3Npb24uY3VyUmVjb2duaXplciA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgd2hpbGUgKGkgPCByZWNvZ25pemVycy5sZW5ndGgpIHtcbiAgICAgICAgcmVjb2duaXplciA9IHJlY29nbml6ZXJzW2ldOyAvLyBmaW5kIG91dCBpZiB3ZSBhcmUgYWxsb3dlZCB0cnkgdG8gcmVjb2duaXplIHRoZSBpbnB1dCBmb3IgdGhpcyBvbmUuXG4gICAgICAgIC8vIDEuICAgYWxsb3cgaWYgdGhlIHNlc3Npb24gaXMgTk9UIGZvcmNlZCBzdG9wcGVkIChzZWUgdGhlIC5zdG9wKCkgbWV0aG9kKVxuICAgICAgICAvLyAyLiAgIGFsbG93IGlmIHdlIHN0aWxsIGhhdmVuJ3QgcmVjb2duaXplZCBhIGdlc3R1cmUgaW4gdGhpcyBzZXNzaW9uLCBvciB0aGUgdGhpcyByZWNvZ25pemVyIGlzIHRoZSBvbmVcbiAgICAgICAgLy8gICAgICB0aGF0IGlzIGJlaW5nIHJlY29nbml6ZWQuXG4gICAgICAgIC8vIDMuICAgYWxsb3cgaWYgdGhlIHJlY29nbml6ZXIgaXMgYWxsb3dlZCB0byBydW4gc2ltdWx0YW5lb3VzIHdpdGggdGhlIGN1cnJlbnQgcmVjb2duaXplZCByZWNvZ25pemVyLlxuICAgICAgICAvLyAgICAgIHRoaXMgY2FuIGJlIHNldHVwIHdpdGggdGhlIGByZWNvZ25pemVXaXRoKClgIG1ldGhvZCBvbiB0aGUgcmVjb2duaXplci5cblxuICAgICAgICBpZiAoc2Vzc2lvbi5zdG9wcGVkICE9PSBGT1JDRURfU1RPUCAmJiAoIC8vIDFcbiAgICAgICAgIWN1clJlY29nbml6ZXIgfHwgcmVjb2duaXplciA9PSBjdXJSZWNvZ25pemVyIHx8IC8vIDJcbiAgICAgICAgcmVjb2duaXplci5jYW5SZWNvZ25pemVXaXRoKGN1clJlY29nbml6ZXIpKSkge1xuICAgICAgICAgIC8vIDNcbiAgICAgICAgICByZWNvZ25pemVyLnJlY29nbml6ZShpbnB1dERhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlY29nbml6ZXIucmVzZXQoKTtcbiAgICAgICAgfSAvLyBpZiB0aGUgcmVjb2duaXplciBoYXMgYmVlbiByZWNvZ25pemluZyB0aGUgaW5wdXQgYXMgYSB2YWxpZCBnZXN0dXJlLCB3ZSB3YW50IHRvIHN0b3JlIHRoaXMgb25lIGFzIHRoZVxuICAgICAgICAvLyBjdXJyZW50IGFjdGl2ZSByZWNvZ25pemVyLiBidXQgb25seSBpZiB3ZSBkb24ndCBhbHJlYWR5IGhhdmUgYW4gYWN0aXZlIHJlY29nbml6ZXJcblxuXG4gICAgICAgIGlmICghY3VyUmVjb2duaXplciAmJiByZWNvZ25pemVyLnN0YXRlICYgKFNUQVRFX0JFR0FOIHwgU1RBVEVfQ0hBTkdFRCB8IFNUQVRFX0VOREVEKSkge1xuICAgICAgICAgIGN1clJlY29nbml6ZXIgPSBzZXNzaW9uLmN1clJlY29nbml6ZXIgPSByZWNvZ25pemVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBnZXQgYSByZWNvZ25pemVyIGJ5IGl0cyBldmVudCBuYW1lLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcnxTdHJpbmd9IHJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcnxOdWxsfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KHJlY29nbml6ZXIpIHtcbiAgICAgIGlmIChyZWNvZ25pemVyIGluc3RhbmNlb2YgUmVjb2duaXplcikge1xuICAgICAgICByZXR1cm4gcmVjb2duaXplcjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVycztcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWNvZ25pemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocmVjb2duaXplcnNbaV0ub3B0aW9ucy5ldmVudCA9PSByZWNvZ25pemVyKSB7XG4gICAgICAgICAgcmV0dXJuIHJlY29nbml6ZXJzW2ldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBhZGQgYSByZWNvZ25pemVyIHRvIHRoZSBtYW5hZ2VyXG4gICAgICogZXhpc3RpbmcgcmVjb2duaXplcnMgd2l0aCB0aGUgc2FtZSBldmVudCBuYW1lIHdpbGwgYmUgcmVtb3ZlZFxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gcmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfE1hbmFnZXJ9XG4gICAgICovXG4gICAgYWRkOiBmdW5jdGlvbiBhZGQocmVjb2duaXplcikge1xuICAgICAgaWYgKGludm9rZUFycmF5QXJnKHJlY29nbml6ZXIsICdhZGQnLCB0aGlzKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gLy8gcmVtb3ZlIGV4aXN0aW5nXG5cblxuICAgICAgdmFyIGV4aXN0aW5nID0gdGhpcy5nZXQocmVjb2duaXplci5vcHRpb25zLmV2ZW50KTtcblxuICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKGV4aXN0aW5nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZWNvZ25pemVycy5wdXNoKHJlY29nbml6ZXIpO1xuICAgICAgcmVjb2duaXplci5tYW5hZ2VyID0gdGhpcztcbiAgICAgIHRoaXMudG91Y2hBY3Rpb24udXBkYXRlKCk7XG4gICAgICByZXR1cm4gcmVjb2duaXplcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVtb3ZlIGEgcmVjb2duaXplciBieSBuYW1lIG9yIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfFN0cmluZ30gcmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtNYW5hZ2VyfVxuICAgICAqL1xuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKHJlY29nbml6ZXIpIHtcbiAgICAgIGlmIChpbnZva2VBcnJheUFyZyhyZWNvZ25pemVyLCAncmVtb3ZlJywgdGhpcykpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJlY29nbml6ZXIgPSB0aGlzLmdldChyZWNvZ25pemVyKTsgLy8gbGV0J3MgbWFrZSBzdXJlIHRoaXMgcmVjb2duaXplciBleGlzdHNcblxuICAgICAgaWYgKHJlY29nbml6ZXIpIHtcbiAgICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVycztcbiAgICAgICAgdmFyIGluZGV4ID0gaW5BcnJheShyZWNvZ25pemVycywgcmVjb2duaXplcik7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHJlY29nbml6ZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgdGhpcy50b3VjaEFjdGlvbi51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogYmluZCBldmVudFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gICAgICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gdGhpc1xuICAgICAqL1xuICAgIG9uOiBmdW5jdGlvbiBvbihldmVudHMsIGhhbmRsZXIpIHtcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzO1xuICAgICAgZWFjaChzcGxpdFN0cihldmVudHMpLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaGFuZGxlcnNbZXZlbnRdID0gaGFuZGxlcnNbZXZlbnRdIHx8IFtdO1xuICAgICAgICBoYW5kbGVyc1tldmVudF0ucHVzaChoYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVuYmluZCBldmVudCwgbGVhdmUgZW1pdCBibGFuayB0byByZW1vdmUgYWxsIGhhbmRsZXJzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50c1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtoYW5kbGVyXVxuICAgICAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihldmVudHMsIGhhbmRsZXIpIHtcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnM7XG4gICAgICBlYWNoKHNwbGl0U3RyKGV2ZW50cyksIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgICAgICBkZWxldGUgaGFuZGxlcnNbZXZlbnRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhhbmRsZXJzW2V2ZW50XSAmJiBoYW5kbGVyc1tldmVudF0uc3BsaWNlKGluQXJyYXkoaGFuZGxlcnNbZXZlbnRdLCBoYW5kbGVyKSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGVtaXQgZXZlbnQgdG8gdGhlIGxpc3RlbmVyc1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgZW1pdDogZnVuY3Rpb24gZW1pdChldmVudCwgZGF0YSkge1xuICAgICAgLy8gd2UgYWxzbyB3YW50IHRvIHRyaWdnZXIgZG9tIGV2ZW50c1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kb21FdmVudHMpIHtcbiAgICAgICAgdHJpZ2dlckRvbUV2ZW50KGV2ZW50LCBkYXRhKTtcbiAgICAgIH0gLy8gbm8gaGFuZGxlcnMsIHNvIHNraXAgaXQgYWxsXG5cblxuICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc1tldmVudF0gJiYgdGhpcy5oYW5kbGVyc1tldmVudF0uc2xpY2UoKTtcblxuICAgICAgaWYgKCFoYW5kbGVycyB8fCAhaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGF0YS50eXBlID0gZXZlbnQ7XG5cbiAgICAgIGRhdGEucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRhdGEuc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgd2hpbGUgKGkgPCBoYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgICAgaGFuZGxlcnNbaV0oZGF0YSk7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZGVzdHJveSB0aGUgbWFuYWdlciBhbmQgdW5iaW5kcyBhbGwgZXZlbnRzXG4gICAgICogaXQgZG9lc24ndCB1bmJpbmQgZG9tIGV2ZW50cywgdGhhdCBpcyB0aGUgdXNlciBvd24gcmVzcG9uc2liaWxpdHlcbiAgICAgKi9cbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5lbGVtZW50ICYmIHRvZ2dsZUNzc1Byb3BzKHRoaXMsIGZhbHNlKTtcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSB7fTtcbiAgICAgIHRoaXMuc2Vzc2lvbiA9IHt9O1xuICAgICAgdGhpcy5pbnB1dC5kZXN0cm95KCk7XG4gICAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIGFkZC9yZW1vdmUgdGhlIGNzcyBwcm9wZXJ0aWVzIGFzIGRlZmluZWQgaW4gbWFuYWdlci5vcHRpb25zLmNzc1Byb3BzXG4gICAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGFkZFxuICAgKi9cblxuICBmdW5jdGlvbiB0b2dnbGVDc3NQcm9wcyhtYW5hZ2VyLCBhZGQpIHtcbiAgICB2YXIgZWxlbWVudCA9IG1hbmFnZXIuZWxlbWVudDtcblxuICAgIGlmICghZWxlbWVudC5zdHlsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwcm9wO1xuICAgIGVhY2gobWFuYWdlci5vcHRpb25zLmNzc1Byb3BzLCBmdW5jdGlvbiAodmFsdWUsIG5hbWUpIHtcbiAgICAgIHByb3AgPSBwcmVmaXhlZChlbGVtZW50LnN0eWxlLCBuYW1lKTtcblxuICAgICAgaWYgKGFkZCkge1xuICAgICAgICBtYW5hZ2VyLm9sZENzc1Byb3BzW3Byb3BdID0gZWxlbWVudC5zdHlsZVtwcm9wXTtcbiAgICAgICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IG1hbmFnZXIub2xkQ3NzUHJvcHNbcHJvcF0gfHwgJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIWFkZCkge1xuICAgICAgbWFuYWdlci5vbGRDc3NQcm9wcyA9IHt9O1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogdHJpZ2dlciBkb20gZXZlbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gdHJpZ2dlckRvbUV2ZW50KGV2ZW50LCBkYXRhKSB7XG4gICAgdmFyIGdlc3R1cmVFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGdlc3R1cmVFdmVudC5pbml0RXZlbnQoZXZlbnQsIHRydWUsIHRydWUpO1xuICAgIGdlc3R1cmVFdmVudC5nZXN0dXJlID0gZGF0YTtcbiAgICBkYXRhLnRhcmdldC5kaXNwYXRjaEV2ZW50KGdlc3R1cmVFdmVudCk7XG4gIH1cblxuICBhc3NpZ24oSGFtbWVyLCB7XG4gICAgSU5QVVRfU1RBUlQ6IElOUFVUX1NUQVJULFxuICAgIElOUFVUX01PVkU6IElOUFVUX01PVkUsXG4gICAgSU5QVVRfRU5EOiBJTlBVVF9FTkQsXG4gICAgSU5QVVRfQ0FOQ0VMOiBJTlBVVF9DQU5DRUwsXG4gICAgU1RBVEVfUE9TU0lCTEU6IFNUQVRFX1BPU1NJQkxFLFxuICAgIFNUQVRFX0JFR0FOOiBTVEFURV9CRUdBTixcbiAgICBTVEFURV9DSEFOR0VEOiBTVEFURV9DSEFOR0VELFxuICAgIFNUQVRFX0VOREVEOiBTVEFURV9FTkRFRCxcbiAgICBTVEFURV9SRUNPR05JWkVEOiBTVEFURV9SRUNPR05JWkVELFxuICAgIFNUQVRFX0NBTkNFTExFRDogU1RBVEVfQ0FOQ0VMTEVELFxuICAgIFNUQVRFX0ZBSUxFRDogU1RBVEVfRkFJTEVELFxuICAgIERJUkVDVElPTl9OT05FOiBESVJFQ1RJT05fTk9ORSxcbiAgICBESVJFQ1RJT05fTEVGVDogRElSRUNUSU9OX0xFRlQsXG4gICAgRElSRUNUSU9OX1JJR0hUOiBESVJFQ1RJT05fUklHSFQsXG4gICAgRElSRUNUSU9OX1VQOiBESVJFQ1RJT05fVVAsXG4gICAgRElSRUNUSU9OX0RPV046IERJUkVDVElPTl9ET1dOLFxuICAgIERJUkVDVElPTl9IT1JJWk9OVEFMOiBESVJFQ1RJT05fSE9SSVpPTlRBTCxcbiAgICBESVJFQ1RJT05fVkVSVElDQUw6IERJUkVDVElPTl9WRVJUSUNBTCxcbiAgICBESVJFQ1RJT05fQUxMOiBESVJFQ1RJT05fQUxMLFxuICAgIE1hbmFnZXI6IE1hbmFnZXIsXG4gICAgSW5wdXQ6IElucHV0LFxuICAgIFRvdWNoQWN0aW9uOiBUb3VjaEFjdGlvbixcbiAgICBUb3VjaElucHV0OiBUb3VjaElucHV0LFxuICAgIE1vdXNlSW5wdXQ6IE1vdXNlSW5wdXQsXG4gICAgUG9pbnRlckV2ZW50SW5wdXQ6IFBvaW50ZXJFdmVudElucHV0LFxuICAgIFRvdWNoTW91c2VJbnB1dDogVG91Y2hNb3VzZUlucHV0LFxuICAgIFNpbmdsZVRvdWNoSW5wdXQ6IFNpbmdsZVRvdWNoSW5wdXQsXG4gICAgUmVjb2duaXplcjogUmVjb2duaXplcixcbiAgICBBdHRyUmVjb2duaXplcjogQXR0clJlY29nbml6ZXIsXG4gICAgVGFwOiBUYXBSZWNvZ25pemVyLFxuICAgIFBhbjogUGFuUmVjb2duaXplcixcbiAgICBTd2lwZTogU3dpcGVSZWNvZ25pemVyLFxuICAgIFBpbmNoOiBQaW5jaFJlY29nbml6ZXIsXG4gICAgUm90YXRlOiBSb3RhdGVSZWNvZ25pemVyLFxuICAgIFByZXNzOiBQcmVzc1JlY29nbml6ZXIsXG4gICAgb246IGFkZEV2ZW50TGlzdGVuZXJzLFxuICAgIG9mZjogcmVtb3ZlRXZlbnRMaXN0ZW5lcnMsXG4gICAgZWFjaDogZWFjaCxcbiAgICBtZXJnZTogbWVyZ2UsXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgYXNzaWduOiBhc3NpZ24sXG4gICAgaW5oZXJpdDogaW5oZXJpdCxcbiAgICBiaW5kRm46IGJpbmRGbixcbiAgICBwcmVmaXhlZDogcHJlZml4ZWRcbiAgfSk7XG4gIHZhciBoYW1tZXIgPSBIYW1tZXI7XG5cbiAgdmFyIG1pY3JvZXZlbnQgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG4gIC8qKlxuICAgKiBNaWNyb0V2ZW50IC0gdG8gbWFrZSBhbnkganMgb2JqZWN0IGFuIGV2ZW50IGVtaXR0ZXIgKHNlcnZlciBvciBicm93c2VyKVxuICAgKiBcbiAgICogLSBwdXJlIGphdmFzY3JpcHQgLSBzZXJ2ZXIgY29tcGF0aWJsZSwgYnJvd3NlciBjb21wYXRpYmxlXG4gICAqIC0gZG9udCByZWx5IG9uIHRoZSBicm93c2VyIGRvbXNcbiAgICogLSBzdXBlciBzaW1wbGUgLSB5b3UgZ2V0IGl0IGltbWVkaWF0bHksIG5vIG1pc3RlcnksIG5vIG1hZ2ljIGludm9sdmVkXG4gICAqXG4gICAqIC0gY3JlYXRlIGEgTWljcm9FdmVudERlYnVnIHdpdGggZ29vZGllcyB0byBkZWJ1Z1xuICAgKiAgIC0gbWFrZSBpdCBzYWZlciB0byB1c2VcbiAgKi9cblxuICB2YXIgTWljcm9FdmVudFx0PSBmdW5jdGlvbigpe307XG4gIE1pY3JvRXZlbnQucHJvdG90eXBlXHQ9IHtcbiAgXHRiaW5kXHQ6IGZ1bmN0aW9uKGV2ZW50LCBmY3Qpe1xuICBcdFx0dGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICBcdFx0dGhpcy5fZXZlbnRzW2V2ZW50XSA9IHRoaXMuX2V2ZW50c1tldmVudF1cdHx8IFtdO1xuICBcdFx0dGhpcy5fZXZlbnRzW2V2ZW50XS5wdXNoKGZjdCk7XG4gIFx0fSxcbiAgXHR1bmJpbmRcdDogZnVuY3Rpb24oZXZlbnQsIGZjdCl7XG4gIFx0XHR0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIFx0XHRpZiggZXZlbnQgaW4gdGhpcy5fZXZlbnRzID09PSBmYWxzZSAgKVx0cmV0dXJuO1xuICBcdFx0dGhpcy5fZXZlbnRzW2V2ZW50XS5zcGxpY2UodGhpcy5fZXZlbnRzW2V2ZW50XS5pbmRleE9mKGZjdCksIDEpO1xuICBcdH0sXG4gIFx0dHJpZ2dlclx0OiBmdW5jdGlvbihldmVudCAvKiAsIGFyZ3MuLi4gKi8pe1xuICBcdFx0dGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICBcdFx0aWYoIGV2ZW50IGluIHRoaXMuX2V2ZW50cyA9PT0gZmFsc2UgIClcdHJldHVybjtcbiAgXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLl9ldmVudHNbZXZlbnRdLmxlbmd0aDsgaSsrKXtcbiAgXHRcdFx0dGhpcy5fZXZlbnRzW2V2ZW50XVtpXS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgXHRcdH1cbiAgXHR9XG4gIH07XG5cbiAgLyoqXG4gICAqIG1peGluIHdpbGwgZGVsZWdhdGUgYWxsIE1pY3JvRXZlbnQuanMgZnVuY3Rpb24gaW4gdGhlIGRlc3RpbmF0aW9uIG9iamVjdFxuICAgKlxuICAgKiAtIHJlcXVpcmUoJ01pY3JvRXZlbnQnKS5taXhpbihGb29iYXIpIHdpbGwgbWFrZSBGb29iYXIgYWJsZSB0byB1c2UgTWljcm9FdmVudFxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gdGhlIG9iamVjdCB3aGljaCB3aWxsIHN1cHBvcnQgTWljcm9FdmVudFxuICAqL1xuICBNaWNyb0V2ZW50Lm1peGluXHQ9IGZ1bmN0aW9uKGRlc3RPYmplY3Qpe1xuICBcdHZhciBwcm9wc1x0PSBbJ2JpbmQnLCAndW5iaW5kJywgJ3RyaWdnZXInXTtcbiAgXHRmb3IodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpICsrKXtcbiAgXHRcdGRlc3RPYmplY3QucHJvdG90eXBlW3Byb3BzW2ldXVx0PSBNaWNyb0V2ZW50LnByb3RvdHlwZVtwcm9wc1tpXV07XG4gIFx0fVxuICB9O1xuXG4gIC8vIGV4cG9ydCBpbiBjb21tb24ganNcbiAgaWYoICdleHBvcnRzJyBpbiBtb2R1bGUpe1xuICBcdG1vZHVsZS5leHBvcnRzXHQ9IE1pY3JvRXZlbnQ7XG4gIH1cbiAgfSk7XG5cbiAgdmFyIFBhZ2VTcHJlYWQ7XG5cbiAgdmFyIHBhZ2Vfc3ByZWFkID0gUGFnZVNwcmVhZCA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhZ2VTcHJlYWQoZWwpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2VTcHJlYWQpO1xuXG4gICAgICB0aGlzLmVsID0gZWw7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgdGhpcy52aXNpYmlsaXR5ID0gJ2dvbmUnO1xuICAgICAgdGhpcy5wb3NpdGlvbmVkID0gZmFsc2U7XG4gICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5pZCA9IHRoaXMub3B0aW9ucy5pZDtcbiAgICAgIHRoaXMudHlwZSA9IHRoaXMub3B0aW9ucy50eXBlO1xuICAgICAgdGhpcy5wYWdlSWRzID0gdGhpcy5vcHRpb25zLnBhZ2VJZHM7XG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5vcHRpb25zLndpZHRoO1xuICAgICAgdGhpcy5sZWZ0ID0gdGhpcy5vcHRpb25zLmxlZnQ7XG4gICAgICB0aGlzLm1heFpvb21TY2FsZSA9IHRoaXMub3B0aW9ucy5tYXhab29tU2NhbGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFBhZ2VTcHJlYWQsIFt7XG4gICAgICBrZXk6IFwiaXNab29tYWJsZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzWm9vbWFibGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE1heFpvb21TY2FsZSgpID4gMSAmJiB0aGlzLmdldEVsKCkuZ2V0QXR0cmlidXRlKCdkYXRhLXpvb21hYmxlJykgIT09ICdmYWxzZSc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImlzU2Nyb2xsYWJsZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzU2Nyb2xsYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWwoKS5jbGFzc0xpc3QuY29udGFpbnMoJ3ZlcnNvLS1zY3JvbGxhYmxlJyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEVsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRPdmVybGF5RWxzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3ZlcmxheUVscygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWwoKS5xdWVyeVNlbGVjdG9yQWxsKCcudmVyc29fX292ZXJsYXknKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0UGFnZUVsc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBhZ2VFbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEVsKCkucXVlcnlTZWxlY3RvckFsbCgnLnZlcnNvX19wYWdlJyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFJlY3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRFbCgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRDb250ZW50UmVjdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbnRlbnRSZWN0KCkge1xuICAgICAgICB2YXIgaSwgbGVuLCBwYWdlRWwsIHBhZ2VSZWN0LCByZWN0LCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJlZjQ7XG4gICAgICAgIHJlY3QgPSB7XG4gICAgICAgICAgdG9wOiBudWxsLFxuICAgICAgICAgIGxlZnQ6IG51bGwsXG4gICAgICAgICAgcmlnaHQ6IG51bGwsXG4gICAgICAgICAgYm90dG9tOiBudWxsLFxuICAgICAgICAgIHdpZHRoOiBudWxsLFxuICAgICAgICAgIGhlaWdodDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICByZWYgPSB0aGlzLmdldFBhZ2VFbHMoKTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBwYWdlRWwgPSByZWZbaV07XG4gICAgICAgICAgcGFnZVJlY3QgPSBwYWdlRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICBpZiAocGFnZVJlY3QudG9wIDwgcmVjdC50b3AgfHwgcmVjdC50b3AgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVjdC50b3AgPSBwYWdlUmVjdC50b3A7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHBhZ2VSZWN0LmxlZnQgPCByZWN0LmxlZnQgfHwgcmVjdC5sZWZ0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJlY3QubGVmdCA9IHBhZ2VSZWN0LmxlZnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHBhZ2VSZWN0LnJpZ2h0ID4gcmVjdC5yaWdodCB8fCByZWN0LnJpZ2h0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJlY3QucmlnaHQgPSBwYWdlUmVjdC5yaWdodDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocGFnZVJlY3QuYm90dG9tID4gcmVjdC5ib3R0b20gfHwgcmVjdC5ib3R0b20gPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVjdC5ib3R0b20gPSBwYWdlUmVjdC5ib3R0b207XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmVjdC50b3AgPSAocmVmMSA9IHJlY3QudG9wKSAhPSBudWxsID8gcmVmMSA6IDA7XG4gICAgICAgIHJlY3QubGVmdCA9IChyZWYyID0gcmVjdC5sZWZ0KSAhPSBudWxsID8gcmVmMiA6IDA7XG4gICAgICAgIHJlY3QucmlnaHQgPSAocmVmMyA9IHJlY3QucmlnaHQpICE9IG51bGwgPyByZWYzIDogMDtcbiAgICAgICAgcmVjdC5ib3R0b20gPSAocmVmNCA9IHJlY3QuYm90dG9tKSAhPSBudWxsID8gcmVmNCA6IDA7XG4gICAgICAgIHJlY3Qud2lkdGggPSByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0O1xuICAgICAgICByZWN0LmhlaWdodCA9IHJlY3QuYm90dG9tIC0gcmVjdC50b3A7XG4gICAgICAgIHJldHVybiByZWN0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRJZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pZDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0VHlwZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFBhZ2VJZHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYWdlSWRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYWdlSWRzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRXaWR0aFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aWR0aDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0TGVmdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldExlZnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlZnQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldE1heFpvb21TY2FsZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1heFpvb21TY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4Wm9vbVNjYWxlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRWaXNpYmlsaXR5XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmlzaWJpbGl0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlzaWJpbGl0eTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0VmlzaWJpbGl0eVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZpc2liaWxpdHkodmlzaWJpbGl0eSkge1xuICAgICAgICBpZiAodGhpcy52aXNpYmlsaXR5ICE9PSB2aXNpYmlsaXR5KSB7XG4gICAgICAgICAgdGhpcy5nZXRFbCgpLnN0eWxlLmRpc3BsYXkgPSB2aXNpYmlsaXR5ID09PSAndmlzaWJsZScgPyAnYmxvY2snIDogJ25vbmUnO1xuICAgICAgICAgIHRoaXMudmlzaWJpbGl0eSA9IHZpc2liaWxpdHk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicG9zaXRpb25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwb3NpdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMucG9zaXRpb25lZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB0aGlzLmdldEVsKCkuc3R5bGUubGVmdCA9IFwiXCIuY29uY2F0KHRoaXMuZ2V0TGVmdCgpLCBcIiVcIik7XG4gICAgICAgICAgdGhpcy5wb3NpdGlvbmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhY3RpdmF0ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuZ2V0RWwoKS5zZXRBdHRyaWJ1dGUoJ2RhdGEtYWN0aXZlJywgdGhpcy5hY3RpdmUpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkZWFjdGl2YXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5nZXRFbCgpLnNldEF0dHJpYnV0ZSgnZGF0YS1hY3RpdmUnLCB0aGlzLmFjdGl2ZSk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFBhZ2VTcHJlYWQ7XG4gIH0oKTtcblxuICB2YXIgQW5pbWF0aW9uO1xuXG4gIHZhciBhbmltYXRpb24gPSBBbmltYXRpb24gPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbmltYXRpb24oZWwpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbmltYXRpb24pO1xuXG4gICAgICB0aGlzLmVsID0gZWw7XG4gICAgICB0aGlzLnJ1biA9IDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEFuaW1hdGlvbiwgW3tcbiAgICAgIGtleTogXCJhbmltYXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYW5pbWF0ZSgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZnVuY3Rpb24gKCkge307XG5cbiAgICAgICAgdmFyIGR1cmF0aW9uLCBlYXNpbmcsIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmVmNCwgcnVuLCBzY2FsZSwgdHJhbnNmb3JtLCBfdHJhbnNpdGlvbkVuZCwgeCwgeTtcblxuICAgICAgICB4ID0gKHJlZiA9IG9wdGlvbnMueCkgIT0gbnVsbCA/IHJlZiA6IDA7XG4gICAgICAgIHkgPSAocmVmMSA9IG9wdGlvbnMueSkgIT0gbnVsbCA/IHJlZjEgOiAwO1xuICAgICAgICBzY2FsZSA9IChyZWYyID0gb3B0aW9ucy5zY2FsZSkgIT0gbnVsbCA/IHJlZjIgOiAxO1xuICAgICAgICBlYXNpbmcgPSAocmVmMyA9IG9wdGlvbnMuZWFzaW5nKSAhPSBudWxsID8gcmVmMyA6ICdlYXNlLW91dCc7XG4gICAgICAgIGR1cmF0aW9uID0gKHJlZjQgPSBvcHRpb25zLmR1cmF0aW9uKSAhPSBudWxsID8gcmVmNCA6IDA7XG4gICAgICAgIHJ1biA9ICsrdGhpcy5ydW47XG4gICAgICAgIHRyYW5zZm9ybSA9IFwidHJhbnNsYXRlWChcIi5jb25jYXQoeCwgXCIpIHRyYW5zbGF0ZVkoXCIpLmNvbmNhdCh5LCBcIikgc2NhbGUoXCIpLmNvbmNhdChzY2FsZSwgXCIpXCIpO1xuXG4gICAgICAgIGlmICh0aGlzLmVsLnN0eWxlLnRyYW5zZm9ybSA9PT0gdHJhbnNmb3JtKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSBlbHNlIGlmIChkdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICBfdHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoKSB7XG4gICAgICAgICAgICBpZiAocnVuICE9PSBfdGhpcy5ydW4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgX3RyYW5zaXRpb25FbmQpO1xuXG4gICAgICAgICAgICBfdGhpcy5lbC5zdHlsZS50cmFuc2l0aW9uID0gJ25vbmUnO1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgX3RyYW5zaXRpb25FbmQsIGZhbHNlKTtcbiAgICAgICAgICB0aGlzLmVsLnN0eWxlLnRyYW5zaXRpb24gPSBcInRyYW5zZm9ybSBcIi5jb25jYXQoZWFzaW5nLCBcIiBcIikuY29uY2F0KGR1cmF0aW9uLCBcIm1zXCIpO1xuICAgICAgICAgIHRoaXMuZWwuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZWwuc3R5bGUudHJhbnNpdGlvbiA9ICdub25lJztcbiAgICAgICAgICB0aGlzLmVsLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEFuaW1hdGlvbjtcbiAgfSgpO1xuXG4gIHZhciBBbmltYXRpb24kMSwgSGFtbWVyJDEsIE1pY3JvRXZlbnQsIFBhZ2VTcHJlYWQkMSwgVmVyc287XG4gIEhhbW1lciQxID0gaGFtbWVyO1xuICBNaWNyb0V2ZW50ID0gbWljcm9ldmVudDtcbiAgUGFnZVNwcmVhZCQxID0gcGFnZV9zcHJlYWQ7XG4gIEFuaW1hdGlvbiQxID0gYW5pbWF0aW9uO1xuXG4gIFZlcnNvID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmVyc28oZWwxKSB7XG4gICAgICB2YXIgb3B0aW9uczEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmVyc28pO1xuXG4gICAgICB2YXIgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZWY0LCByZWY1O1xuICAgICAgdGhpcy5lbCA9IGVsMTtcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMxO1xuICAgICAgdGhpcy5zd2lwZVZlbG9jaXR5ID0gKHJlZiA9IHRoaXMub3B0aW9ucy5zd2lwZVZlbG9jaXR5KSAhPSBudWxsID8gcmVmIDogMC4zO1xuICAgICAgdGhpcy5zd2lwZVRocmVzaG9sZCA9IChyZWYxID0gdGhpcy5vcHRpb25zLnN3aXBlVGhyZXNob2xkKSAhPSBudWxsID8gcmVmMSA6IDEwO1xuICAgICAgdGhpcy5uYXZpZ2F0aW9uRHVyYXRpb24gPSAocmVmMiA9IHRoaXMub3B0aW9ucy5uYXZpZ2F0aW9uRHVyYXRpb24pICE9IG51bGwgPyByZWYyIDogMjQwO1xuICAgICAgdGhpcy5uYXZpZ2F0aW9uUGFuRHVyYXRpb24gPSAocmVmMyA9IHRoaXMub3B0aW9ucy5uYXZpZ2F0aW9uUGFuRHVyYXRpb24pICE9IG51bGwgPyByZWYzIDogMjAwO1xuICAgICAgdGhpcy56b29tRHVyYXRpb24gPSAocmVmNCA9IHRoaXMub3B0aW9ucy56b29tRHVyYXRpb24pICE9IG51bGwgPyByZWY0IDogMjAwO1xuICAgICAgdGhpcy5kb3VibGVUYXBEZWxheSA9IChyZWY1ID0gdGhpcy5vcHRpb25zLmRvdWJsZVRhcERlbGF5KSAhPSBudWxsID8gcmVmNSA6IDMwMDtcbiAgICAgIHRoaXMucG9zaXRpb24gPSAtMTtcbiAgICAgIHRoaXMucGluY2hpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMucGFubmluZyA9IGZhbHNlO1xuICAgICAgdGhpcy50cmFuc2Zvcm0gPSB7XG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgc2NhbGU6IDFcbiAgICAgIH07XG4gICAgICB0aGlzLnN0YXJ0VHJhbnNmb3JtID0ge1xuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHNjYWxlOiAxXG4gICAgICB9O1xuICAgICAgdGhpcy50YXAgPSB7XG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICBkZWxheTogdGhpcy5kb3VibGVUYXBEZWxheVxuICAgICAgfTtcbiAgICAgIHRoaXMuc2Nyb2xsZXJFbCA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcignLnZlcnNvX19zY3JvbGxlcicpO1xuICAgICAgdGhpcy5wYWdlU3ByZWFkRWxzID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCcudmVyc29fX3BhZ2Utc3ByZWFkJyk7XG4gICAgICB0aGlzLnBhZ2VTcHJlYWRzID0gdGhpcy50cmF2ZXJzZVBhZ2VTcHJlYWRzKHRoaXMucGFnZVNwcmVhZEVscyk7XG4gICAgICB0aGlzLnBhZ2VJZHMgPSB0aGlzLmJ1aWxkUGFnZUlkcyh0aGlzLnBhZ2VTcHJlYWRzKTtcbiAgICAgIHRoaXMuYW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbiQxKHRoaXMuc2Nyb2xsZXJFbCk7XG4gICAgICB0aGlzLmhhbW1lciA9IG5ldyBIYW1tZXIkMS5NYW5hZ2VyKHRoaXMuc2Nyb2xsZXJFbCwge1xuICAgICAgICB0b3VjaEFjdGlvbjogJ25vbmUnLFxuICAgICAgICBlbmFibGU6IGZhbHNlLFxuICAgICAgICBpbnB1dENsYXNzOiB0aGlzLmdldEhhbW1lcklucHV0Q2xhc3MoKVxuICAgICAgfSk7XG4gICAgICB0aGlzLmhhbW1lci5hZGQobmV3IEhhbW1lciQxLlBhbih7XG4gICAgICAgIHRocmVzaG9sZDogNSxcbiAgICAgICAgZGlyZWN0aW9uOiBIYW1tZXIkMS5ESVJFQ1RJT05fQUxMXG4gICAgICB9KSk7XG4gICAgICB0aGlzLmhhbW1lci5hZGQobmV3IEhhbW1lciQxLlRhcCh7XG4gICAgICAgIGV2ZW50OiAnc2luZ2xldGFwJyxcbiAgICAgICAgaW50ZXJ2YWw6IDBcbiAgICAgIH0pKTtcbiAgICAgIHRoaXMuaGFtbWVyLmFkZChuZXcgSGFtbWVyJDEuUGluY2goKSk7XG4gICAgICB0aGlzLmhhbW1lci5hZGQobmV3IEhhbW1lciQxLlByZXNzKHtcbiAgICAgICAgdGltZTogNTAwXG4gICAgICB9KSk7XG4gICAgICB0aGlzLmhhbW1lci5vbigncGFuc3RhcnQnLCB0aGlzLm9uUGFuU3RhcnQuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmhhbW1lci5vbigncGFubW92ZScsIHRoaXMub25QYW5Nb3ZlLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5oYW1tZXIub24oJ3BhbmVuZCcsIHRoaXMub25QYW5FbmQuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmhhbW1lci5vbigncGFuY2FuY2VsJywgdGhpcy5vblBhbkVuZC5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuaGFtbWVyLm9uKCdzaW5nbGV0YXAnLCB0aGlzLm9uU2luZ2xldGFwLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5oYW1tZXIub24oJ3BpbmNoc3RhcnQnLCB0aGlzLm9uUGluY2hTdGFydC5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuaGFtbWVyLm9uKCdwaW5jaG1vdmUnLCB0aGlzLm9uUGluY2hNb3ZlLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5oYW1tZXIub24oJ3BpbmNoZW5kJywgdGhpcy5vblBpbmNoRW5kLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5oYW1tZXIub24oJ3BpbmNoY2FuY2VsJywgdGhpcy5vblBpbmNoRW5kLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5oYW1tZXIub24oJ3ByZXNzJywgdGhpcy5vblByZXNzLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5zY3JvbGxlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgdGhpcy5vbkNvbnRleHRtZW51LmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICAgIHRoaXMuc2Nyb2xsZXJFbC5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMub25XaGVlbC5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFZlcnNvLCBbe1xuICAgICAga2V5OiBcInN0YXJ0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIHZhciBwYWdlSWQsIHJlZjtcbiAgICAgICAgcGFnZUlkID0gKHJlZiA9IHRoaXMuZ2V0UGFnZVNwcmVhZFBvc2l0aW9uRnJvbVBhZ2VJZCh0aGlzLm9wdGlvbnMucGFnZUlkKSkgIT0gbnVsbCA/IHJlZiA6IDA7XG4gICAgICAgIHRoaXMuaGFtbWVyLnNldCh7XG4gICAgICAgICAgZW5hYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hdmlnYXRlVG8ocGFnZUlkLCB7XG4gICAgICAgICAgZHVyYXRpb246IDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVzaXplTGlzdGVuZXIgPSB0aGlzLm9uUmVzaXplLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudG91Y2hTdGFydExpc3RlbmVyID0gdGhpcy5vblRvdWNoU3RhcnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy50b3VjaEVuZExpc3RlbmVyID0gdGhpcy5vblRvdWNoRW5kLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMudG91Y2hTdGFydExpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLnRvdWNoRW5kTGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVzaXplTGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmhhbW1lci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMudG91Y2hTdGFydExpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMudG91Y2hFbmRMaXN0ZW5lcik7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlc2l6ZUxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImZpcnN0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZmlyc3Qob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5uYXZpZ2F0ZVRvKDAsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwcmV2XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcHJldihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hdmlnYXRlVG8odGhpcy5nZXRQb3NpdGlvbigpIC0gMSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm5leHRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0KG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmF2aWdhdGVUbyh0aGlzLmdldFBvc2l0aW9uKCkgKyAxLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibGFzdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxhc3Qob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5uYXZpZ2F0ZVRvKHRoaXMuZ2V0UGFnZVNwcmVhZENvdW50KCkgLSAxLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibmF2aWdhdGVUb1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG5hdmlnYXRlVG8ocG9zaXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICAgIHZhciBhY3RpdmVQYWdlU3ByZWFkLCBjYXJvdXNlbCwgY3VycmVudFBhZ2VTcHJlYWQsIGN1cnJlbnRQb3NpdGlvbiwgZHVyYXRpb24sIHJlZiwgcmVmMSwgdG91Y2hBY3Rpb24sIHZlbG9jaXR5O1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPiB0aGlzLmdldFBhZ2VTcHJlYWRDb3VudCgpIC0gMSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRQb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgY3VycmVudFBhZ2VTcHJlYWQgPSB0aGlzLmdldFBhZ2VTcHJlYWRGcm9tUG9zaXRpb24oY3VycmVudFBvc2l0aW9uKTtcbiAgICAgICAgYWN0aXZlUGFnZVNwcmVhZCA9IHRoaXMuZ2V0UGFnZVNwcmVhZEZyb21Qb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgIGNhcm91c2VsID0gdGhpcy5nZXRDYXJvdXNlbEZyb21QYWdlU3ByZWFkKGFjdGl2ZVBhZ2VTcHJlYWQpO1xuICAgICAgICB2ZWxvY2l0eSA9IChyZWYgPSBvcHRpb25zLnZlbG9jaXR5KSAhPSBudWxsID8gcmVmIDogMTtcbiAgICAgICAgZHVyYXRpb24gPSAocmVmMSA9IG9wdGlvbnMuZHVyYXRpb24pICE9IG51bGwgPyByZWYxIDogdGhpcy5uYXZpZ2F0aW9uRHVyYXRpb247XG4gICAgICAgIGR1cmF0aW9uID0gZHVyYXRpb24gLyBNYXRoLmFicyh2ZWxvY2l0eSk7XG4gICAgICAgIHRvdWNoQWN0aW9uID0gYWN0aXZlUGFnZVNwcmVhZC5pc1Njcm9sbGFibGUoKSA/ICdwYW4teScgOiAnbm9uZSc7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRQYWdlU3ByZWFkICE9IG51bGwpIHtcbiAgICAgICAgICBjdXJyZW50UGFnZVNwcmVhZC5kZWFjdGl2YXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBhY3RpdmVQYWdlU3ByZWFkLmFjdGl2YXRlKCk7XG4gICAgICAgIGNhcm91c2VsLnZpc2libGUuZm9yRWFjaChmdW5jdGlvbiAocGFnZVNwcmVhZCkge1xuICAgICAgICAgIHJldHVybiBwYWdlU3ByZWFkLnBvc2l0aW9uKCkuc2V0VmlzaWJpbGl0eSgndmlzaWJsZScpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5oYW1tZXIuc2V0KHtcbiAgICAgICAgICB0b3VjaEFjdGlvbjogdG91Y2hBY3Rpb25cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtLmxlZnQgPSB0aGlzLmdldExlZnRUcmFuc2Zvcm1Gcm9tUGFnZVNwcmVhZChwb3NpdGlvbiwgYWN0aXZlUGFnZVNwcmVhZCk7XG4gICAgICAgIHRoaXMuc2V0UG9zaXRpb24ocG9zaXRpb24pO1xuXG4gICAgICAgIGlmICh0aGlzLnRyYW5zZm9ybS5zY2FsZSA+IDEpIHtcbiAgICAgICAgICB0aGlzLnRyYW5zZm9ybS50b3AgPSAwO1xuICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnNjYWxlID0gMTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3pvb21lZE91dCcsIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBjdXJyZW50UG9zaXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJpZ2dlcignYmVmb3JlTmF2aWdhdGlvbicsIHtcbiAgICAgICAgICBjdXJyZW50UG9zaXRpb246IGN1cnJlbnRQb3NpdGlvbixcbiAgICAgICAgICBuZXdQb3NpdGlvbjogcG9zaXRpb25cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLmFuaW1hdGUoe1xuICAgICAgICAgIHg6IFwiXCIuY29uY2F0KHRoaXMudHJhbnNmb3JtLmxlZnQsIFwiJVwiKSxcbiAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb25cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNhcm91c2VsID0gX3RoaXMuZ2V0Q2Fyb3VzZWxGcm9tUGFnZVNwcmVhZChfdGhpcy5nZXRBY3RpdmVQYWdlU3ByZWFkKCkpO1xuICAgICAgICAgIGNhcm91c2VsLmdvbmUuZm9yRWFjaChmdW5jdGlvbiAocGFnZVNwcmVhZCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhZ2VTcHJlYWQuc2V0VmlzaWJpbGl0eSgnZ29uZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgX3RoaXMudHJpZ2dlcignYWZ0ZXJOYXZpZ2F0aW9uJywge1xuICAgICAgICAgICAgbmV3UG9zaXRpb246IF90aGlzLmdldFBvc2l0aW9uKCksXG4gICAgICAgICAgICBwcmV2aW91c1Bvc2l0aW9uOiBjdXJyZW50UG9zaXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFBvc2l0aW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UG9zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRQb3NpdGlvblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldExlZnRUcmFuc2Zvcm1Gcm9tUGFnZVNwcmVhZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldExlZnRUcmFuc2Zvcm1Gcm9tUGFnZVNwcmVhZChwb3NpdGlvbiwgcGFnZVNwcmVhZCkge1xuICAgICAgICB2YXIgbGVmdDtcbiAgICAgICAgbGVmdCA9IDA7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSB0aGlzLmdldFBhZ2VTcHJlYWRDb3VudCgpIC0gMSkge1xuICAgICAgICAgIGxlZnQgPSAxMDAgLSBwYWdlU3ByZWFkLmdldFdpZHRoKCkgLSBwYWdlU3ByZWFkLmdldExlZnQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA+IDApIHtcbiAgICAgICAgICBsZWZ0ID0gKDEwMCAtIHBhZ2VTcHJlYWQuZ2V0V2lkdGgoKSkgLyAyIC0gcGFnZVNwcmVhZC5nZXRMZWZ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGVmdDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0Q2Fyb3VzZWxGcm9tUGFnZVNwcmVhZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENhcm91c2VsRnJvbVBhZ2VTcHJlYWQocGFnZVNwcmVhZFN1YmplY3QpIHtcbiAgICAgICAgdmFyIGNhcm91c2VsO1xuICAgICAgICBjYXJvdXNlbCA9IHtcbiAgICAgICAgICB2aXNpYmxlOiBbXSxcbiAgICAgICAgICBnb25lOiBbXVxuICAgICAgICB9OyAvLyBJZGVudGlmeSB0aGUgcGFnZSBzcHJlYWRzIHRoYXQgc2hvdWxkIGJlIGEgcGFydCBvZiB0aGUgY2Fyb3VzZWwuXG5cbiAgICAgICAgdGhpcy5wYWdlU3ByZWFkcy5mb3JFYWNoKGZ1bmN0aW9uIChwYWdlU3ByZWFkKSB7XG4gICAgICAgICAgdmFyIHZpc2libGU7XG4gICAgICAgICAgdmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKHBhZ2VTcHJlYWQuZ2V0TGVmdCgpIDw9IHBhZ2VTcHJlYWRTdWJqZWN0LmdldExlZnQoKSkge1xuICAgICAgICAgICAgaWYgKHBhZ2VTcHJlYWQuZ2V0TGVmdCgpICsgcGFnZVNwcmVhZC5nZXRXaWR0aCgpID4gcGFnZVNwcmVhZFN1YmplY3QuZ2V0TGVmdCgpIC0gMTAwKSB7XG4gICAgICAgICAgICAgIHZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocGFnZVNwcmVhZC5nZXRMZWZ0KCkgLSBwYWdlU3ByZWFkLmdldFdpZHRoKCkgPCBwYWdlU3ByZWFkU3ViamVjdC5nZXRMZWZ0KCkgKyAxMDApIHtcbiAgICAgICAgICAgICAgdmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHZpc2libGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNhcm91c2VsLnZpc2libGUucHVzaChwYWdlU3ByZWFkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2Fyb3VzZWwuZ29uZS5wdXNoKHBhZ2VTcHJlYWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjYXJvdXNlbDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidHJhdmVyc2VQYWdlU3ByZWFkc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRyYXZlcnNlUGFnZVNwcmVhZHMoZWxzKSB7XG4gICAgICAgIHZhciBlbCwgaWQsIGosIGxlZnQsIGxlbiwgbWF4Wm9vbVNjYWxlLCBwYWdlSWRzLCBwYWdlU3ByZWFkLCBwYWdlU3ByZWFkcywgdHlwZSwgd2lkdGg7XG4gICAgICAgIHBhZ2VTcHJlYWRzID0gW107XG4gICAgICAgIGxlZnQgPSAwO1xuXG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IGVscy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGVsID0gZWxzW2pdO1xuICAgICAgICAgIGlkID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XG4gICAgICAgICAgdHlwZSA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS10eXBlJyk7XG4gICAgICAgICAgcGFnZUlkcyA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1wYWdlLWlkcycpO1xuICAgICAgICAgIHBhZ2VJZHMgPSBwYWdlSWRzICE9IG51bGwgPyBwYWdlSWRzLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICB9KSA6IFtdO1xuICAgICAgICAgIG1heFpvb21TY2FsZSA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1tYXgtem9vbS1zY2FsZScpO1xuICAgICAgICAgIG1heFpvb21TY2FsZSA9IG1heFpvb21TY2FsZSAhPSBudWxsID8gK21heFpvb21TY2FsZSA6IDE7XG4gICAgICAgICAgd2lkdGggPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtd2lkdGgnKTtcbiAgICAgICAgICB3aWR0aCA9IHdpZHRoICE9IG51bGwgPyArd2lkdGggOiAxMDA7XG4gICAgICAgICAgcGFnZVNwcmVhZCA9IG5ldyBQYWdlU3ByZWFkJDEoZWwsIHtcbiAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICBwYWdlSWRzOiBwYWdlSWRzLFxuICAgICAgICAgICAgbWF4Wm9vbVNjYWxlOiBtYXhab29tU2NhbGUsXG4gICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICBsZWZ0OiBsZWZ0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbGVmdCArPSB3aWR0aDtcbiAgICAgICAgICBwYWdlU3ByZWFkcy5wdXNoKHBhZ2VTcHJlYWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhZ2VTcHJlYWRzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJidWlsZFBhZ2VJZHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZFBhZ2VJZHMocGFnZVNwcmVhZHMpIHtcbiAgICAgICAgdmFyIHBhZ2VJZHM7XG4gICAgICAgIHBhZ2VJZHMgPSB7fTtcbiAgICAgICAgcGFnZVNwcmVhZHMuZm9yRWFjaChmdW5jdGlvbiAocGFnZVNwcmVhZCwgaSkge1xuICAgICAgICAgIHBhZ2VTcHJlYWQub3B0aW9ucy5wYWdlSWRzLmZvckVhY2goZnVuY3Rpb24gKHBhZ2VJZCkge1xuICAgICAgICAgICAgcGFnZUlkc1twYWdlSWRdID0gcGFnZVNwcmVhZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYWdlSWRzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJpc0Nvb3JkaW5hdGVJbnNpZGVFbGVtZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNDb29yZGluYXRlSW5zaWRlRWxlbWVudCh4LCB5LCBlbCkge1xuICAgICAgICB2YXIgcmVjdDtcbiAgICAgICAgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICByZXR1cm4geCA+PSByZWN0LmxlZnQgJiYgeCA8PSByZWN0LnJpZ2h0ICYmIHkgPj0gcmVjdC50b3AgJiYgeSA8PSByZWN0LmJvdHRvbTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0Q29vcmRpbmF0ZUluZm9cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb29yZGluYXRlSW5mbyh4LCB5LCBwYWdlU3ByZWFkKSB7XG4gICAgICAgIHZhciBjb250ZW50UmVjdCwgaW5mbywgaiwgaywgbGVuLCBsZW4xLCBvdmVybGF5RWwsIG92ZXJsYXlFbHMsIHBhZ2VFbCwgcGFnZUVscztcbiAgICAgICAgeCAtPSB0aGlzLmVsLm9mZnNldExlZnQ7XG4gICAgICAgIHkgLT0gdGhpcy5lbC5vZmZzZXRUb3A7XG4gICAgICAgIGluZm8gPSB7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5LFxuICAgICAgICAgIGNvbnRlbnRYOiAwLFxuICAgICAgICAgIGNvbnRlbnRZOiAwLFxuICAgICAgICAgIHBhZ2VYOiAwLFxuICAgICAgICAgIHBhZ2VZOiAwLFxuICAgICAgICAgIG92ZXJsYXlFbHM6IFtdLFxuICAgICAgICAgIHBhZ2VFbDogbnVsbCxcbiAgICAgICAgICBpc0luc2lkZUNvbnRlbnRYOiBmYWxzZSxcbiAgICAgICAgICBpc0luc2lkZUNvbnRlbnRZOiBmYWxzZSxcbiAgICAgICAgICBpc0luc2lkZUNvbnRlbnQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnRlbnRSZWN0ID0gcGFnZVNwcmVhZC5nZXRDb250ZW50UmVjdCgpO1xuICAgICAgICBvdmVybGF5RWxzID0gcGFnZVNwcmVhZC5nZXRPdmVybGF5RWxzKCk7XG4gICAgICAgIHBhZ2VFbHMgPSBwYWdlU3ByZWFkLmdldFBhZ2VFbHMoKTtcblxuICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSBvdmVybGF5RWxzLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgb3ZlcmxheUVsID0gb3ZlcmxheUVsc1tqXTtcblxuICAgICAgICAgIGlmICh0aGlzLmlzQ29vcmRpbmF0ZUluc2lkZUVsZW1lbnQoeCwgeSwgb3ZlcmxheUVsKSkge1xuICAgICAgICAgICAgaW5mby5vdmVybGF5RWxzLnB1c2gob3ZlcmxheUVsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGsgPSAwLCBsZW4xID0gcGFnZUVscy5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgICBwYWdlRWwgPSBwYWdlRWxzW2tdO1xuXG4gICAgICAgICAgaWYgKHRoaXMuaXNDb29yZGluYXRlSW5zaWRlRWxlbWVudCh4LCB5LCBwYWdlRWwpKSB7XG4gICAgICAgICAgICBpbmZvLnBhZ2VFbCA9IHBhZ2VFbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGluZm8uY29udGVudFggPSAoeCAtIGNvbnRlbnRSZWN0LmxlZnQpIC8gTWF0aC5tYXgoMSwgY29udGVudFJlY3Qud2lkdGgpO1xuICAgICAgICBpbmZvLmNvbnRlbnRZID0gKHkgLSBjb250ZW50UmVjdC50b3ApIC8gTWF0aC5tYXgoMSwgY29udGVudFJlY3QuaGVpZ2h0KTtcblxuICAgICAgICBpZiAoaW5mby5wYWdlRWwgIT0gbnVsbCkge1xuICAgICAgICAgIGluZm8uaXNJbnNpZGVDb250ZW50WCA9IGluZm8uY29udGVudFggPj0gMCAmJiBpbmZvLmNvbnRlbnRYIDw9IDE7XG4gICAgICAgICAgaW5mby5pc0luc2lkZUNvbnRlbnRZID0gaW5mby5jb250ZW50WSA+PSAwICYmIGluZm8uY29udGVudFkgPD0gMTtcbiAgICAgICAgICBpbmZvLmlzSW5zaWRlQ29udGVudCA9IGluZm8uaXNJbnNpZGVDb250ZW50WCAmJiBpbmZvLmlzSW5zaWRlQ29udGVudFk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0UGFnZVNwcmVhZENvdW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFnZVNwcmVhZENvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYWdlU3ByZWFkcy5sZW5ndGg7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEFjdGl2ZVBhZ2VTcHJlYWRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBY3RpdmVQYWdlU3ByZWFkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYWdlU3ByZWFkRnJvbVBvc2l0aW9uKHRoaXMuZ2V0UG9zaXRpb24oKSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldFBhZ2VTcHJlYWRGcm9tUG9zaXRpb25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYWdlU3ByZWFkRnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhZ2VTcHJlYWRzW3Bvc2l0aW9uXTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0UGFnZVNwcmVhZFBvc2l0aW9uRnJvbVBhZ2VJZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBhZ2VTcHJlYWRQb3NpdGlvbkZyb21QYWdlSWQocGFnZUlkKSB7XG4gICAgICAgIHZhciBpZHgsIGosIGxlbiwgcGFnZVNwcmVhZCwgcmVmO1xuICAgICAgICByZWYgPSB0aGlzLnBhZ2VTcHJlYWRzO1xuXG4gICAgICAgIGZvciAoaWR4ID0gaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGlkeCA9ICsraikge1xuICAgICAgICAgIHBhZ2VTcHJlYWQgPSByZWZbaWR4XTtcblxuICAgICAgICAgIGlmIChwYWdlU3ByZWFkLm9wdGlvbnMucGFnZUlkcy5pbmRleE9mKHBhZ2VJZCkgPiAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGlkeDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZ2V0UGFnZVNwcmVhZEJvdW5kc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBhZ2VTcHJlYWRCb3VuZHMocGFnZVNwcmVhZCkge1xuICAgICAgICB2YXIgcGFnZVNwcmVhZENvbnRlbnRSZWN0LCBwYWdlU3ByZWFkUmVjdDtcbiAgICAgICAgcGFnZVNwcmVhZFJlY3QgPSBwYWdlU3ByZWFkLmdldFJlY3QoKTtcbiAgICAgICAgcGFnZVNwcmVhZENvbnRlbnRSZWN0ID0gcGFnZVNwcmVhZC5nZXRDb250ZW50UmVjdCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxlZnQ6IChwYWdlU3ByZWFkQ29udGVudFJlY3QubGVmdCAtIHBhZ2VTcHJlYWRSZWN0LmxlZnQpIC8gcGFnZVNwcmVhZFJlY3Qud2lkdGggKiAxMDAsXG4gICAgICAgICAgdG9wOiAocGFnZVNwcmVhZENvbnRlbnRSZWN0LnRvcCAtIHBhZ2VTcHJlYWRSZWN0LnRvcCkgLyBwYWdlU3ByZWFkUmVjdC5oZWlnaHQgKiAxMDAsXG4gICAgICAgICAgd2lkdGg6IHBhZ2VTcHJlYWRDb250ZW50UmVjdC53aWR0aCAvIHBhZ2VTcHJlYWRSZWN0LndpZHRoICogMTAwLFxuICAgICAgICAgIGhlaWdodDogcGFnZVNwcmVhZENvbnRlbnRSZWN0LmhlaWdodCAvIHBhZ2VTcHJlYWRSZWN0LmhlaWdodCAqIDEwMCxcbiAgICAgICAgICBwYWdlU3ByZWFkUmVjdDogcGFnZVNwcmVhZFJlY3QsXG4gICAgICAgICAgcGFnZVNwcmVhZENvbnRlbnRSZWN0OiBwYWdlU3ByZWFkQ29udGVudFJlY3RcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2xpcENvb3JkaW5hdGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbGlwQ29vcmRpbmF0ZShjb29yZGluYXRlLCBzY2FsZSwgc2l6ZSwgb2Zmc2V0KSB7XG4gICAgICAgIGlmIChzaXplICogc2NhbGUgPCAxMDApIHtcbiAgICAgICAgICBjb29yZGluYXRlID0gb2Zmc2V0ICogLXNjYWxlICsgNTAgLSBzaXplICogc2NhbGUgLyAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvb3JkaW5hdGUgPSBNYXRoLm1pbihjb29yZGluYXRlLCBvZmZzZXQgKiAtc2NhbGUpO1xuICAgICAgICAgIGNvb3JkaW5hdGUgPSBNYXRoLm1heChjb29yZGluYXRlLCBvZmZzZXQgKiAtc2NhbGUgLSBzaXplICogc2NhbGUgKyAxMDApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvb3JkaW5hdGU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInpvb21Ub1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHpvb21UbygpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGFjdGl2ZVBhZ2VTcHJlYWQsIGNhcm91c2VsT2Zmc2V0LCBjYXJvdXNlbFNjYWxlZE9mZnNldCwgY3VyU2NhbGUsIHBhZ2VTcHJlYWRCb3VuZHMsIHJlZiwgcmVmMSwgc2NhbGUsIHgsIHk7XG4gICAgICAgIHNjYWxlID0gb3B0aW9ucy5zY2FsZTtcbiAgICAgICAgY3VyU2NhbGUgPSB0aGlzLnRyYW5zZm9ybS5zY2FsZTtcbiAgICAgICAgYWN0aXZlUGFnZVNwcmVhZCA9IHRoaXMuZ2V0QWN0aXZlUGFnZVNwcmVhZCgpO1xuICAgICAgICBwYWdlU3ByZWFkQm91bmRzID0gdGhpcy5nZXRQYWdlU3ByZWFkQm91bmRzKGFjdGl2ZVBhZ2VTcHJlYWQpO1xuICAgICAgICBjYXJvdXNlbE9mZnNldCA9IGFjdGl2ZVBhZ2VTcHJlYWQuZ2V0TGVmdCgpO1xuICAgICAgICBjYXJvdXNlbFNjYWxlZE9mZnNldCA9IGNhcm91c2VsT2Zmc2V0ICogY3VyU2NhbGU7XG4gICAgICAgIHggPSAocmVmID0gb3B0aW9ucy54KSAhPSBudWxsID8gcmVmIDogMDtcbiAgICAgICAgeSA9IChyZWYxID0gb3B0aW9ucy55KSAhPSBudWxsID8gcmVmMSA6IDA7XG5cbiAgICAgICAgaWYgKHNjYWxlICE9PSAxKSB7XG4gICAgICAgICAgeCAtPSBwYWdlU3ByZWFkQm91bmRzLnBhZ2VTcHJlYWRSZWN0LmxlZnQ7XG4gICAgICAgICAgeSAtPSBwYWdlU3ByZWFkQm91bmRzLnBhZ2VTcHJlYWRSZWN0LnRvcDtcbiAgICAgICAgICB4ID0geCAvIChwYWdlU3ByZWFkQm91bmRzLnBhZ2VTcHJlYWRSZWN0LndpZHRoIC8gY3VyU2NhbGUpICogMTAwO1xuICAgICAgICAgIHkgPSB5IC8gKHBhZ2VTcHJlYWRCb3VuZHMucGFnZVNwcmVhZFJlY3QuaGVpZ2h0IC8gY3VyU2NhbGUpICogMTAwO1xuICAgICAgICAgIHggPSB0aGlzLnRyYW5zZm9ybS5sZWZ0ICsgY2Fyb3VzZWxTY2FsZWRPZmZzZXQgKyB4IC0geCAqIHNjYWxlIC8gY3VyU2NhbGU7XG4gICAgICAgICAgeSA9IHRoaXMudHJhbnNmb3JtLnRvcCArIHkgLSB5ICogc2NhbGUgLyBjdXJTY2FsZTsgLy8gTWFrZSBzdXJlIHRoZSBhbmltYXRpb24gZG9lc24ndCBleGNlZWQgdGhlIGNvbnRlbnQgYm91bmRzLlxuXG4gICAgICAgICAgaWYgKG9wdGlvbnMuYm91bmRzICE9PSBmYWxzZSAmJiBzY2FsZSA+IDEpIHtcbiAgICAgICAgICAgIHggPSB0aGlzLmNsaXBDb29yZGluYXRlKHgsIHNjYWxlLCBwYWdlU3ByZWFkQm91bmRzLndpZHRoLCBwYWdlU3ByZWFkQm91bmRzLmxlZnQpO1xuICAgICAgICAgICAgeSA9IHRoaXMuY2xpcENvb3JkaW5hdGUoeSwgc2NhbGUsIHBhZ2VTcHJlYWRCb3VuZHMuaGVpZ2h0LCBwYWdlU3ByZWFkQm91bmRzLnRvcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHggPSAwO1xuICAgICAgICAgIHkgPSAwO1xuICAgICAgICB9IC8vIEFjY291bnQgZm9yIHRoZSBwYWdlIHNwcmVhZHMgbGVmdCBvZiB0aGUgYWN0aXZlIG9uZS5cblxuXG4gICAgICAgIHggLT0gY2Fyb3VzZWxPZmZzZXQgKiBzY2FsZTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0ubGVmdCA9IHg7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnRvcCA9IHk7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnNjYWxlID0gc2NhbGU7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLmFuaW1hdGUoe1xuICAgICAgICAgIHg6IFwiXCIuY29uY2F0KHgsIFwiJVwiKSxcbiAgICAgICAgICB5OiBcIlwiLmNvbmNhdCh5LCBcIiVcIiksXG4gICAgICAgICAgc2NhbGU6IHNjYWxlLFxuICAgICAgICAgIGVhc2luZzogb3B0aW9ucy5lYXNpbmcsXG4gICAgICAgICAgZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb25cbiAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZWZyZXNoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICAgICAgdGhpcy5wYWdlU3ByZWFkRWxzID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCcudmVyc29fX3BhZ2Utc3ByZWFkJyk7XG4gICAgICAgIHRoaXMucGFnZVNwcmVhZHMgPSB0aGlzLnRyYXZlcnNlUGFnZVNwcmVhZHModGhpcy5wYWdlU3ByZWFkRWxzKTtcbiAgICAgICAgdGhpcy5wYWdlSWRzID0gdGhpcy5idWlsZFBhZ2VJZHModGhpcy5wYWdlU3ByZWFkcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRIYW1tZXJJbnB1dENsYXNzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SGFtbWVySW5wdXRDbGFzcygpIHtcbiAgICAgICAgdmFyIG1vYmlsZVJlZ2V4LCBzdXBwb3J0VG91Y2g7XG4gICAgICAgIG1vYmlsZVJlZ2V4ID0gL21vYmlsZXx0YWJsZXR8aXAoYWR8aG9uZXxvZCl8YW5kcm9pZC9pO1xuICAgICAgICBzdXBwb3J0VG91Y2ggPSAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3c7XG5cbiAgICAgICAgaWYgKHN1cHBvcnRUb3VjaCAmJiBtb2JpbGVSZWdleC50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuIEhhbW1lciQxLlRvdWNoSW5wdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gLy8jIyMjIyMjIyMjIyMjXG5cbiAgICAgIC8qIEV2ZW50cyAqL1xuICAgICAgLy8jIyMjIyMjIyMjIyMjXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwib25QYW5TdGFydFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uUGFuU3RhcnQoZSkge1xuICAgICAgICB2YXIgZWRnZVRocmVzaG9sZCwgd2lkdGgsIHg7IC8vIE9ubHkgYWxsb3cgcGFubmluZyBpZiB6b29tZWQgaW4gb3IgZG9pbmcgYSBob3Jpem9udGFsIHBhbi5cbiAgICAgICAgLy8gVGhpcyBlbnN1cmVzIHZlcnRpY2FsIHNjcm9sbGluZyB3b3JrcyBmb3Igc2Nyb2xsYWJsZSBwYWdlIHNwcmVhZHMuXG5cbiAgICAgICAgaWYgKHRoaXMudHJhbnNmb3JtLnNjYWxlID4gMSB8fCBlLmRpcmVjdGlvbiA9PT0gSGFtbWVyJDEuRElSRUNUSU9OX0xFRlQgfHwgZS5kaXJlY3Rpb24gPT09IEhhbW1lciQxLkRJUkVDVElPTl9SSUdIVCkge1xuICAgICAgICAgIHggPSBlLmNlbnRlci54O1xuICAgICAgICAgIGVkZ2VUaHJlc2hvbGQgPSAzMDtcbiAgICAgICAgICB3aWR0aCA9IHRoaXMuc2Nyb2xsZXJFbC5vZmZzZXRXaWR0aDsgLy8gUHJldmVudCBwYW5uaW5nIHdoZW4gZWRnZS1zd2lwaW5nIG9uIGlPUy5cblxuICAgICAgICAgIGlmICh4ID4gZWRnZVRocmVzaG9sZCAmJiB4IDwgd2lkdGggLSBlZGdlVGhyZXNob2xkKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VHJhbnNmb3JtLmxlZnQgPSB0aGlzLnRyYW5zZm9ybS5sZWZ0O1xuICAgICAgICAgICAgdGhpcy5zdGFydFRyYW5zZm9ybS50b3AgPSB0aGlzLnRyYW5zZm9ybS50b3A7XG4gICAgICAgICAgICB0aGlzLnBhbm5pbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdwYW5TdGFydCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJvblBhbk1vdmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblBhbk1vdmUoZSkge1xuICAgICAgICB2YXIgYWN0aXZlUGFnZVNwcmVhZCwgY2Fyb3VzZWxPZmZzZXQsIGNhcm91c2VsU2NhbGVkT2Zmc2V0LCBwYWdlU3ByZWFkQm91bmRzLCBzY2FsZSwgeCwgeTtcblxuICAgICAgICBpZiAodGhpcy5waW5jaGluZyA9PT0gdHJ1ZSB8fCB0aGlzLnBhbm5pbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudHJhbnNmb3JtLnNjYWxlID4gMSkge1xuICAgICAgICAgIGFjdGl2ZVBhZ2VTcHJlYWQgPSB0aGlzLmdldEFjdGl2ZVBhZ2VTcHJlYWQoKTtcbiAgICAgICAgICBjYXJvdXNlbE9mZnNldCA9IGFjdGl2ZVBhZ2VTcHJlYWQuZ2V0TGVmdCgpO1xuICAgICAgICAgIGNhcm91c2VsU2NhbGVkT2Zmc2V0ID0gY2Fyb3VzZWxPZmZzZXQgKiB0aGlzLnRyYW5zZm9ybS5zY2FsZTtcbiAgICAgICAgICBwYWdlU3ByZWFkQm91bmRzID0gdGhpcy5nZXRQYWdlU3ByZWFkQm91bmRzKGFjdGl2ZVBhZ2VTcHJlYWQpO1xuICAgICAgICAgIHNjYWxlID0gdGhpcy50cmFuc2Zvcm0uc2NhbGU7XG4gICAgICAgICAgeCA9IHRoaXMuc3RhcnRUcmFuc2Zvcm0ubGVmdCArIGNhcm91c2VsU2NhbGVkT2Zmc2V0ICsgZS5kZWx0YVggLyB0aGlzLnNjcm9sbGVyRWwub2Zmc2V0V2lkdGggKiAxMDA7XG4gICAgICAgICAgeSA9IHRoaXMuc3RhcnRUcmFuc2Zvcm0udG9wICsgZS5kZWx0YVkgLyB0aGlzLnNjcm9sbGVyRWwub2Zmc2V0SGVpZ2h0ICogMTAwO1xuICAgICAgICAgIHggPSB0aGlzLmNsaXBDb29yZGluYXRlKHgsIHNjYWxlLCBwYWdlU3ByZWFkQm91bmRzLndpZHRoLCBwYWdlU3ByZWFkQm91bmRzLmxlZnQpO1xuICAgICAgICAgIHkgPSB0aGlzLmNsaXBDb29yZGluYXRlKHksIHNjYWxlLCBwYWdlU3ByZWFkQm91bmRzLmhlaWdodCwgcGFnZVNwcmVhZEJvdW5kcy50b3ApO1xuICAgICAgICAgIHggLT0gY2Fyb3VzZWxTY2FsZWRPZmZzZXQ7XG4gICAgICAgICAgdGhpcy50cmFuc2Zvcm0ubGVmdCA9IHg7XG4gICAgICAgICAgdGhpcy50cmFuc2Zvcm0udG9wID0geTtcbiAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5hbmltYXRlKHtcbiAgICAgICAgICAgIHg6IFwiXCIuY29uY2F0KHgsIFwiJVwiKSxcbiAgICAgICAgICAgIHk6IFwiXCIuY29uY2F0KHksIFwiJVwiKSxcbiAgICAgICAgICAgIHNjYWxlOiBzY2FsZSxcbiAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcidcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB4ID0gdGhpcy50cmFuc2Zvcm0ubGVmdCArIGUuZGVsdGFYIC8gdGhpcy5zY3JvbGxlckVsLm9mZnNldFdpZHRoICogMTAwO1xuICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLmFuaW1hdGUoe1xuICAgICAgICAgICAgeDogXCJcIi5jb25jYXQoeCwgXCIlXCIpLFxuICAgICAgICAgICAgZWFzaW5nOiAnbGluZWFyJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm9uUGFuRW5kXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25QYW5FbmQoZSkge1xuICAgICAgICB2YXIgcG9zaXRpb24sIHZlbG9jaXR5O1xuXG4gICAgICAgIGlmICh0aGlzLnBhbm5pbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wYW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncGFuRW5kJyk7XG5cbiAgICAgICAgaWYgKHRoaXMudHJhbnNmb3JtLnNjYWxlID09PSAxICYmIHRoaXMucGluY2hpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcG9zaXRpb24gPSB0aGlzLmdldFBvc2l0aW9uKCk7XG4gICAgICAgICAgdmVsb2NpdHkgPSBlLm92ZXJhbGxWZWxvY2l0eVg7XG5cbiAgICAgICAgICBpZiAoTWF0aC5hYnModmVsb2NpdHkpID49IHRoaXMuc3dpcGVWZWxvY2l0eSkge1xuICAgICAgICAgICAgaWYgKE1hdGguYWJzKGUuZGVsdGFYKSA+PSB0aGlzLnN3aXBlVGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgIGlmIChlLm9mZnNldERpcmVjdGlvbiA9PT0gSGFtbWVyJDEuRElSRUNUSU9OX0xFRlQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHQoe1xuICAgICAgICAgICAgICAgICAgdmVsb2NpdHk6IHZlbG9jaXR5LFxuICAgICAgICAgICAgICAgICAgZHVyYXRpb246IHRoaXMubmF2aWdhdGlvblBhbkR1cmF0aW9uXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5vZmZzZXREaXJlY3Rpb24gPT09IEhhbW1lciQxLkRJUkVDVElPTl9SSUdIVCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJldih7XG4gICAgICAgICAgICAgICAgICB2ZWxvY2l0eTogdmVsb2NpdHksXG4gICAgICAgICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5uYXZpZ2F0aW9uUGFuRHVyYXRpb25cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gdGhpcy5nZXRQb3NpdGlvbigpKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5hbmltYXRlKHtcbiAgICAgICAgICAgICAgeDogXCJcIi5jb25jYXQodGhpcy50cmFuc2Zvcm0ubGVmdCwgXCIlXCIpLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5uYXZpZ2F0aW9uUGFuRHVyYXRpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdhdHRlbXB0ZWROYXZpZ2F0aW9uJywge1xuICAgICAgICAgICAgICBwb3NpdGlvbjogdGhpcy5nZXRQb3NpdGlvbigpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwib25QaW5jaFN0YXJ0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25QaW5jaFN0YXJ0KGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmdldEFjdGl2ZVBhZ2VTcHJlYWQoKS5pc1pvb21hYmxlKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBpbmNoaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGluY2hpbmcnLCB0cnVlKTtcbiAgICAgICAgdGhpcy5zdGFydFRyYW5zZm9ybS5zY2FsZSA9IHRoaXMudHJhbnNmb3JtLnNjYWxlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJvblBpbmNoTW92ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uUGluY2hNb3ZlKGUpIHtcbiAgICAgICAgaWYgKHRoaXMucGluY2hpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy56b29tVG8oe1xuICAgICAgICAgIHg6IGUuY2VudGVyLngsXG4gICAgICAgICAgeTogZS5jZW50ZXIueSxcbiAgICAgICAgICBzY2FsZTogdGhpcy5zdGFydFRyYW5zZm9ybS5zY2FsZSAqIGUuc2NhbGUsXG4gICAgICAgICAgYm91bmRzOiBmYWxzZSxcbiAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJvblBpbmNoRW5kXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25QaW5jaEVuZChlKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBhY3RpdmVQYWdlU3ByZWFkLCBtYXhab29tU2NhbGUsIHBvc2l0aW9uLCBzY2FsZTtcblxuICAgICAgICBpZiAodGhpcy5waW5jaGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhY3RpdmVQYWdlU3ByZWFkID0gdGhpcy5nZXRBY3RpdmVQYWdlU3ByZWFkKCk7XG4gICAgICAgIG1heFpvb21TY2FsZSA9IGFjdGl2ZVBhZ2VTcHJlYWQuZ2V0TWF4Wm9vbVNjYWxlKCk7XG4gICAgICAgIHNjYWxlID0gTWF0aC5tYXgoMSwgTWF0aC5taW4odGhpcy50cmFuc2Zvcm0uc2NhbGUsIG1heFpvb21TY2FsZSkpO1xuICAgICAgICBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcblxuICAgICAgICBpZiAodGhpcy5zdGFydFRyYW5zZm9ybS5zY2FsZSA9PT0gMSAmJiBzY2FsZSA+IDEpIHtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3pvb21lZEluJywge1xuICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGFydFRyYW5zZm9ybS5zY2FsZSA+IDEgJiYgc2NhbGUgPT09IDEpIHtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3pvb21lZE91dCcsIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy56b29tVG8oe1xuICAgICAgICAgIHg6IGUuY2VudGVyLngsXG4gICAgICAgICAgeTogZS5jZW50ZXIueSxcbiAgICAgICAgICBzY2FsZTogc2NhbGUsXG4gICAgICAgICAgZHVyYXRpb246IHRoaXMuem9vbUR1cmF0aW9uXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucGluY2hpbmcgPSBmYWxzZTtcblxuICAgICAgICAgIF90aGlzMi5lbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGluY2hpbmcnLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJvblByZXNzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25QcmVzcyhlKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncHJlc3NlZCcsIHRoaXMuZ2V0Q29vcmRpbmF0ZUluZm8oZS5jZW50ZXIueCwgZS5jZW50ZXIueSwgdGhpcy5nZXRBY3RpdmVQYWdlU3ByZWFkKCkpKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwib25Db250ZXh0bWVudVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ29udGV4dG1lbnUoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignY29udGV4dG1lbnUnLCB0aGlzLmdldENvb3JkaW5hdGVJbmZvKGUuY2xpZW50WCwgZS5jbGllbnRZLCB0aGlzLmdldEFjdGl2ZVBhZ2VTcHJlYWQoKSkpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm9uV2hlZWxcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbldoZWVsKGUpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGFjdGl2ZVBhZ2VTcHJlYWQsIHBvc2l0aW9uLCBzY2FsZTtcbiAgICAgICAgYWN0aXZlUGFnZVNwcmVhZCA9IHRoaXMuZ2V0QWN0aXZlUGFnZVNwcmVhZCgpO1xuXG4gICAgICAgIGlmIChhY3RpdmVQYWdlU3ByZWFkLmlzWm9vbWFibGUoKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZS5kZWx0YVkgPiAwICYmIHRoaXMudHJhbnNmb3JtLnNjYWxlID09PSAxKSB7XG4gICAgICAgICAgc2NhbGUgPSBhY3RpdmVQYWdlU3ByZWFkLmdldE1heFpvb21TY2FsZSgpO1xuICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy5nZXRQb3NpdGlvbigpO1xuICAgICAgICAgIHRoaXMuem9vbVRvKHtcbiAgICAgICAgICAgIHg6IGUuY2xpZW50WCxcbiAgICAgICAgICAgIHk6IGUuY2xpZW50WSxcbiAgICAgICAgICAgIHNjYWxlOiBzY2FsZSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLnpvb21EdXJhdGlvblxuICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMy50cmlnZ2VyKCd6b29tZWRJbicsIHtcbiAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChlLmRlbHRhWSA8IDAgJiYgdGhpcy50cmFuc2Zvcm0uc2NhbGUgPiAxKSB7XG4gICAgICAgICAgcG9zaXRpb24gPSB0aGlzLmdldFBvc2l0aW9uKCk7XG4gICAgICAgICAgdGhpcy56b29tVG8oe1xuICAgICAgICAgICAgeDogZS5jbGllbnRYLFxuICAgICAgICAgICAgeTogZS5jbGllbnRZLFxuICAgICAgICAgICAgc2NhbGU6IDEsXG4gICAgICAgICAgICBkdXJhdGlvbjogdGhpcy56b29tRHVyYXRpb25cbiAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczMudHJpZ2dlcignem9vbWVkT3V0Jywge1xuICAgICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm9uU2luZ2xldGFwXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25TaW5nbGV0YXAoZSkge1xuICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgICB2YXIgYWN0aXZlUGFnZVNwcmVhZCwgY29vcmRpbmF0ZUluZm8sIG1heFpvb21TY2FsZSwgcG9zaXRpb24sIHNjYWxlLCB6b29tRXZlbnQsIHpvb21lZEluO1xuICAgICAgICBhY3RpdmVQYWdlU3ByZWFkID0gdGhpcy5nZXRBY3RpdmVQYWdlU3ByZWFkKCk7XG4gICAgICAgIGNvb3JkaW5hdGVJbmZvID0gdGhpcy5nZXRDb29yZGluYXRlSW5mbyhlLmNlbnRlci54LCBlLmNlbnRlci55LCBhY3RpdmVQYWdlU3ByZWFkKTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGFwLnRpbWVvdXQpO1xuXG4gICAgICAgIGlmICh0aGlzLnRhcC5jb3VudCA9PT0gMSkge1xuICAgICAgICAgIHRoaXMudGFwLmNvdW50ID0gMDtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2RvdWJsZUNsaWNrZWQnLCBjb29yZGluYXRlSW5mbyk7XG5cbiAgICAgICAgICBpZiAoYWN0aXZlUGFnZVNwcmVhZC5pc1pvb21hYmxlKCkpIHtcbiAgICAgICAgICAgIG1heFpvb21TY2FsZSA9IGFjdGl2ZVBhZ2VTcHJlYWQuZ2V0TWF4Wm9vbVNjYWxlKCk7XG4gICAgICAgICAgICB6b29tZWRJbiA9IHRoaXMudHJhbnNmb3JtLnNjYWxlID4gMTtcbiAgICAgICAgICAgIHNjYWxlID0gem9vbWVkSW4gPyAxIDogbWF4Wm9vbVNjYWxlO1xuICAgICAgICAgICAgem9vbUV2ZW50ID0gem9vbWVkSW4gPyAnem9vbWVkT3V0JyA6ICd6b29tZWRJbic7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMuem9vbVRvKHtcbiAgICAgICAgICAgICAgeDogZS5jZW50ZXIueCxcbiAgICAgICAgICAgICAgeTogZS5jZW50ZXIueSxcbiAgICAgICAgICAgICAgc2NhbGU6IHNjYWxlLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogdGhpcy56b29tRHVyYXRpb25cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXM0LnRyaWdnZXIoem9vbUV2ZW50LCB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudGFwLmNvdW50Kys7XG4gICAgICAgICAgdGhpcy50YXAudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXM0LnRhcC5jb3VudCA9IDA7XG5cbiAgICAgICAgICAgIF90aGlzNC50cmlnZ2VyKCdjbGlja2VkJywgY29vcmRpbmF0ZUluZm8pO1xuICAgICAgICAgIH0sIHRoaXMudGFwLmRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJvblRvdWNoU3RhcnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblRvdWNoU3RhcnQoZSkge1xuICAgICAgICBpZiAoIXRoaXMuZ2V0QWN0aXZlUGFnZVNwcmVhZCgpLmlzU2Nyb2xsYWJsZSgpKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm9uVG91Y2hFbmRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblRvdWNoRW5kKGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmdldEFjdGl2ZVBhZ2VTcHJlYWQoKS5pc1Njcm9sbGFibGUoKSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJvblJlc2l6ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICAgICAgICB2YXIgYWN0aXZlUGFnZVNwcmVhZCwgcG9zaXRpb247XG5cbiAgICAgICAgaWYgKHRoaXMudHJhbnNmb3JtLnNjYWxlID4gMSkge1xuICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy5nZXRQb3NpdGlvbigpO1xuICAgICAgICAgIGFjdGl2ZVBhZ2VTcHJlYWQgPSB0aGlzLmdldEFjdGl2ZVBhZ2VTcHJlYWQoKTtcbiAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5sZWZ0ID0gdGhpcy5nZXRMZWZ0VHJhbnNmb3JtRnJvbVBhZ2VTcHJlYWQocG9zaXRpb24sIGFjdGl2ZVBhZ2VTcHJlYWQpO1xuICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnRvcCA9IDA7XG4gICAgICAgICAgdGhpcy50cmFuc2Zvcm0uc2NhbGUgPSAxO1xuICAgICAgICAgIHRoaXMuem9vbVRvKHtcbiAgICAgICAgICAgIHg6IHRoaXMudHJhbnNmb3JtLmxlZnQsXG4gICAgICAgICAgICB5OiB0aGlzLnRyYW5zZm9ybS50b3AsXG4gICAgICAgICAgICBzY2FsZTogdGhpcy50cmFuc2Zvcm0uc2NhbGUsXG4gICAgICAgICAgICBkdXJhdGlvbjogMFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignem9vbWVkT3V0Jywge1xuICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVmVyc287XG4gIH0oKTtcblxuICBNaWNyb0V2ZW50Lm1peGluKFZlcnNvKTtcbiAgdmFyIHZlcnNvID0gVmVyc287XG5cbiAgcmV0dXJuIHZlcnNvO1xuXG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzby5qcy5tYXBcbiIsIk1pY3JvRXZlbnQgPSByZXF1aXJlICdtaWNyb2V2ZW50J1xuU0dOID0gcmVxdWlyZSAnLi4vLi4vc2duJ1xuXG5jbGFzcyBQYWdlZFB1YmxpY2F0aW9uUGFnZVNwcmVhZFxuICAgIGNvbnN0cnVjdG9yOiAoQG9wdGlvbnMgPSB7fSkgLT5cbiAgICAgICAgQGNvbnRlbnRzUmVuZGVyZWQgPSBmYWxzZVxuICAgICAgICBAaG90c3BvdHNSZW5kZXJlZCA9IGZhbHNlXG4gICAgICAgIEBlbCA9IEByZW5kZXJFbCgpXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBnZXRJZDogLT5cbiAgICAgICAgQG9wdGlvbnMuaWRcblxuICAgIGdldEVsOiAtPlxuICAgICAgICBAZWxcblxuICAgIGdldFBhZ2VzOiAtPlxuICAgICAgICBAb3B0aW9ucy5wYWdlc1xuXG4gICAgcmVuZGVyRWw6IC0+XG4gICAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAnZGl2J1xuICAgICAgICBwYWdlSWRzID0gQGdldFBhZ2VzKCkubWFwIChwYWdlKSAtPiBwYWdlLmlkXG5cbiAgICAgICAgZWwuY2xhc3NOYW1lID0gJ3ZlcnNvX19wYWdlLXNwcmVhZCBzZ24tcHBfX3BhZ2Utc3ByZWFkJ1xuXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSAnZGF0YS1pZCcsIEBnZXRJZCgpXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSAnZGF0YS10eXBlJywgJ3BhZ2UnXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSAnZGF0YS13aWR0aCcsIEBvcHRpb25zLndpZHRoXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSAnZGF0YS1wYWdlLWlkcycsIHBhZ2VJZHMuam9pbignLCcpXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSAnZGF0YS1tYXgtem9vbS1zY2FsZScsIEBvcHRpb25zLm1heFpvb21TY2FsZVxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUgJ2RhdGEtem9vbWFibGUnLCBmYWxzZVxuXG4gICAgICAgIGVsXG5cbiAgICByZW5kZXJDb250ZW50czogLT5cbiAgICAgICAgaWQgPSBAZ2V0SWQoKVxuICAgICAgICBlbCA9IEBnZXRFbCgpXG4gICAgICAgIHBhZ2VzID0gQGdldFBhZ2VzKClcbiAgICAgICAgcGFnZUNvdW50ID0gcGFnZXMubGVuZ3RoXG4gICAgICAgIGltYWdlTG9hZHMgPSAwXG5cbiAgICAgICAgcGFnZXMuZm9yRWFjaCAocGFnZSwgaSkgPT5cbiAgICAgICAgICAgIGltYWdlID0gcGFnZS5pbWFnZXMubWVkaXVtXG4gICAgICAgICAgICBwYWdlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICdkaXYnXG4gICAgICAgICAgICBsb2FkZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ2RpdidcblxuICAgICAgICAgICAgcGFnZUVsLmNsYXNzTmFtZSA9ICdzZ24tcHBfX3BhZ2UgdmVyc29fX3BhZ2UnXG4gICAgICAgICAgICBwYWdlRWwuc2V0QXR0cmlidXRlKCdkYXRhLWlkJywgcGFnZS5pZCkgaWYgcGFnZS5pZD9cblxuICAgICAgICAgICAgaWYgcGFnZUNvdW50IGlzIDJcbiAgICAgICAgICAgICAgICBwYWdlRWwuY2xhc3NOYW1lICs9IGlmIGkgaXMgMCB0aGVuICcgdmVyc28tcGFnZS0tdmVyc28nIGVsc2UgJyB2ZXJzby1wYWdlLS1yZWN0bydcblxuICAgICAgICAgICAgcGFnZUVsLmFwcGVuZENoaWxkIGxvYWRlckVsXG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZCBwYWdlRWxcblxuICAgICAgICAgICAgbG9hZGVyRWwuY2xhc3NOYW1lID0gJ3Nnbi1wcC1wYWdlX19sb2FkZXInXG4gICAgICAgICAgICBsb2FkZXJFbC5pbm5lckhUTUwgPSBcIjxzcGFuPiN7cGFnZS5sYWJlbH08L3NwYW4+XCJcblxuICAgICAgICAgICAgU0dOLnV0aWwubG9hZEltYWdlIGltYWdlLCAoZXJyLCB3aWR0aCwgaGVpZ2h0KSA9PlxuICAgICAgICAgICAgICAgIGlmIG5vdCBlcnI/XG4gICAgICAgICAgICAgICAgICAgIGlzQ29tcGxldGUgPSArK2ltYWdlTG9hZHMgaXMgcGFnZUNvdW50XG5cbiAgICAgICAgICAgICAgICAgICAgcGFnZUVsLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IFwidXJsKCN7aW1hZ2V9KVwiXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VFbC5zZXRBdHRyaWJ1dGUgJ2RhdGEtd2lkdGgnLCB3aWR0aFxuICAgICAgICAgICAgICAgICAgICBwYWdlRWwuc2V0QXR0cmlidXRlICdkYXRhLWhlaWdodCcsIGhlaWdodFxuICAgICAgICAgICAgICAgICAgICBwYWdlRWwuaW5uZXJIVE1MID0gJyZuYnNwOydcblxuICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtem9vbWFibGUnLCB0cnVlKSBpZiBpc0NvbXBsZXRlXG5cbiAgICAgICAgICAgICAgICAgICAgQHRyaWdnZXIgJ3BhZ2VMb2FkZWQnLCBwYWdlU3ByZWFkSWQ6IGlkLCBwYWdlOiBwYWdlXG4gICAgICAgICAgICAgICAgICAgIEB0cmlnZ2VyICdwYWdlc0xvYWRlZCcsIHBhZ2VTcHJlYWRJZDogaWQsIHBhZ2VzOiBwYWdlcyBpZiBpc0NvbXBsZXRlXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBsb2FkZXJFbC5pbm5lckhUTUwgPSAnPHNwYW4+ITwvc3Bhbj4nXG5cbiAgICAgICAgICAgICAgICByZXR1cm5cblxuICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgQGNvbnRlbnRzUmVuZGVyZWQgPSB0cnVlXG5cbiAgICAgICAgQFxuXG4gICAgY2xlYXJDb250ZW50czogKHBhZ2VTcHJlYWQsIHZlcnNvUGFnZVNwcmVhZCkgLT5cbiAgICAgICAgQGVsLmlubmVySFRNTCA9ICcnXG4gICAgICAgIEBjb250ZW50c1JlbmRlcmVkID0gZmFsc2VcblxuICAgICAgICBAXG5cbiAgICB6b29tSW46IC0+XG4gICAgICAgIHBhZ2VFbHMgPSBbXS5zbGljZS5jYWxsIEBlbC5xdWVyeVNlbGVjdG9yQWxsKCcuc2duLXBwX19wYWdlJylcbiAgICAgICAgcGFnZXMgPSBAZ2V0UGFnZXMoKVxuXG4gICAgICAgIHBhZ2VFbHMuZm9yRWFjaCAocGFnZUVsKSA9PlxuICAgICAgICAgICAgaWQgPSBwYWdlRWwuZ2V0QXR0cmlidXRlICdkYXRhLWlkJ1xuICAgICAgICAgICAgcGFnZSA9IHBhZ2VzLmZpbmQgKHBhZ2UpIC0+IHBhZ2UuaWQgaXMgaWRcbiAgICAgICAgICAgIGltYWdlID0gcGFnZS5pbWFnZXMubGFyZ2VcblxuICAgICAgICAgICAgU0dOLnV0aWwubG9hZEltYWdlIGltYWdlLCAoZXJyKSA9PlxuICAgICAgICAgICAgICAgIGlmIG5vdCBlcnI/IGFuZCBAZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWFjdGl2ZScpIGlzICd0cnVlJ1xuICAgICAgICAgICAgICAgICAgICBwYWdlRWwuc2V0QXR0cmlidXRlICdkYXRhLWltYWdlJywgcGFnZUVsLnN0eWxlLmJhY2tncm91bmRJbWFnZVxuICAgICAgICAgICAgICAgICAgICBwYWdlRWwuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gXCJ1cmwoI3tpbWFnZX0pXCJcblxuICAgICAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgICAgICByZXR1cm5cblxuICAgICAgICByZXR1cm5cblxuICAgIHpvb21PdXQ6IC0+XG4gICAgICAgIHBhZ2VFbHMgPSBbXS5zbGljZS5jYWxsIEBlbC5xdWVyeVNlbGVjdG9yQWxsKCcuc2duLXBwX19wYWdlW2RhdGEtaW1hZ2VdJylcblxuICAgICAgICBwYWdlRWxzLmZvckVhY2ggKHBhZ2VFbCkgLT5cbiAgICAgICAgICAgIHBhZ2VFbC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBwYWdlRWwuZ2V0QXR0cmlidXRlICdkYXRhLWltYWdlJ1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBwYWdlRWwucmVtb3ZlQXR0cmlidXRlICdkYXRhLWltYWdlJ1xuXG4gICAgICAgICAgICByZXR1cm5cblxuICAgICAgICByZXR1cm5cblxuTWljcm9FdmVudC5taXhpbiBQYWdlZFB1YmxpY2F0aW9uUGFnZVNwcmVhZFxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhZ2VkUHVibGljYXRpb25QYWdlU3ByZWFkXG4iLCJNaWNyb0V2ZW50ID0gcmVxdWlyZSAnbWljcm9ldmVudCdcblBhZ2VTcHJlYWQgPSByZXF1aXJlICcuL3BhZ2Utc3ByZWFkJ1xuU0dOID0gcmVxdWlyZSAnLi4vLi4vc2duJ1xuXG5jbGFzcyBQYWdlZFB1YmxpY2F0aW9uUGFnZVNwcmVhZHNcbiAgICBjb25zdHJ1Y3RvcjogKEBvcHRpb25zKSAtPlxuICAgICAgICBAY29sbGVjdGlvbiA9IFtdXG4gICAgICAgIEBpZHMgPSB7fVxuXG4gICAgICAgIHJldHVyblxuXG4gICAgZ2V0OiAoaWQpIC0+XG4gICAgICAgIEBpZHNbaWRdXG5cbiAgICBnZXRGcmFnOiAtPlxuICAgICAgICBmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG5cbiAgICAgICAgQGNvbGxlY3Rpb24uZm9yRWFjaCAocGFnZVNwcmVhZCkgLT4gZnJhZy5hcHBlbmRDaGlsZCBwYWdlU3ByZWFkLmVsXG5cbiAgICAgICAgZnJhZ1xuXG4gICAgdXBkYXRlOiAocGFnZU1vZGUgPSAnc2luZ2xlJykgLT5cbiAgICAgICAgcGFnZVNwcmVhZHMgPSBbXVxuICAgICAgICBpZHMgPSB7fVxuICAgICAgICBwYWdlcyA9IEBvcHRpb25zLnBhZ2VzLnNsaWNlKClcbiAgICAgICAgd2lkdGggPSBAb3B0aW9ucy53aWR0aFxuICAgICAgICBtYXhab29tU2NhbGUgPSBAb3B0aW9ucy5tYXhab29tU2NhbGVcblxuICAgICAgICBpZiBwYWdlTW9kZSBpcyAnc2luZ2xlJ1xuICAgICAgICAgICAgcGFnZXMuZm9yRWFjaCAocGFnZSkgLT4gcGFnZVNwcmVhZHMucHVzaCBbcGFnZV1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZmlyc3RQYWdlID0gcGFnZXMuc2hpZnQoKVxuICAgICAgICAgICAgbGFzdFBhZ2UgPSBpZiBwYWdlcy5sZW5ndGggJSAyIGlzIDEgdGhlbiBwYWdlcy5wb3AoKSBlbHNlIG51bGxcbiAgICAgICAgICAgIG1pZHN0UGFnZVNwcmVhZHMgPSBTR04udXRpbC5jaHVuayBwYWdlcywgMlxuXG4gICAgICAgICAgICBwYWdlU3ByZWFkcy5wdXNoIFtmaXJzdFBhZ2VdIGlmIGZpcnN0UGFnZT9cbiAgICAgICAgICAgIG1pZHN0UGFnZVNwcmVhZHMuZm9yRWFjaCAobWlkc3RQYWdlcykgLT4gcGFnZVNwcmVhZHMucHVzaCBtaWRzdFBhZ2VzLm1hcCAocGFnZSkgLT4gcGFnZVxuICAgICAgICAgICAgcGFnZVNwcmVhZHMucHVzaCBbbGFzdFBhZ2VdIGlmIGxhc3RQYWdlP1xuXG4gICAgICAgIEBjb2xsZWN0aW9uID0gcGFnZVNwcmVhZHMubWFwIChwYWdlcywgaSkgPT5cbiAgICAgICAgICAgIGlkID0gXCIje3BhZ2VNb2RlfS0je2l9XCJcbiAgICAgICAgICAgIHBhZ2VTcHJlYWQgPSBuZXcgUGFnZVNwcmVhZFxuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgICAgICAgICAgIG1heFpvb21TY2FsZTogbWF4Wm9vbVNjYWxlXG4gICAgICAgICAgICAgICAgcGFnZXM6IHBhZ2VzXG4gICAgICAgICAgICAgICAgaWQ6IGlkXG5cbiAgICAgICAgICAgIHBhZ2VTcHJlYWQuYmluZCAncGFnZUxvYWRlZCcsIChlKSA9PiBAdHJpZ2dlciAncGFnZUxvYWRlZCcsIGVcbiAgICAgICAgICAgIHBhZ2VTcHJlYWQuYmluZCAncGFnZXNMb2FkZWQnLCAoZSkgPT4gQHRyaWdnZXIgJ3BhZ2VzTG9hZGVkJywgZVxuXG4gICAgICAgICAgICBpZHNbaWRdID0gcGFnZVNwcmVhZFxuXG4gICAgICAgICAgICBwYWdlU3ByZWFkXG4gICAgICAgIEBpZHMgPSBpZHNcblxuICAgICAgICBAXG5cbk1pY3JvRXZlbnQubWl4aW4gUGFnZWRQdWJsaWNhdGlvblBhZ2VTcHJlYWRzXG5cbm1vZHVsZS5leHBvcnRzID0gUGFnZWRQdWJsaWNhdGlvblBhZ2VTcHJlYWRzXG4iLCJNaWNyb0V2ZW50ID0gcmVxdWlyZSAnbWljcm9ldmVudCdcblZlcnNvID0gcmVxdWlyZSAndmVyc28tYnJvd3NlcidcblBhZ2VTcHJlYWRzID0gcmVxdWlyZSAnLi9wYWdlLXNwcmVhZHMnXG5jbGllbnRMb2NhbFN0b3JhZ2UgPSByZXF1aXJlICcuLi8uLi9zdG9yYWdlL2NsaWVudC1sb2NhbCdcblNHTiA9IHJlcXVpcmUgJy4uLy4uL3NnbidcblxuY2xhc3MgUGFnZWRQdWJsaWNhdGlvbkNvcmVcbiAgICBkZWZhdWx0czpcbiAgICAgICAgcGFnZXM6IFtdXG4gICAgICAgIHBhZ2VTcHJlYWRXaWR0aDogMTAwXG4gICAgICAgIHBhZ2VTcHJlYWRNYXhab29tU2NhbGU6IDIuM1xuICAgICAgICBpZGxlRGVsYXk6IDEwMDBcbiAgICAgICAgcmVzaXplRGVsYXk6IDQwMFxuICAgICAgICBjb2xvcjogJyNmZmZmZmYnXG5cbiAgICBjb25zdHJ1Y3RvcjogKGVsLCBvcHRpb25zID0ge30pIC0+XG4gICAgICAgIEBvcHRpb25zID0gQG1ha2VPcHRpb25zIG9wdGlvbnMsIEBkZWZhdWx0c1xuICAgICAgICBAcGFnZUlkID0gQGdldE9wdGlvbiAncGFnZUlkJ1xuICAgICAgICBAZWxzID1cbiAgICAgICAgICAgIHJvb3Q6IGVsXG4gICAgICAgICAgICBwYWdlczogZWwucXVlcnlTZWxlY3RvciAnLnNnbi1wcF9fcGFnZXMnXG4gICAgICAgICAgICB2ZXJzbzogZWwucXVlcnlTZWxlY3RvciAnLnZlcnNvJ1xuICAgICAgICBAcGFnZU1vZGUgPSBAZ2V0UGFnZU1vZGUoKVxuICAgICAgICBAcGFnZVNwcmVhZHMgPSBuZXcgUGFnZVNwcmVhZHNcbiAgICAgICAgICAgIHBhZ2VzOiBAZ2V0T3B0aW9uICdwYWdlcydcbiAgICAgICAgICAgIG1heFpvb21TY2FsZTogQGdldE9wdGlvbiAncGFnZVNwcmVhZE1heFpvb21TY2FsZSdcbiAgICAgICAgICAgIHdpZHRoOiBAZ2V0T3B0aW9uICdwYWdlU3ByZWFkV2lkdGgnXG5cbiAgICAgICAgQHBhZ2VTcHJlYWRzLmJpbmQgJ3BhZ2VMb2FkZWQnLCBAcGFnZUxvYWRlZC5iaW5kKEApXG4gICAgICAgIEBwYWdlU3ByZWFkcy5iaW5kICdwYWdlc0xvYWRlZCcsIEBwYWdlc0xvYWRlZC5iaW5kKEApXG5cbiAgICAgICAgQHNldENvbG9yIEBnZXRPcHRpb24oJ2NvbG9yJylcblxuICAgICAgICAjIEl0J3MgaW1wb3J0YW50IHRvIGluc2VydCB0aGUgcGFnZSBzcHJlYWRzIGJlZm9yZSBpbnN0YW50aWF0aW5nIFZlcnNvLlxuICAgICAgICBAZWxzLnBhZ2VzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlIEBwYWdlU3ByZWFkcy51cGRhdGUoQHBhZ2VNb2RlKS5nZXRGcmFnKCksIEBlbHMucGFnZXNcblxuICAgICAgICBAdmVyc28gPSBAY3JlYXRlVmVyc28oKVxuXG4gICAgICAgIEBiaW5kICdzdGFydGVkJywgQHN0YXJ0LmJpbmQoQClcbiAgICAgICAgQGJpbmQgJ2Rlc3Ryb3llZCcsIEBkZXN0cm95LmJpbmQoQClcblxuICAgICAgICByZXR1cm5cblxuICAgIHN0YXJ0OiAtPlxuICAgICAgICBAZ2V0VmVyc28oKS5zdGFydCgpXG5cbiAgICAgICAgQHJlc2l6ZUxpc3RlbmVyID0gU0dOLnV0aWwudGhyb3R0bGUgQHJlc2l6ZSwgQGdldE9wdGlvbigncmVzaXplRGVsYXknKSwgQFxuICAgICAgICBAdW5sb2FkTGlzdGVuZXIgPSBAdW5sb2FkLmJpbmQgQFxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICdyZXNpemUnLCBAcmVzaXplTGlzdGVuZXIsIGZhbHNlXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICdiZWZvcmV1bmxvYWQnLCBAdW5sb2FkTGlzdGVuZXIsIGZhbHNlXG5cbiAgICAgICAgQGVscy5yb290LnNldEF0dHJpYnV0ZSAnZGF0YS1zdGFydGVkJywgJydcbiAgICAgICAgQGVscy5yb290LnNldEF0dHJpYnV0ZSAndGFiaW5kZXgnLCAnLTEnXG4gICAgICAgIEBlbHMucm9vdC5mb2N1cygpXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBkZXN0cm95OiAtPlxuICAgICAgICB2ZXJzbyA9IEBnZXRWZXJzbygpXG4gICAgICAgIHBhZ2VTcHJlYWRFbHMgPSB2ZXJzby5lbC5xdWVyeVNlbGVjdG9yQWxsICcuc2duLXBwX19wYWdlLXNwcmVhZCdcblxuICAgICAgICBAZWxzLnJvb3QucmVtb3ZlQXR0cmlidXRlICdkYXRhLXN0YXJ0ZWQnXG4gICAgICAgIEBlbHMucm9vdC5yZW1vdmVBdHRyaWJ1dGUgJ2RhdGEtaWRsZSdcbiAgICAgICAgQGVscy5yb290LnJlbW92ZUF0dHJpYnV0ZSAnZGF0YS1uYXZpZ2F0aW5nJ1xuICAgICAgICBAZWxzLnJvb3QucmVtb3ZlQXR0cmlidXRlICdkYXRhLWNvbG9yLWJyaWdodG5lc3MnXG4gICAgICAgIEBlbHMucm9vdC5yZW1vdmVBdHRyaWJ1dGUgJ2RhdGEtem9vbWVkLWluJ1xuXG4gICAgICAgIEBlbHMucm9vdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2ZmZmZmZidcblxuICAgICAgICBwYWdlU3ByZWFkRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCBwYWdlU3ByZWFkRWwgZm9yIHBhZ2VTcHJlYWRFbCBpbiBwYWdlU3ByZWFkRWxzXG5cbiAgICAgICAgdmVyc28uZGVzdHJveSgpXG5cbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIgJ3Jlc2l6ZScsIEByZXNpemVMaXN0ZW5lciwgZmFsc2VcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIgJ2JlZm9yZXVubG9hZCcsIEB1bmxvYWRMaXN0ZW5lciwgZmFsc2VcblxuICAgICAgICByZXR1cm5cblxuICAgIG1ha2VPcHRpb25zOiAob3B0aW9ucywgZGVmYXVsdHMpIC0+XG4gICAgICAgIG9wdHMgPSB7fVxuXG4gICAgICAgIG9wdHNba2V5XSA9IG9wdGlvbnNba2V5XSA/IGRlZmF1bHRzW2tleV0gZm9yIGtleSwgdmFsdWUgb2Ygb3B0aW9uc1xuXG4gICAgICAgIG9wdHNcblxuICAgIGdldE9wdGlvbjogKGtleSkgLT5cbiAgICAgICAgQG9wdGlvbnNba2V5XVxuXG4gICAgc2V0Q29sb3I6IChjb2xvcikgLT5cbiAgICAgICAgQGVscy5yb290LnNldEF0dHJpYnV0ZSAnZGF0YS1jb2xvci1icmlnaHRuZXNzJywgU0dOLnV0aWwuZ2V0Q29sb3JCcmlnaHRuZXNzKGNvbG9yKVxuICAgICAgICBAZWxzLnJvb3Quc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3JcblxuICAgICAgICByZXR1cm5cblxuICAgIGNyZWF0ZVZlcnNvOiAtPlxuICAgICAgICB2ZXJzbyA9IG5ldyBWZXJzbyBAZWxzLnZlcnNvLCBwYWdlSWQ6IEBwYWdlSWRcblxuICAgICAgICB2ZXJzby5wYWdlU3ByZWFkcy5mb3JFYWNoIEBvdmVycmlkZVBhZ2VTcHJlYWRDb250ZW50UmVjdC5iaW5kKEApXG5cbiAgICAgICAgdmVyc28uYmluZCAnYmVmb3JlTmF2aWdhdGlvbicsIEBiZWZvcmVOYXZpZ2F0aW9uLmJpbmQoQClcbiAgICAgICAgdmVyc28uYmluZCAnYWZ0ZXJOYXZpZ2F0aW9uJywgQGFmdGVyTmF2aWdhdGlvbi5iaW5kKEApXG4gICAgICAgIHZlcnNvLmJpbmQgJ2F0dGVtcHRlZE5hdmlnYXRpb24nLCBAYXR0ZW1wdGVkTmF2aWdhdGlvbi5iaW5kKEApXG4gICAgICAgIHZlcnNvLmJpbmQgJ2NsaWNrZWQnLCBAY2xpY2tlZC5iaW5kKEApXG4gICAgICAgIHZlcnNvLmJpbmQgJ2RvdWJsZUNsaWNrZWQnLCBAZG91YmxlQ2xpY2tlZC5iaW5kKEApXG4gICAgICAgIHZlcnNvLmJpbmQgJ3ByZXNzZWQnLCBAcHJlc3NlZC5iaW5kKEApXG4gICAgICAgIHZlcnNvLmJpbmQgJ2NvbnRleHRtZW51JywgQGNvbnRleHRtZW51LmJpbmQoQClcbiAgICAgICAgdmVyc28uYmluZCAncGFuU3RhcnQnLCBAcGFuU3RhcnQuYmluZChAKVxuICAgICAgICB2ZXJzby5iaW5kICdwYW5FbmQnLCBAcGFuRW5kLmJpbmQoQClcbiAgICAgICAgdmVyc28uYmluZCAnem9vbWVkSW4nLCBAem9vbWVkSW4uYmluZChAKVxuICAgICAgICB2ZXJzby5iaW5kICd6b29tZWRPdXQnLCBAem9vbWVkT3V0LmJpbmQoQClcblxuICAgICAgICB2ZXJzb1xuXG4gICAgZ2V0VmVyc286IC0+XG4gICAgICAgIEB2ZXJzb1xuXG4gICAgZ2V0Q29udGVudFJlY3Q6IChwYWdlU3ByZWFkKSAtPlxuICAgICAgICByZWN0ID1cbiAgICAgICAgICAgIHRvcDogMFxuICAgICAgICAgICAgbGVmdDogMFxuICAgICAgICAgICAgcmlnaHQ6IDBcbiAgICAgICAgICAgIGJvdHRvbTogMFxuICAgICAgICAgICAgd2lkdGg6IDBcbiAgICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICBwYWdlRWxzID0gcGFnZVNwcmVhZC5nZXRQYWdlRWxzKClcbiAgICAgICAgcGFnZUVsID0gcGFnZUVsc1swXVxuICAgICAgICBwYWdlQ291bnQgPSBwYWdlRWxzLmxlbmd0aFxuXG4gICAgICAgIHJldHVybiByZWN0IGlmIG5vdCBwYWdlQ291bnRcbiAgICAgICAgXG4gICAgICAgIHNjYWxlID0gQGdldFZlcnNvKCkudHJhbnNmb3JtLnNjYWxlXG4gICAgICAgIHBhZ2VXaWR0aCA9IHBhZ2VFbC5vZmZzZXRXaWR0aCAqIHBhZ2VDb3VudCAqIHNjYWxlXG4gICAgICAgIHBhZ2VIZWlnaHQgPSBwYWdlRWwub2Zmc2V0SGVpZ2h0ICogc2NhbGVcbiAgICAgICAgaW1hZ2VSYXRpbyA9ICtwYWdlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLWhlaWdodCcpIC8gKCtwYWdlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXdpZHRoJykgKiBwYWdlQ291bnQpXG4gICAgICAgIGFjdHVhbEhlaWdodCA9IHBhZ2VIZWlnaHRcbiAgICAgICAgYWN0dWFsV2lkdGggPSBhY3R1YWxIZWlnaHQgLyBpbWFnZVJhdGlvXG4gICAgICAgIGFjdHVhbFdpZHRoID0gTWF0aC5taW4gcGFnZVdpZHRoLCBhY3R1YWxXaWR0aFxuICAgICAgICBhY3R1YWxIZWlnaHQgPSBhY3R1YWxXaWR0aCAqIGltYWdlUmF0aW9cbiAgICAgICAgY2xpZW50UmVjdCA9IHBhZ2VFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gICAgICAgIHJlY3Qud2lkdGggPSBhY3R1YWxXaWR0aFxuICAgICAgICByZWN0LmhlaWdodCA9IGFjdHVhbEhlaWdodFxuICAgICAgICByZWN0LnRvcCA9IGNsaWVudFJlY3QudG9wICsgKHBhZ2VIZWlnaHQgLSBhY3R1YWxIZWlnaHQpIC8gMlxuICAgICAgICByZWN0LmxlZnQgPSBjbGllbnRSZWN0LmxlZnQgKyAocGFnZVdpZHRoIC0gYWN0dWFsV2lkdGgpIC8gMlxuICAgICAgICByZWN0LnJpZ2h0ID0gcmVjdC53aWR0aCArIHJlY3QubGVmdFxuICAgICAgICByZWN0LmJvdHRvbSA9IHJlY3QuaGVpZ2h0ICsgcmVjdC50b3BcblxuICAgICAgICByZWN0XG5cbiAgICBmb3JtYXRQcm9ncmVzc0xhYmVsOiAocGFnZVNwcmVhZCkgLT5cbiAgICAgICAgcGFnZXMgPSBwYWdlU3ByZWFkPy5vcHRpb25zLnBhZ2VzID8gW11cbiAgICAgICAgcGFnZUlkcyA9IHBhZ2VzLm1hcCAocGFnZSkgLT4gcGFnZS5pZFxuICAgICAgICBwYWdlTGFiZWxzID0gcGFnZXMubWFwIChwYWdlKSAtPiBwYWdlLmxhYmVsXG4gICAgICAgIHBhZ2VDb3VudCA9IEBnZXRPcHRpb24oJ3BhZ2VzJykubGVuZ3RoXG4gICAgICAgIGxhYmVsID0gaWYgcGFnZUlkcy5sZW5ndGggPiAwIHRoZW4gcGFnZUxhYmVscy5qb2luKCctJykgKyAnIC8gJyArIHBhZ2VDb3VudCBlbHNlIG51bGxcblxuICAgICAgICBsYWJlbFxuXG4gICAgcmVuZGVyUGFnZVNwcmVhZHM6IC0+XG4gICAgICAgIEBnZXRWZXJzbygpLnBhZ2VTcHJlYWRzLmZvckVhY2ggKHBhZ2VTcHJlYWQpID0+XG4gICAgICAgICAgICB2aXNpYmlsaXR5ID0gcGFnZVNwcmVhZC5nZXRWaXNpYmlsaXR5KClcbiAgICAgICAgICAgIG1hdGNoID0gQHBhZ2VTcHJlYWRzLmdldCBwYWdlU3ByZWFkLmdldElkKClcblxuICAgICAgICAgICAgaWYgbWF0Y2g/XG4gICAgICAgICAgICAgICAgaWYgdmlzaWJpbGl0eSBpcyAndmlzaWJsZScgYW5kIG1hdGNoLmNvbnRlbnRzUmVuZGVyZWQgaXMgZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCBtYXRjaC5yZW5kZXJDb250ZW50cy5iaW5kKG1hdGNoKSwgMFxuICAgICAgICAgICAgICAgIGlmIHZpc2liaWxpdHkgaXMgJ2dvbmUnIGFuZCBtYXRjaC5jb250ZW50c1JlbmRlcmVkIGlzIHRydWVcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCBtYXRjaC5jbGVhckNvbnRlbnRzLmJpbmQobWF0Y2gpLCAwXG5cbiAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIEBcblxuICAgIGZpbmRQYWdlOiAocGFnZUlkKSAtPlxuICAgICAgICBAZ2V0T3B0aW9uKCdwYWdlcycpLmZpbmQgKHBhZ2UpIC0+IHBhZ2UuaWQgaXMgcGFnZUlkXG5cbiAgICBwYWdlTG9hZGVkOiAoZSkgLT5cbiAgICAgICAgQHRyaWdnZXIgJ3BhZ2VMb2FkZWQnLCBlXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBwYWdlc0xvYWRlZDogKGUpIC0+XG4gICAgICAgIEB0cmlnZ2VyICdwYWdlc0xvYWRlZCcsIGVcblxuICAgICAgICByZXR1cm5cblxuICAgIGJlZm9yZU5hdmlnYXRpb246IChlKSAtPlxuICAgICAgICBwb3NpdGlvbiA9IGUubmV3UG9zaXRpb25cbiAgICAgICAgdGhlVmVyc28gPSBAZ2V0VmVyc28oKVxuICAgICAgICB2ZXJzb1BhZ2VTcHJlYWQgPSB0aGVWZXJzby5nZXRQYWdlU3ByZWFkRnJvbVBvc2l0aW9uIHBvc2l0aW9uXG4gICAgICAgIHBhZ2VTcHJlYWQgPSBAcGFnZVNwcmVhZHMuZ2V0IHZlcnNvUGFnZVNwcmVhZC5nZXRJZCgpXG4gICAgICAgIHBhZ2VTcHJlYWRDb3VudCA9IHRoZVZlcnNvLmdldFBhZ2VTcHJlYWRDb3VudCgpXG4gICAgICAgIG5ld1NwcmVhZEVsID0gdGhlVmVyc28ucGFnZVNwcmVhZEVsc1tlLm5ld1Bvc2l0aW9uXVxuICAgICAgICBwcm9ncmVzcyA9IHBvc2l0aW9uIC8gKHBhZ2VTcHJlYWRDb3VudCAtIDEpICogMTAwXG4gICAgICAgIHByb2dyZXNzTGFiZWwgPSBAZm9ybWF0UHJvZ3Jlc3NMYWJlbCBwYWdlU3ByZWFkXG5cbiAgICAgICAgQGVscy5yb290LnNldEF0dHJpYnV0ZSAnZGF0YS1uYXZpZ2F0aW5nJywgdHJ1ZVxuXG4gICAgICAgIEByZW5kZXJQYWdlU3ByZWFkcygpXG4gICAgICAgIEByZXNldElkbGVUaW1lcigpXG4gICAgICAgIEBzdGFydElkbGVUaW1lcigpXG4gICAgICAgIEB0cmlnZ2VyICdiZWZvcmVOYXZpZ2F0aW9uJyxcbiAgICAgICAgICAgIHZlcnNvOiBlXG4gICAgICAgICAgICBwYWdlU3ByZWFkOiBwYWdlU3ByZWFkXG4gICAgICAgICAgICBuZXdTcHJlYWRFbDogbmV3U3ByZWFkRWxcbiAgICAgICAgICAgIHByb2dyZXNzOiBwcm9ncmVzc1xuICAgICAgICAgICAgcHJvZ3Jlc3NMYWJlbDogcHJvZ3Jlc3NMYWJlbFxuICAgICAgICAgICAgcGFnZVNwcmVhZENvdW50OiBwYWdlU3ByZWFkQ291bnRcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uSXNFbmQ6IGUubmV3UG9zaXRpb24gKyAxID09IHBhZ2VTcHJlYWRDb3VudFxuXG4gICAgICAgIHJldHVyblxuXG4gICAgYWZ0ZXJOYXZpZ2F0aW9uOiAoZSkgLT5cbiAgICAgICAgcG9zaXRpb24gPSBlLm5ld1Bvc2l0aW9uXG4gICAgICAgIHRoZVZlcnNvID0gQGdldFZlcnNvKClcbiAgICAgICAgdmVyc29QYWdlU3ByZWFkID0gdGhlVmVyc28uZ2V0UGFnZVNwcmVhZEZyb21Qb3NpdGlvbiBwb3NpdGlvblxuICAgICAgICBwYWdlU3ByZWFkID0gQHBhZ2VTcHJlYWRzLmdldCB2ZXJzb1BhZ2VTcHJlYWQuZ2V0SWQoKVxuICAgICAgICBwYWdlU3ByZWFkQ291bnQgPSB0aGVWZXJzby5nZXRQYWdlU3ByZWFkQ291bnQoKVxuICAgICAgICBuZXdTcHJlYWRFbCA9IHRoZVZlcnNvLnBhZ2VTcHJlYWRFbHNbZS5uZXdQb3NpdGlvbl1cblxuICAgICAgICBAZWxzLnJvb3Quc2V0QXR0cmlidXRlICdkYXRhLW5hdmlnYXRpbmcnLCBmYWxzZVxuXG4gICAgICAgIEB0cmlnZ2VyICdhZnRlck5hdmlnYXRpb24nLFxuICAgICAgICAgICAgdmVyc286IGVcbiAgICAgICAgICAgIHBhZ2VTcHJlYWQ6IHBhZ2VTcHJlYWRcbiAgICAgICAgICAgIHBhZ2VTcHJlYWRDb3VudDogcGFnZVNwcmVhZENvdW50XG4gICAgICAgICAgICBuZXdTcHJlYWRFbDogbmV3U3ByZWFkRWxcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uSXNFbmQ6IGUubmV3UG9zaXRpb24gKyAxID09IHBhZ2VTcHJlYWRDb3VudFxuXG4gICAgICAgIHJldHVyblxuXG4gICAgYXR0ZW1wdGVkTmF2aWdhdGlvbjogKGUpIC0+XG4gICAgICAgIEB0cmlnZ2VyICdhdHRlbXB0ZWROYXZpZ2F0aW9uJywgdmVyc286IGVcblxuICAgICAgICByZXR1cm5cblxuICAgIGNsaWNrZWQ6IChlKSAtPlxuICAgICAgICBpZiBlLmlzSW5zaWRlQ29udGVudFxuICAgICAgICAgICAgcGFnZUlkID0gZS5wYWdlRWwuZ2V0QXR0cmlidXRlICdkYXRhLWlkJ1xuICAgICAgICAgICAgcGFnZSA9IEBmaW5kUGFnZSBwYWdlSWRcblxuICAgICAgICAgICAgQHRyaWdnZXIgJ2NsaWNrZWQnLCB2ZXJzbzogZSwgcGFnZTogcGFnZVxuXG4gICAgICAgIHJldHVyblxuXG4gICAgZG91YmxlQ2xpY2tlZDogKGUpIC0+XG4gICAgICAgIGlmIGUuaXNJbnNpZGVDb250ZW50XG4gICAgICAgICAgICBwYWdlSWQgPSBlLnBhZ2VFbC5nZXRBdHRyaWJ1dGUgJ2RhdGEtaWQnXG4gICAgICAgICAgICBwYWdlID0gQGZpbmRQYWdlIHBhZ2VJZFxuXG4gICAgICAgICAgICBAdHJpZ2dlciAnZG91YmxlQ2xpY2tlZCcsIHZlcnNvOiBlLCBwYWdlOiBwYWdlXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBwcmVzc2VkOiAoZSkgLT5cbiAgICAgICAgaWYgZS5pc0luc2lkZUNvbnRlbnRcbiAgICAgICAgICAgIHBhZ2VJZCA9IGUucGFnZUVsLmdldEF0dHJpYnV0ZSAnZGF0YS1pZCdcbiAgICAgICAgICAgIHBhZ2UgPSBAZmluZFBhZ2UgcGFnZUlkXG5cbiAgICAgICAgICAgIEB0cmlnZ2VyICdwcmVzc2VkJywgdmVyc286IGUsIHBhZ2U6IHBhZ2VcblxuICAgICAgICByZXR1cm5cblxuICAgIGNvbnRleHRtZW51OiAoZSkgLT5cbiAgICAgICAgaWYgZS5pc0luc2lkZUNvbnRlbnRcbiAgICAgICAgICAgIHBhZ2VJZCA9IGUucGFnZUVsLmdldEF0dHJpYnV0ZSAnZGF0YS1pZCdcbiAgICAgICAgICAgIHBhZ2UgPSBAZmluZFBhZ2UgcGFnZUlkXG5cbiAgICAgICAgICAgIEB0cmlnZ2VyICdjb250ZXh0bWVudScsIHZlcnNvOiBlLCBwYWdlOiBwYWdlXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBwYW5TdGFydDogLT5cbiAgICAgICAgQHJlc2V0SWRsZVRpbWVyKClcbiAgICAgICAgQHRyaWdnZXIgJ3BhblN0YXJ0Jywgc2NhbGU6IEBnZXRWZXJzbygpLnRyYW5zZm9ybS5zY2FsZVxuXG4gICAgICAgIHJldHVyblxuXG4gICAgcGFuRW5kOiAtPlxuICAgICAgICBAc3RhcnRJZGxlVGltZXIoKVxuICAgICAgICBAdHJpZ2dlciAncGFuRW5kJ1xuXG4gICAgICAgIHJldHVyblxuXG4gICAgem9vbWVkSW46IChlKSAtPlxuICAgICAgICBwb3NpdGlvbiA9IGUucG9zaXRpb25cbiAgICAgICAgdmVyc29QYWdlU3ByZWFkID0gQGdldFZlcnNvKCkuZ2V0UGFnZVNwcmVhZEZyb21Qb3NpdGlvbiBwb3NpdGlvblxuICAgICAgICBwYWdlU3ByZWFkID0gQHBhZ2VTcHJlYWRzLmdldCB2ZXJzb1BhZ2VTcHJlYWQuZ2V0SWQoKVxuXG4gICAgICAgIHBhZ2VTcHJlYWQuem9vbUluKCkgaWYgcGFnZVNwcmVhZD9cblxuICAgICAgICBAZWxzLnJvb3Quc2V0QXR0cmlidXRlICdkYXRhLXpvb21lZC1pbicsIHRydWVcbiAgICAgICAgQHRyaWdnZXIgJ3pvb21lZEluJywgdmVyc286IGUsIHBhZ2VTcHJlYWQ6IHBhZ2VTcHJlYWRcblxuICAgICAgICByZXR1cm5cblxuICAgIHpvb21lZE91dDogKGUpIC0+XG4gICAgICAgIHBvc2l0aW9uID0gZS5wb3NpdGlvblxuICAgICAgICB2ZXJzb1BhZ2VTcHJlYWQgPSBAZ2V0VmVyc28oKS5nZXRQYWdlU3ByZWFkRnJvbVBvc2l0aW9uIHBvc2l0aW9uXG4gICAgICAgIHBhZ2VTcHJlYWQgPSBAcGFnZVNwcmVhZHMuZ2V0IHZlcnNvUGFnZVNwcmVhZC5nZXRJZCgpXG5cbiAgICAgICAgcGFnZVNwcmVhZC56b29tT3V0KCkgaWYgcGFnZVNwcmVhZD9cblxuICAgICAgICBAZWxzLnJvb3Quc2V0QXR0cmlidXRlICdkYXRhLXpvb21lZC1pbicsIGZhbHNlXG4gICAgICAgIEB0cmlnZ2VyICd6b29tZWRPdXQnLCB2ZXJzbzogZSwgcGFnZVNwcmVhZDogcGFnZVNwcmVhZFxuXG4gICAgICAgIHJldHVyblxuXG4gICAgZ2V0UGFnZU1vZGU6IC0+XG4gICAgICAgIHBhZ2VNb2RlID0gQGdldE9wdGlvbiAncGFnZU1vZGUnXG5cbiAgICAgICAgaWYgbm90IHBhZ2VNb2RlP1xuICAgICAgICAgICAgd2lkdGggPSBAZWxzLnJvb3Qub2Zmc2V0V2lkdGhcbiAgICAgICAgICAgIGhlaWdodCA9IEBlbHMucm9vdC5vZmZzZXRIZWlnaHRcblxuICAgICAgICAgICAgcGFnZU1vZGUgPSBpZiBoZWlnaHQgLyB3aWR0aCA8IDAuOCB0aGVuICdkb3VibGUnIGVsc2UgJ3NpbmdsZSdcblxuICAgICAgICBwYWdlTW9kZVxuXG4gICAgcmVzZXRJZGxlVGltZXI6IC0+XG4gICAgICAgIGNsZWFyVGltZW91dCBAaWRsZVRpbWVvdXRcblxuICAgICAgICBAZWxzLnJvb3Quc2V0QXR0cmlidXRlICdkYXRhLWlkbGUnLCBmYWxzZVxuXG4gICAgICAgIEBcblxuICAgIHN0YXJ0SWRsZVRpbWVyOiAtPlxuICAgICAgICBAaWRsZVRpbWVvdXQgPSBzZXRUaW1lb3V0ID0+XG4gICAgICAgICAgICBAZWxzLnJvb3Quc2V0QXR0cmlidXRlICdkYXRhLWlkbGUnLCB0cnVlXG5cbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAsIEBnZXRPcHRpb24oJ2lkbGVEZWxheScpXG5cbiAgICAgICAgQFxuXG4gICAgc3dpdGNoUGFnZU1vZGU6IChwYWdlTW9kZSkgLT5cbiAgICAgICAgcmV0dXJuIEAgaWYgQHBhZ2VNb2RlIGlzIHBhZ2VNb2RlXG5cbiAgICAgICAgdmVyc28gPSBAZ2V0VmVyc28oKVxuICAgICAgICBwYWdlSWRzID0gdmVyc28uZ2V0UGFnZVNwcmVhZEZyb21Qb3NpdGlvbih2ZXJzby5nZXRQb3NpdGlvbigpKS5nZXRQYWdlSWRzKClcbiAgICAgICAgcGFnZVNwcmVhZEVscyA9IEBnZXRWZXJzbygpLmVsLnF1ZXJ5U2VsZWN0b3JBbGwgJy5zZ24tcHBfX3BhZ2Utc3ByZWFkJ1xuXG4gICAgICAgIEBwYWdlTW9kZSA9IHBhZ2VNb2RlXG5cbiAgICAgICAgQHBhZ2VTcHJlYWRzLnVwZGF0ZSBAcGFnZU1vZGVcblxuICAgICAgICBwYWdlU3ByZWFkRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCBwYWdlU3ByZWFkRWwgZm9yIHBhZ2VTcHJlYWRFbCBpbiBwYWdlU3ByZWFkRWxzXG4gICAgICAgIEBlbHMucGFnZXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUgQHBhZ2VTcHJlYWRzLmdldEZyYWcoKSwgQGVscy5wYWdlc1xuXG4gICAgICAgIHZlcnNvLnJlZnJlc2goKVxuICAgICAgICB2ZXJzby5uYXZpZ2F0ZVRvIHZlcnNvLmdldFBhZ2VTcHJlYWRQb3NpdGlvbkZyb21QYWdlSWQocGFnZUlkc1swXSksIGR1cmF0aW9uOiAwXG4gICAgICAgIHZlcnNvLnBhZ2VTcHJlYWRzLmZvckVhY2ggQG92ZXJyaWRlUGFnZVNwcmVhZENvbnRlbnRSZWN0LmJpbmQoQClcblxuICAgICAgICBAXG5cbiAgICBvdmVycmlkZVBhZ2VTcHJlYWRDb250ZW50UmVjdDogKHBhZ2VTcHJlYWQpIC0+XG4gICAgICAgIGlmIHBhZ2VTcHJlYWQuZ2V0VHlwZSgpIGlzICdwYWdlJ1xuICAgICAgICAgICAgcGFnZVNwcmVhZC5nZXRDb250ZW50UmVjdCA9ID0+IEBnZXRDb250ZW50UmVjdCBwYWdlU3ByZWFkXG5cbiAgICByZXNpemU6IC0+XG4gICAgICAgIHBhZ2VNb2RlID0gQGdldFBhZ2VNb2RlKClcblxuICAgICAgICBpZiBub3QgQGdldE9wdGlvbigncGFnZU1vZGUnKT8gYW5kIHBhZ2VNb2RlIGlzbnQgQHBhZ2VNb2RlXG4gICAgICAgICAgICBAc3dpdGNoUGFnZU1vZGUgcGFnZU1vZGVcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQHRyaWdnZXIgJ3Jlc2l6ZWQnXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICB1bmxvYWQ6IC0+XG4gICAgICAgIEB0cmlnZ2VyICdkaXNhcHBlYXJlZCdcblxuICAgICAgICByZXR1cm5cblxuTWljcm9FdmVudC5taXhpbiBQYWdlZFB1YmxpY2F0aW9uQ29yZVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhZ2VkUHVibGljYXRpb25Db3JlXG4iLCJNaWNyb0V2ZW50ID0gcmVxdWlyZSAnbWljcm9ldmVudCdcbk11c3RhY2hlID0gcmVxdWlyZSAnbXVzdGFjaGUnXG5cbmNsYXNzIFBhZ2VkUHVibGljYXRpb25Ib3RzcG90c1xuICAgIGNvbnN0cnVjdG9yOiAtPlxuICAgICAgICBAY3VycmVudFBhZ2VTcHJlYWRJZCA9IG51bGxcbiAgICAgICAgQHBhZ2VTcHJlYWRzTG9hZGVkID0ge31cbiAgICAgICAgQGNhY2hlID0ge31cblxuICAgICAgICBAYmluZCAnaG90c3BvdHNSZWNlaXZlZCcsIEBob3RzcG90c1JlY2VpdmVkLmJpbmQoQClcbiAgICAgICAgQGJpbmQgJ2FmdGVyTmF2aWdhdGlvbicsIEBhZnRlck5hdmlnYXRpb24uYmluZChAKVxuICAgICAgICBAYmluZCAncGFnZXNMb2FkZWQnLCBAcGFnZXNMb2FkZWQuYmluZChAKVxuICAgICAgICBAYmluZCAncmVzaXplZCcsIEByZXNpemVkLmJpbmQoQClcblxuICAgICAgICByZXR1cm5cblxuICAgIHJlbmRlckhvdHNwb3RzOiAoZGF0YSkgLT5cbiAgICAgICAgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKVxuICAgICAgICBjb250ZW50UmVjdCA9IGRhdGEudmVyc29QYWdlU3ByZWFkLmdldENvbnRlbnRSZWN0KClcbiAgICAgICAgcGFnZVNwcmVhZEVsID0gZGF0YS5wYWdlU3ByZWFkLmdldEVsKClcbiAgICAgICAgaG90c3BvdEVscyA9IHBhZ2VTcHJlYWRFbC5xdWVyeVNlbGVjdG9yQWxsICcuc2duLXBwX19ob3RzcG90J1xuICAgICAgICBib3VuZGluZ1JlY3QgPSBwYWdlU3ByZWFkRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICAgICAgICBob3RzcG90RWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCBob3RzcG90RWwgZm9yIGhvdHNwb3RFbCBpbiBob3RzcG90RWxzXG5cbiAgICAgICAgZm9yIGlkLCBob3RzcG90IG9mIGRhdGEuaG90c3BvdHNcbiAgICAgICAgICAgIHBvc2l0aW9uID0gQGdldFBvc2l0aW9uIGRhdGEucGFnZXMsIGRhdGEucmF0aW8sIGhvdHNwb3RcbiAgICAgICAgICAgIGVsID0gQHJlbmRlckhvdHNwb3QgaG90c3BvdCwgcG9zaXRpb24sIGNvbnRlbnRSZWN0LCBib3VuZGluZ1JlY3RcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZCBlbFxuXG4gICAgICAgIHBhZ2VTcHJlYWRFbC5hcHBlbmRDaGlsZCBmcmFnXG5cbiAgICAgICAgQFxuXG4gICAgcmVuZGVySG90c3BvdDogKGhvdHNwb3QsIHBvc2l0aW9uLCBjb250ZW50UmVjdCwgYm91bmRpbmdSZWN0KSAtPlxuICAgICAgICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ2RpdidcbiAgICAgICAgdG9wID0gTWF0aC5yb3VuZCBjb250ZW50UmVjdC5oZWlnaHQgLyAxMDAgKiBwb3NpdGlvbi50b3BcbiAgICAgICAgbGVmdCA9IE1hdGgucm91bmQgY29udGVudFJlY3Qud2lkdGggLyAxMDAgKiBwb3NpdGlvbi5sZWZ0XG4gICAgICAgIHdpZHRoID0gTWF0aC5yb3VuZCBjb250ZW50UmVjdC53aWR0aCAvIDEwMCAqIHBvc2l0aW9uLndpZHRoXG4gICAgICAgIGhlaWdodCA9IE1hdGgucm91bmQgY29udGVudFJlY3QuaGVpZ2h0IC8gMTAwICogcG9zaXRpb24uaGVpZ2h0XG5cbiAgICAgICAgdG9wICs9IE1hdGgucm91bmQgY29udGVudFJlY3QudG9wXG4gICAgICAgIGxlZnQgKz0gTWF0aC5yb3VuZCBjb250ZW50UmVjdC5sZWZ0XG4gICAgICAgIHRvcCAtPSBib3VuZGluZ1JlY3QudG9wXG4gICAgICAgIGxlZnQgLT0gYm91bmRpbmdSZWN0LmxlZnRcblxuICAgICAgICBlbC5jbGFzc05hbWUgPSAnc2duLXBwX19ob3RzcG90IHZlcnNvX19vdmVybGF5J1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUgJ2RhdGEtaWQnLCBob3RzcG90LmlkIGlmIGhvdHNwb3QuaWQ/XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSAnZGF0YS10eXBlJywgaG90c3BvdC50eXBlIGlmIGhvdHNwb3QudHlwZT9cbiAgICAgICAgZWwuaW5uZXJIVE1MID0gTXVzdGFjaGUucmVuZGVyICcnLCBob3RzcG90XG5cbiAgICAgICAgZWwuc3R5bGUudG9wID0gXCIje3RvcH1weFwiXG4gICAgICAgIGVsLnN0eWxlLmxlZnQgPSBcIiN7bGVmdH1weFwiXG4gICAgICAgIGVsLnN0eWxlLndpZHRoID0gXCIje3dpZHRofXB4XCJcbiAgICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gXCIje2hlaWdodH1weFwiXG5cbiAgICAgICAgZWxcblxuICAgIGdldFBvc2l0aW9uOiAocGFnZXMsIHJhdGlvLCBob3RzcG90KSAtPlxuICAgICAgICBtaW5YID0gbnVsbFxuICAgICAgICBtaW5ZID0gbnVsbFxuICAgICAgICBtYXhYID0gbnVsbFxuICAgICAgICBtYXhZID0gbnVsbFxuICAgICAgICBwYWdlTnVtYmVycyA9IHBhZ2VzLm1hcCAocGFnZSkgLT4gcGFnZS5wYWdlTnVtYmVyXG5cbiAgICAgICAgZm9yIHBhZ2VOdW1iZXIgb2YgaG90c3BvdC5sb2NhdGlvbnNcbiAgICAgICAgICAgIGNvbnRpbnVlIGlmIHBhZ2VOdW1iZXJzLmluZGV4T2YoK3BhZ2VOdW1iZXIpIGlzIC0xXG5cbiAgICAgICAgICAgIGhvdHNwb3QubG9jYXRpb25zW3BhZ2VOdW1iZXJdLmZvckVhY2ggKGNvb3JkcykgLT5cbiAgICAgICAgICAgICAgICB4ID0gY29vcmRzWzBdXG4gICAgICAgICAgICAgICAgeSA9IGNvb3Jkc1sxXVxuXG4gICAgICAgICAgICAgICAgeCArPTEgaWYgcGFnZXNbMV0gYW5kIHBhZ2VOdW1iZXJzWzFdIGlzICtwYWdlTnVtYmVyXG4gICAgICAgICAgICAgICAgeCAvPSBwYWdlcy5sZW5ndGhcblxuICAgICAgICAgICAgICAgIGlmIG5vdCBtaW5YP1xuICAgICAgICAgICAgICAgICAgICBtaW5YID0gbWF4WCA9IHhcbiAgICAgICAgICAgICAgICAgICAgbWluWSA9IG1heFkgPSB5XG5cbiAgICAgICAgICAgICAgICBtaW5YID0geCBpZiB4IDwgbWluWFxuICAgICAgICAgICAgICAgIG1heFggPSB4IGlmIHggPiBtYXhYXG4gICAgICAgICAgICAgICAgbWluWSA9IHkgaWYgeSA8IG1pbllcbiAgICAgICAgICAgICAgICBtYXhZID0geSBpZiB5ID4gbWF4WVxuXG4gICAgICAgIHdpZHRoID0gbWF4WCAtIG1pblhcbiAgICAgICAgaGVpZ2h0ID0gbWF4WSAtIG1pbllcblxuICAgICAgICB0b3A6IG1pblkgLyByYXRpbyAqIDEwMFxuICAgICAgICBsZWZ0OiBtaW5YICogMTAwXG4gICAgICAgIHdpZHRoOiB3aWR0aCAqIDEwMFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCAvIHJhdGlvICogMTAwXG5cbiAgICByZXF1ZXN0SG90c3BvdHM6IChwYWdlU3ByZWFkSWQsIHBhZ2VzKSAtPlxuICAgICAgICBAdHJpZ2dlciAnaG90c3BvdHNSZXF1ZXN0ZWQnLFxuICAgICAgICAgICAgaWQ6IHBhZ2VTcHJlYWRJZFxuICAgICAgICAgICAgcGFnZXM6IHBhZ2VzXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBob3RzcG90c1JlY2VpdmVkOiAoZSkgLT5cbiAgICAgICAgcGFnZVNwcmVhZElkID0gZS5wYWdlU3ByZWFkLmdldElkKClcblxuICAgICAgICBAc2V0Q2FjaGUgcGFnZVNwcmVhZElkLCBlXG4gICAgICAgIEByZW5kZXJIb3RzcG90cyBlXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBnZXRDYWNoZTogKHBhZ2VTcHJlYWRJZCkgLT5cbiAgICAgICAgQGNhY2hlW3BhZ2VTcHJlYWRJZF1cblxuICAgIHNldENhY2hlOiAocGFnZVNwcmVhZElkLCBkYXRhKSAtPlxuICAgICAgICBAY2FjaGVbcGFnZVNwcmVhZElkXSA9IGRhdGFcblxuICAgICAgICBAXG5cbiAgICBhZnRlck5hdmlnYXRpb246IChlKSAtPlxuICAgICAgICByZXR1cm4gaWYgbm90IGUucGFnZVNwcmVhZD9cblxuICAgICAgICBpZCA9IGUucGFnZVNwcmVhZC5nZXRJZCgpXG5cbiAgICAgICAgQGN1cnJlbnRQYWdlU3ByZWFkSWQgPSBpZFxuICAgICAgICBAcmVxdWVzdEhvdHNwb3RzIGlkLCBlLnBhZ2VTcHJlYWQuZ2V0UGFnZXMoKSBpZiBAcGFnZVNwcmVhZHNMb2FkZWRbaWRdXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBwYWdlc0xvYWRlZDogKGUpIC0+XG4gICAgICAgIEBwYWdlU3ByZWFkc0xvYWRlZFtlLnBhZ2VTcHJlYWRJZF0gPSB0cnVlXG4gICAgICAgIEByZXF1ZXN0SG90c3BvdHMgZS5wYWdlU3ByZWFkSWQsIGUucGFnZXMgaWYgQGN1cnJlbnRQYWdlU3ByZWFkSWQgaXMgZS5wYWdlU3ByZWFkSWRcblxuICAgICAgICByZXR1cm5cblxuICAgIHJlc2l6ZWQ6IChlKSAtPlxuICAgICAgICBkYXRhID0gQGdldENhY2hlIEBjdXJyZW50UGFnZVNwcmVhZElkXG5cbiAgICAgICAgQHJlbmRlckhvdHNwb3RzIGRhdGEgaWYgZGF0YT9cblxuICAgICAgICByZXR1cm5cblxuTWljcm9FdmVudC5taXhpbiBQYWdlZFB1YmxpY2F0aW9uSG90c3BvdHNcblxubW9kdWxlLmV4cG9ydHMgPSBQYWdlZFB1YmxpY2F0aW9uSG90c3BvdHNcblxuXG4iLCJtb2R1bGUuZXhwb3J0cyA9XG4gICAgRVNDOiAyN1xuICAgIEFSUk9XX1JJR0hUOiAzOVxuICAgIEFSUk9XX0xFRlQ6IDM3XG4gICAgU1BBQ0U6IDMyXG4gICAgTlVNQkVSX09ORTogNDlcbiIsIk1pY3JvRXZlbnQgPSByZXF1aXJlICdtaWNyb2V2ZW50J1xuU0dOID0gcmVxdWlyZSAnLi4vLi4vc2duJ1xua2V5Q29kZXMgPSByZXF1aXJlICcuLi8uLi9rZXktY29kZXMnXG5cbmNsYXNzIFBhZ2VkUHVibGljYXRpb25Db250cm9sc1xuICAgIGNvbnN0cnVjdG9yOiAoZWwsIEBvcHRpb25zID0ge30pIC0+XG4gICAgICAgIEBlbHMgPVxuICAgICAgICAgICAgcm9vdDogZWxcbiAgICAgICAgICAgIHByb2dyZXNzOiBlbC5xdWVyeVNlbGVjdG9yICcuc2duLXBwX19wcm9ncmVzcydcbiAgICAgICAgICAgIHByb2dyZXNzQmFyOiBlbC5xdWVyeVNlbGVjdG9yICcuc2duLXBwLXByb2dyZXNzX19iYXInXG4gICAgICAgICAgICBwcm9ncmVzc0xhYmVsOiBlbC5xdWVyeVNlbGVjdG9yICcuc2duLXBwX19wcm9ncmVzcy1sYWJlbCdcbiAgICAgICAgICAgIHByZXZDb250cm9sOiBlbC5xdWVyeVNlbGVjdG9yICcuc2duLXBwX19jb250cm9sW2RhdGEtZGlyZWN0aW9uPXByZXZdJ1xuICAgICAgICAgICAgbmV4dENvbnRyb2w6IGVsLnF1ZXJ5U2VsZWN0b3IgJy5zZ24tcHBfX2NvbnRyb2xbZGF0YS1kaXJlY3Rpb249bmV4dF0nXG4gICAgICAgICAgICBjbG9zZTogZWwucXVlcnlTZWxlY3RvciAnLnNnbi1wcC0tY2xvc2UnXG5cbiAgICAgICAgQGtleURvd25MaXN0ZW5lciA9IFNHTi51dGlsLnRocm90dGxlIEBrZXlEb3duLCAxNTAsIEBcblxuICAgICAgICBAZWxzLnJvb3QuYWRkRXZlbnRMaXN0ZW5lciAna2V5ZG93bicsIEBrZXlEb3duTGlzdGVuZXIsIGZhbHNlIGlmIEBvcHRpb25zLmtleWJvYXJkIGlzIHRydWVcbiAgICAgICAgQGVscy5wcmV2Q29udHJvbC5hZGRFdmVudExpc3RlbmVyICdtb3VzZWRvd24nLCBAcHJldkNsaWNrZWQuYmluZChAKSwgZmFsc2UgaWYgQGVscy5wcmV2Q29udHJvbD9cbiAgICAgICAgQGVscy5uZXh0Q29udHJvbC5hZGRFdmVudExpc3RlbmVyICdtb3VzZWRvd24nLCBAbmV4dENsaWNrZWQuYmluZChAKSwgZmFsc2UgaWYgQGVscy5uZXh0Q29udHJvbD9cbiAgICAgICAgQGVscy5jbG9zZS5hZGRFdmVudExpc3RlbmVyICdtb3VzZWRvd24nLCBAY2xvc2VDbGlja2VkLmJpbmQoQCksIGZhbHNlIGlmIEBlbHMuY2xvc2U/XG5cbiAgICAgICAgQGJpbmQgJ2JlZm9yZU5hdmlnYXRpb24nLCBAYmVmb3JlTmF2aWdhdGlvbi5iaW5kKEApXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBkZXN0cm95OiAtPlxuICAgICAgICBAZWxzLnJvb3QucmVtb3ZlRXZlbnRMaXN0ZW5lciAna2V5ZG93bicsIEBrZXlEb3duTGlzdGVuZXJcblxuICAgICAgICByZXR1cm5cblxuICAgIGJlZm9yZU5hdmlnYXRpb246IChlKSAtPlxuICAgICAgICBzaG93UHJvZ3Jlc3MgPSB0eXBlb2YgZS5wcm9ncmVzc0xhYmVsIGlzICdzdHJpbmcnIGFuZCBlLnByb2dyZXNzTGFiZWwubGVuZ3RoID4gMFxuICAgICAgICB2aXNpYmlsaXR5Q2xhc3NOYW1lID0gJ3Nnbi1wcC0taGlkZGVuJ1xuXG4gICAgICAgIGlmIEBlbHMucHJvZ3Jlc3M/IGFuZCBAZWxzLnByb2dyZXNzQmFyP1xuICAgICAgICAgICAgQGVscy5wcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IFwiI3tlLnByb2dyZXNzfSVcIlxuXG4gICAgICAgICAgICBpZiBzaG93UHJvZ3Jlc3MgaXMgdHJ1ZVxuICAgICAgICAgICAgICAgIEBlbHMucHJvZ3Jlc3MuY2xhc3NMaXN0LnJlbW92ZSB2aXNpYmlsaXR5Q2xhc3NOYW1lXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgQGVscy5wcm9ncmVzcy5jbGFzc0xpc3QuYWRkIHZpc2liaWxpdHlDbGFzc05hbWVcblxuICAgICAgICBpZiBAZWxzLnByb2dyZXNzTGFiZWw/XG4gICAgICAgICAgICBpZiBzaG93UHJvZ3Jlc3MgaXMgdHJ1ZVxuICAgICAgICAgICAgICAgIEBlbHMucHJvZ3Jlc3NMYWJlbC50ZXh0Q29udGVudCA9IGUucHJvZ3Jlc3NMYWJlbFxuICAgICAgICAgICAgICAgIEBlbHMucHJvZ3Jlc3NMYWJlbC5jbGFzc0xpc3QucmVtb3ZlIHZpc2liaWxpdHlDbGFzc05hbWVcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBAZWxzLnByb2dyZXNzTGFiZWwuY2xhc3NMaXN0LmFkZCB2aXNpYmlsaXR5Q2xhc3NOYW1lXG5cbiAgICAgICAgaWYgQGVscy5wcmV2Q29udHJvbD9cbiAgICAgICAgICAgIGlmIGUudmVyc28ubmV3UG9zaXRpb24gaXMgMFxuICAgICAgICAgICAgICAgIEBlbHMucHJldkNvbnRyb2wuY2xhc3NMaXN0LmFkZCB2aXNpYmlsaXR5Q2xhc3NOYW1lXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgQGVscy5wcmV2Q29udHJvbC5jbGFzc0xpc3QucmVtb3ZlIHZpc2liaWxpdHlDbGFzc05hbWVcblxuICAgICAgICBpZiBAZWxzLm5leHRDb250cm9sP1xuICAgICAgICAgICAgaWYgZS52ZXJzby5uZXdQb3NpdGlvbiBpcyBlLnBhZ2VTcHJlYWRDb3VudCAtIDFcbiAgICAgICAgICAgICAgICBAZWxzLm5leHRDb250cm9sLmNsYXNzTGlzdC5hZGQgdmlzaWJpbGl0eUNsYXNzTmFtZVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIEBlbHMubmV4dENvbnRyb2wuY2xhc3NMaXN0LnJlbW92ZSB2aXNpYmlsaXR5Q2xhc3NOYW1lXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBwcmV2Q2xpY2tlZDogKGUpIC0+XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgICAgIEB0cmlnZ2VyICdwcmV2J1xuXG4gICAgICAgIHJldHVyblxuXG4gICAgbmV4dENsaWNrZWQ6IChlKSAtPlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgICBAdHJpZ2dlciAnbmV4dCdcblxuICAgICAgICByZXR1cm5cbiAgICBcbiAgICBjbG9zZUNsaWNrZWQ6IChlKSAtPlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgICBAdHJpZ2dlciAnY2xvc2UnXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBrZXlEb3duOiAoZSkgLT5cbiAgICAgICAga2V5Q29kZSA9IGUua2V5Q29kZVxuXG4gICAgICAgIGlmIGtleUNvZGVzLkFSUk9XX0xFRlQgaXMga2V5Q29kZVxuICAgICAgICAgICAgQHRyaWdnZXIgJ3ByZXYnLCBkdXJhdGlvbjogMFxuICAgICAgICBlbHNlIGlmIGtleUNvZGVzLkFSUk9XX1JJR0hUIGlzIGtleUNvZGUgb3Iga2V5Q29kZXMuU1BBQ0UgaXMga2V5Q29kZVxuICAgICAgICAgICAgQHRyaWdnZXIgJ25leHQnLCBkdXJhdGlvbjogMFxuICAgICAgICBlbHNlIGlmIGtleUNvZGVzLk5VTUJFUl9PTkUgaXMga2V5Q29kZVxuICAgICAgICAgICAgQHRyaWdnZXIgJ2ZpcnN0JywgZHVyYXRpb246IDBcblxuICAgICAgICByZXR1cm5cblxuTWljcm9FdmVudC5taXhpbiBQYWdlZFB1YmxpY2F0aW9uQ29udHJvbHNcblxubW9kdWxlLmV4cG9ydHMgPSBQYWdlZFB1YmxpY2F0aW9uQ29udHJvbHNcbiIsIk1pY3JvRXZlbnQgPSByZXF1aXJlICdtaWNyb2V2ZW50J1xuXG5jbGFzcyBQYWdlZFB1YmxpY2F0aW9uRXZlbnRUcmFja2luZ1xuICAgIGNvbnN0cnVjdG9yOiAoQGV2ZW50VHJhY2tlciwgQGlkKSAtPlxuICAgICAgICBAaGlkZGVuID0gdHJ1ZVxuICAgICAgICBAcGFnZVNwcmVhZCA9IG51bGxcblxuICAgICAgICBAYmluZCAnYXBwZWFyZWQnLCBAYXBwZWFyZWQuYmluZChAKVxuICAgICAgICBAYmluZCAnZGlzYXBwZWFyZWQnLCBAZGlzYXBwZWFyZWQuYmluZChAKVxuICAgICAgICBAYmluZCAnYmVmb3JlTmF2aWdhdGlvbicsIEBiZWZvcmVOYXZpZ2F0aW9uLmJpbmQoQClcbiAgICAgICAgQGJpbmQgJ2FmdGVyTmF2aWdhdGlvbicsIEBhZnRlck5hdmlnYXRpb24uYmluZChAKVxuICAgICAgICBAYmluZCAnYXR0ZW1wdGVkTmF2aWdhdGlvbicsIEBhdHRlbXB0ZWROYXZpZ2F0aW9uLmJpbmQoQClcbiAgICAgICAgQGJpbmQgJ3BhblN0YXJ0JywgQHBhblN0YXJ0LmJpbmQoQClcbiAgICAgICAgQGJpbmQgJ2Rlc3Ryb3llZCcsIEBkZXN0cm95LmJpbmQoQClcblxuICAgICAgICByZXR1cm5cblxuICAgIGRlc3Ryb3k6IC0+XG4gICAgICAgIEBwYWdlU3ByZWFkRGlzYXBwZWFyZWQoKVxuXG4gICAgICAgIHJldHVyblxuXG4gICAgdHJhY2tPcGVuZWQ6IChwcm9wZXJ0aWVzKSAtPlxuICAgICAgICByZXR1cm4gQCBpZiBub3QgQGV2ZW50VHJhY2tlcj9cblxuICAgICAgICBAZXZlbnRUcmFja2VyLnRyYWNrUGFnZWRQdWJsaWNhdGlvbk9wZW5lZFxuICAgICAgICAgICAgJ3BwLmlkJzogQGlkXG4gICAgICAgICAgICAndnQnOiBAZXZlbnRUcmFja2VyLmNyZWF0ZVZpZXdUb2tlbihAaWQpXG5cbiAgICAgICAgQFxuXG4gICAgdHJhY2tQYWdlU3ByZWFkRGlzYXBwZWFyZWQ6IChwYWdlTnVtYmVycykgLT5cbiAgICAgICAgcmV0dXJuIEAgaWYgbm90IEBldmVudFRyYWNrZXI/XG4gICAgICAgIFxuICAgICAgICBwYWdlTnVtYmVycy5mb3JFYWNoIChwYWdlTnVtYmVyKSA9PlxuICAgICAgICAgICAgQGV2ZW50VHJhY2tlci50cmFja1BhZ2VkUHVibGljYXRpb25QYWdlRGlzYXBwZWFyZWRcbiAgICAgICAgICAgICAgICAncHAuaWQnOiBAaWRcbiAgICAgICAgICAgICAgICAncHBwLm4nOiBwYWdlTnVtYmVyXG4gICAgICAgICAgICAgICAgJ3Z0JzogQGV2ZW50VHJhY2tlci5jcmVhdGVWaWV3VG9rZW4oQGlkLCBwYWdlTnVtYmVyKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm5cblxuICAgICAgICBAXG5cbiAgICBhcHBlYXJlZDogKGUpIC0+XG4gICAgICAgIEBwYWdlU3ByZWFkQXBwZWFyZWQgZS5wYWdlU3ByZWFkXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBkaXNhcHBlYXJlZDogLT5cbiAgICAgICAgQHBhZ2VTcHJlYWREaXNhcHBlYXJlZCgpXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBiZWZvcmVOYXZpZ2F0aW9uOiAtPlxuICAgICAgICBAcGFnZVNwcmVhZERpc2FwcGVhcmVkKClcblxuICAgICAgICByZXR1cm5cblxuICAgIGFmdGVyTmF2aWdhdGlvbjogKGUpIC0+XG4gICAgICAgIEBwYWdlU3ByZWFkQXBwZWFyZWQgZS5wYWdlU3ByZWFkXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBhdHRlbXB0ZWROYXZpZ2F0aW9uOiAoZSkgLT5cbiAgICAgICAgQHBhZ2VTcHJlYWRBcHBlYXJlZCBlLnBhZ2VTcHJlYWRcblxuICAgICAgICByZXR1cm5cblxuICAgIHBhblN0YXJ0OiAoZSkgLT5cbiAgICAgICAgQHBhZ2VTcHJlYWREaXNhcHBlYXJlZCgpIGlmIGUuc2NhbGUgaXMgMVxuXG4gICAgICAgIHJldHVyblxuXG4gICAgcGFnZVNwcmVhZEFwcGVhcmVkOiAocGFnZVNwcmVhZCkgLT5cbiAgICAgICAgaWYgcGFnZVNwcmVhZD8gYW5kIEBoaWRkZW4gaXMgdHJ1ZVxuICAgICAgICAgICAgQHBhZ2VTcHJlYWQgPSBwYWdlU3ByZWFkXG4gICAgICAgICAgICBAaGlkZGVuID0gZmFsc2VcblxuICAgICAgICByZXR1cm5cblxuICAgIHBhZ2VTcHJlYWREaXNhcHBlYXJlZDogLT5cbiAgICAgICAgaWYgQHBhZ2VTcHJlYWQ/IGFuZCBAaGlkZGVuIGlzIGZhbHNlXG4gICAgICAgICAgICBAdHJhY2tQYWdlU3ByZWFkRGlzYXBwZWFyZWQgQHBhZ2VTcHJlYWQuZ2V0UGFnZXMoKS5tYXAgKHBhZ2UpIC0+IHBhZ2UucGFnZU51bWJlclxuXG4gICAgICAgICAgICBAaGlkZGVuID0gdHJ1ZVxuICAgICAgICAgICAgQHBhZ2VTcHJlYWQgPSBudWxsXG5cbiAgICAgICAgcmV0dXJuXG5cbk1pY3JvRXZlbnQubWl4aW4gUGFnZWRQdWJsaWNhdGlvbkV2ZW50VHJhY2tpbmdcblxubW9kdWxlLmV4cG9ydHMgPSBQYWdlZFB1YmxpY2F0aW9uRXZlbnRUcmFja2luZyIsIk1pY3JvRXZlbnQgPSByZXF1aXJlICdtaWNyb2V2ZW50J1xuU0dOID0gcmVxdWlyZSAnLi4vLi4vc2duJ1xuQ29yZSA9IHJlcXVpcmUgJy4vY29yZSdcbkhvdHNwb3RzID0gcmVxdWlyZSAnLi9ob3RzcG90cydcbkNvbnRyb2xzID0gcmVxdWlyZSAnLi9jb250cm9scydcbkV2ZW50VHJhY2tpbmcgPSByZXF1aXJlICcuL2V2ZW50LXRyYWNraW5nJ1xuXG5jbGFzcyBWaWV3ZXJcbiAgICBjb25zdHJ1Y3RvcjogKEBlbCwgQG9wdGlvbnMgPSB7fSkgLT5cbiAgICAgICAgQF9jb3JlID0gbmV3IENvcmUgQGVsLFxuICAgICAgICAgICAgaWQ6IEBvcHRpb25zLmlkXG4gICAgICAgICAgICBwYWdlczogQG9wdGlvbnMucGFnZXNcbiAgICAgICAgICAgIHBhZ2VTcHJlYWRXaWR0aDogQG9wdGlvbnMucGFnZVNwcmVhZFdpZHRoXG4gICAgICAgICAgICBwYWdlU3ByZWFkTWF4Wm9vbVNjYWxlOiBAb3B0aW9ucy5wYWdlU3ByZWFkTWF4Wm9vbVNjYWxlXG4gICAgICAgICAgICBwYWdlSWQ6IEBvcHRpb25zLnBhZ2VJZFxuICAgICAgICAgICAgaWRsZURlbGF5OiBAb3B0aW9ucy5pZGxlRGVsYXlcbiAgICAgICAgICAgIHJlc2l6ZURlbGF5OiBAb3B0aW9ucy5yZXNpemVEZWxheVxuICAgICAgICAgICAgY29sb3I6IEBvcHRpb25zLmNvbG9yXG4gICAgICAgIEBfaG90c3BvdHMgPSBuZXcgSG90c3BvdHMoKVxuICAgICAgICBAX2NvbnRyb2xzID0gbmV3IENvbnRyb2xzIEBlbCwga2V5Ym9hcmQ6IEBvcHRpb25zLmtleWJvYXJkXG4gICAgICAgIEBfZXZlbnRUcmFja2luZyA9IG5ldyBFdmVudFRyYWNraW5nIEBvcHRpb25zLmV2ZW50VHJhY2tlciwgQG9wdGlvbnMuaWRcbiAgICAgICAgQHZpZXdTZXNzaW9uID0gU0dOLnV0aWwudXVpZCgpXG4gICAgICAgIEBob3RzcG90cyA9IG51bGxcbiAgICAgICAgQGhvdHNwb3RRdWV1ZSA9IFtdXG4gICAgICAgIEBwb3BvdmVyID0gbnVsbFxuXG4gICAgICAgIEBfc2V0dXBFdmVudExpc3RlbmVycygpXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBzdGFydDogLT5cbiAgICAgICAgQF9ldmVudFRyYWNraW5nLnRyYWNrT3BlbmVkKClcbiAgICAgICAgQF9jb3JlLnRyaWdnZXIgJ3N0YXJ0ZWQnXG5cbiAgICAgICAgQFxuXG4gICAgZGVzdHJveTogLT5cbiAgICAgICAgQF9jb3JlLnRyaWdnZXIgJ2Rlc3Ryb3llZCdcbiAgICAgICAgQF9ob3RzcG90cy50cmlnZ2VyICdkZXN0cm95ZWQnXG4gICAgICAgIEBfY29udHJvbHMudHJpZ2dlciAnZGVzdHJveWVkJ1xuICAgICAgICBAX2V2ZW50VHJhY2tpbmcudHJpZ2dlciAnZGVzdHJveWVkJ1xuXG4gICAgICAgIEB0cmlnZ2VyICdkZXN0cm95ZWQnXG5cbiAgICAgICAgQFxuXG4gICAgbmF2aWdhdGVUbzogKHBvc2l0aW9uLCBvcHRpb25zKSAtPlxuICAgICAgICBAbmF2aWdhdGVUb0luZGV4IHBvc2l0aW9uLCBvcHRpb25zXG5cbiAgICAgICAgQFxuXG4gICAgbmF2aWdhdGVUb0luZGV4OiAocG9zaXRpb24sIG9wdGlvbnMpIC0+XG4gICAgICAgIEBfY29yZS5nZXRWZXJzbygpLm5hdmlnYXRlVG8gcG9zaXRpb24sIG9wdGlvbnNcblxuICAgICAgICBAXG4gICAgXG4gICAgbmF2aWdhdGVUb1BhZ2VJZDogKHBhZ2VJZCwgb3B0aW9ucykgLT5cbiAgICAgICAgcG9zaXRpb24gPSBAX2NvcmUuZ2V0VmVyc28oKS5nZXRQYWdlU3ByZWFkUG9zaXRpb25Gcm9tUGFnZUlkIHBhZ2VJZFxuICAgICAgICBcbiAgICAgICAgQF9jb3JlLmdldFZlcnNvKCkubmF2aWdhdGVUbyBwb3NpdGlvbiwgb3B0aW9uc1xuXG4gICAgZmlyc3Q6IChvcHRpb25zKSAtPlxuICAgICAgICBAX2NvcmUuZ2V0VmVyc28oKS5maXJzdCBvcHRpb25zXG5cbiAgICAgICAgQFxuXG4gICAgcHJldjogKG9wdGlvbnMpIC0+XG4gICAgICAgIEBfY29yZS5nZXRWZXJzbygpLnByZXYgb3B0aW9uc1xuXG4gICAgICAgIEBcblxuICAgIG5leHQ6IChvcHRpb25zKSAtPlxuICAgICAgICBAX2NvcmUuZ2V0VmVyc28oKS5uZXh0IG9wdGlvbnNcblxuICAgICAgICBAXG5cbiAgICBsYXN0OiAob3B0aW9ucykgLT5cbiAgICAgICAgQF9jb3JlLmdldFZlcnNvKCkubGFzdCBvcHRpb25zXG5cbiAgICAgICAgQFxuXG4gICAgX3NldHVwRXZlbnRMaXN0ZW5lcnM6IC0+XG4gICAgICAgIEBfY29udHJvbHMuYmluZCAncHJldicsIChlKSA9PlxuICAgICAgICAgICAgQHByZXYgZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgQF9jb250cm9scy5iaW5kICduZXh0JywgKGUpID0+XG4gICAgICAgICAgICBAbmV4dCBlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICBAX2NvbnRyb2xzLmJpbmQgJ2ZpcnN0JywgKGUpID0+XG4gICAgICAgICAgICBAZmlyc3QgZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgQF9jb250cm9scy5iaW5kICdsYXN0JywgKGUpID0+XG4gICAgICAgICAgICBAbGFzdCBlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICBAX2NvbnRyb2xzLmJpbmQgJ2Nsb3NlJywgKGUpID0+XG4gICAgICAgICAgICBAZGVzdHJveSBlXG5cbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICBAX2hvdHNwb3RzLmJpbmQgJ2hvdHNwb3RzUmVxdWVzdGVkJywgKGUpID0+XG4gICAgICAgICAgICBAdHJpZ2dlciAnaG90c3BvdHNSZXF1ZXN0ZWQnLCBlXG5cbiAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIEBfY29yZS5iaW5kICdhcHBlYXJlZCcsIChlKSA9PlxuICAgICAgICAgICAgQF9ldmVudFRyYWNraW5nLnRyaWdnZXIgJ2FwcGVhcmVkJywgZVxuICAgICAgICAgICAgQHRyaWdnZXIgJ2FwcGVhcmVkJywgZVxuXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgQF9jb3JlLmJpbmQgJ2Rpc2FwcGVhcmVkJywgKGUpID0+XG4gICAgICAgICAgICBAX2V2ZW50VHJhY2tpbmcudHJpZ2dlciAnZGlzYXBwZWFyZWQnLCBlXG4gICAgICAgICAgICBAdHJpZ2dlciAnZGlzYXBwZWFyZWQnLCBlXG5cbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICBAX2NvcmUuYmluZCAnYmVmb3JlTmF2aWdhdGlvbicsIChlKSA9PlxuICAgICAgICAgICAgQF9ldmVudFRyYWNraW5nLnRyaWdnZXIgJ2JlZm9yZU5hdmlnYXRpb24nLCBlXG4gICAgICAgICAgICBAX2NvbnRyb2xzLnRyaWdnZXIgJ2JlZm9yZU5hdmlnYXRpb24nLCBlXG4gICAgICAgICAgICBAdHJpZ2dlciAnYmVmb3JlTmF2aWdhdGlvbicsIGVcblxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIEBfY29yZS5iaW5kICdhZnRlck5hdmlnYXRpb24nLCAoZSkgPT5cbiAgICAgICAgICAgIEBfZXZlbnRUcmFja2luZy50cmlnZ2VyICdhZnRlck5hdmlnYXRpb24nLCBlXG4gICAgICAgICAgICBAX2hvdHNwb3RzLnRyaWdnZXIgJ2FmdGVyTmF2aWdhdGlvbicsIGVcbiAgICAgICAgICAgIEB0cmlnZ2VyICdhZnRlck5hdmlnYXRpb24nLCBlXG5cbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICBAX2NvcmUuYmluZCAnYXR0ZW1wdGVkTmF2aWdhdGlvbicsIChlKSA9PlxuICAgICAgICAgICAgQF9ldmVudFRyYWNraW5nLnRyaWdnZXIgJ2F0dGVtcHRlZE5hdmlnYXRpb24nLCBlXG4gICAgICAgICAgICBAdHJpZ2dlciAnYXR0ZW1wdGVkTmF2aWdhdGlvbicsIGVcblxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIEBfY29yZS5iaW5kICdjbGlja2VkJywgKGUpID0+XG4gICAgICAgICAgICBAX2V2ZW50VHJhY2tpbmcudHJpZ2dlciAnY2xpY2tlZCcsIGVcbiAgICAgICAgICAgIEB0cmlnZ2VyICdjbGlja2VkJywgZVxuXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgQF9jb3JlLmJpbmQgJ2RvdWJsZUNsaWNrZWQnLCAoZSkgPT5cbiAgICAgICAgICAgIEBfZXZlbnRUcmFja2luZy50cmlnZ2VyICdkb3VibGVDbGlja2VkJywgZVxuICAgICAgICAgICAgQHRyaWdnZXIgJ2RvdWJsZUNsaWNrZWQnLCBlXG5cbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICBAX2NvcmUuYmluZCAnY29udGV4dG1lbnUnLCAoZSkgPT5cbiAgICAgICAgICAgIEB0cmlnZ2VyICdjb250ZXh0bWVudScsIGVcblxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIEBfY29yZS5iaW5kICdwcmVzc2VkJywgKGUpID0+XG4gICAgICAgICAgICBAX2V2ZW50VHJhY2tpbmcudHJpZ2dlciAncHJlc3NlZCcsIGVcbiAgICAgICAgICAgIEB0cmlnZ2VyICdwcmVzc2VkJywgZVxuXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgQF9jb3JlLmJpbmQgJ3BhblN0YXJ0JywgKGUpID0+XG4gICAgICAgICAgICBAX2V2ZW50VHJhY2tpbmcudHJpZ2dlciAncGFuU3RhcnQnLCBlXG4gICAgICAgICAgICBAdHJpZ2dlciAncGFuU3RhcnQnLCBlXG5cbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICBAX2NvcmUuYmluZCAnem9vbWVkSW4nLCAoZSkgPT5cbiAgICAgICAgICAgIEBfZXZlbnRUcmFja2luZy50cmlnZ2VyICd6b29tZWRJbicsIGVcbiAgICAgICAgICAgIEB0cmlnZ2VyICd6b29tZWRJbicsIGVcblxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIEBfY29yZS5iaW5kICd6b29tZWRPdXQnLCAoZSkgPT5cbiAgICAgICAgICAgIEBfZXZlbnRUcmFja2luZy50cmlnZ2VyICd6b29tZWRPdXQnLCBlXG4gICAgICAgICAgICBAdHJpZ2dlciAnem9vbWVkT3V0JywgZVxuXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgQF9jb3JlLmJpbmQgJ3BhZ2VMb2FkZWQnLCAoZSkgPT5cbiAgICAgICAgICAgIEBfZXZlbnRUcmFja2luZy50cmlnZ2VyICdwYWdlTG9hZGVkJywgZVxuICAgICAgICAgICAgQHRyaWdnZXIgJ3BhZ2VMb2FkZWQnLCBlXG5cbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICBAX2NvcmUuYmluZCAncGFnZXNMb2FkZWQnLCAoZSkgPT5cbiAgICAgICAgICAgIEBfaG90c3BvdHMudHJpZ2dlciAncGFnZXNMb2FkZWQnLCBlXG4gICAgICAgICAgICBAdHJpZ2dlciAncGFnZXNMb2FkZWQnLCBlXG5cbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICBAX2NvcmUuYmluZCAncmVzaXplZCcsIChlKSA9PlxuICAgICAgICAgICAgQF9ob3RzcG90cy50cmlnZ2VyICdyZXNpemVkJ1xuICAgICAgICAgICAgQHRyaWdnZXIgJ3Jlc2l6ZWQnLCBlXG5cbiAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIEBiaW5kICdob3RzcG90c1JlcXVlc3RlZCcsIEBob3RzcG90c1JlcXVlc3RlZC5iaW5kKEApXG4gICAgICAgIEBiaW5kICdiZWZvcmVOYXZpZ2F0aW9uJywgQGJlZm9yZU5hdmlnYXRpb24uYmluZChAKVxuICAgICAgICBAYmluZCAnY2xpY2tlZCcsIEBjbGlja2VkLmJpbmQoQClcbiAgICAgICAgQGJpbmQgJ2NvbnRleHRtZW51JywgQGNvbnRleHRtZW51LmJpbmQoQClcbiAgICAgICAgQGJpbmQgJ3ByZXNzZWQnLCBAcHJlc3NlZC5iaW5kKEApXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBwaWNrSG90c3BvdDogKGUsIGNhbGxiYWNrKSAtPlxuICAgICAgICByZXR1cm4gaWYgbm90IEBob3RzcG90cz9cblxuICAgICAgICBpZiBAcG9wb3Zlcj9cbiAgICAgICAgICAgIEBwb3BvdmVyLmRlc3Ryb3koKVxuICAgICAgICAgICAgQHBvcG92ZXIgPSBudWxsXG4gICAgICAgIFxuICAgICAgICBob3RzcG90cyA9IGUudmVyc28ub3ZlcmxheUVscy5tYXAgKG92ZXJsYXlFbCkgPT5cbiAgICAgICAgICAgIEBob3RzcG90c1tvdmVybGF5RWwuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyldXG5cbiAgICAgICAgaWYgaG90c3BvdHMubGVuZ3RoIGlzIDFcbiAgICAgICAgICAgIGNhbGxiYWNrIGhvdHNwb3RzWzBdXG4gICAgICAgIGVsc2UgaWYgaG90c3BvdHMubGVuZ3RoID4gMVxuICAgICAgICAgICAgQHBvcG92ZXIgPSBTR04uQ29yZVVJS2l0LnNpbmdsZUNob2ljZVBvcG92ZXJcbiAgICAgICAgICAgICAgICBlbDogQGVsXG4gICAgICAgICAgICAgICAgaGVhZGVyOiBTR04udHJhbnNsYXRpb25zLnQgJ3BhZ2VkX3B1YmxpY2F0aW9uLmhvdHNwb3RfcGlja2VyLmhlYWRlcidcbiAgICAgICAgICAgICAgICB4OiBlLnZlcnNvLnhcbiAgICAgICAgICAgICAgICB5OiBlLnZlcnNvLnlcbiAgICAgICAgICAgICAgICBpdGVtczogaG90c3BvdHNcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlciAoaG90c3BvdCkgLT4gaG90c3BvdC50eXBlIGlzICdvZmZlcidcbiAgICAgICAgICAgICAgICAgICAgLm1hcCAoaG90c3BvdCkgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBob3RzcG90LmlkXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogaG90c3BvdC5vZmZlci5oZWFkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZTogaG90c3BvdC5vZmZlci5wcmljaW5nLmN1cnJlbmN5ICsgJycgKyBob3RzcG90Lm9mZmVyLnByaWNpbmcucHJpY2VcbiAgICAgICAgICAgICwgKGUpID0+XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgQGhvdHNwb3RzW2UuaWRdXG5cbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgXG4gICAgICAgIHJldHVyblxuXG4gICAgcHJvY2Vzc0hvdHNwb3RRdWV1ZTogLT5cbiAgICAgICAgcmV0dXJuIGlmIG5vdCBAaG90c3BvdHM/XG5cbiAgICAgICAgQGhvdHNwb3RRdWV1ZSA9IEBob3RzcG90UXVldWUuZmlsdGVyIChob3RzcG90UmVxdWVzdCkgPT5cbiAgICAgICAgICAgIGhvdHNwb3RzID0ge31cbiAgICAgICAgICAgIHZlcnNvUGFnZVNwcmVhZCA9IEBfY29yZS5nZXRWZXJzbygpLnBhZ2VTcHJlYWRzLmZpbmQgKHBhZ2VTcHJlYWQpIC0+XG4gICAgICAgICAgICAgICAgcGFnZVNwcmVhZC5nZXRJZCgpIGlzIGhvdHNwb3RSZXF1ZXN0LmlkXG5cbiAgICAgICAgICAgIGZvciBpZCwgaG90c3BvdCBvZiBAaG90c3BvdHNcbiAgICAgICAgICAgICAgICBjb250aW51ZSBpZiBob3RzcG90c1tpZF0/XG5cbiAgICAgICAgICAgICAgICBmb3IgcGFnZSBpbiBob3RzcG90UmVxdWVzdC5wYWdlc1xuICAgICAgICAgICAgICAgICAgICBpZiBob3RzcG90LmxvY2F0aW9uc1twYWdlLnBhZ2VOdW1iZXJdP1xuICAgICAgICAgICAgICAgICAgICAgICAgaG90c3BvdHNbaWRdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBob3RzcG90LnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaG90c3BvdC5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uczogaG90c3BvdC5sb2NhdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgQF9ob3RzcG90cy50cmlnZ2VyICdob3RzcG90c1JlY2VpdmVkJyxcbiAgICAgICAgICAgICAgICBwYWdlU3ByZWFkOiBAX2NvcmUucGFnZVNwcmVhZHMuZ2V0IGhvdHNwb3RSZXF1ZXN0LmlkXG4gICAgICAgICAgICAgICAgdmVyc29QYWdlU3ByZWFkOiB2ZXJzb1BhZ2VTcHJlYWRcbiAgICAgICAgICAgICAgICByYXRpbzogQG9wdGlvbnMuaG90c3BvdFJhdGlvXG4gICAgICAgICAgICAgICAgcGFnZXM6IGhvdHNwb3RSZXF1ZXN0LnBhZ2VzXG4gICAgICAgICAgICAgICAgaG90c3BvdHM6IGhvdHNwb3RzXG5cbiAgICAgICAgICAgIGZhbHNlXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBob3RzcG90c1JlcXVlc3RlZDogKGUpIC0+XG4gICAgICAgIEBob3RzcG90UXVldWUucHVzaCBlXG4gICAgICAgIEBwcm9jZXNzSG90c3BvdFF1ZXVlKClcblxuICAgICAgICByZXR1cm5cbiAgICBcbiAgICBhcHBseUhvdHNwb3RzOiAoaG90c3BvdHMgPSB7fSkgLT5cbiAgICAgICAgQGhvdHNwb3RzID0gaG90c3BvdHNcblxuICAgICAgICBAcHJvY2Vzc0hvdHNwb3RRdWV1ZSgpXG5cbiAgICAgICAgcmV0dXJuXG4gICAgXG4gICAgYmVmb3JlTmF2aWdhdGlvbjogLT5cbiAgICAgICAgQHBvcG92ZXIuZGVzdHJveSgpIGlmIEBwb3BvdmVyP1xuXG4gICAgICAgIHJldHVyblxuICAgIFxuICAgIGNsaWNrZWQ6IChlKSAtPlxuICAgICAgICBAcGlja0hvdHNwb3QgZSwgKGhvdHNwb3QpID0+XG4gICAgICAgICAgICBAdHJpZ2dlciAnaG90c3BvdENsaWNrZWQnLCBob3RzcG90XG5cbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgIHJldHVyblxuICAgIFxuICAgIGNvbnRleHRtZW51OiAoZSkgLT5cbiAgICAgICAgQHBpY2tIb3RzcG90IGUsIChob3RzcG90KSA9PlxuICAgICAgICAgICAgQHRyaWdnZXIgJ2hvdHNwb3RDb250ZXh0bWVudScsIGhvdHNwb3RcblxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIFxuICAgICAgICByZXR1cm5cbiAgICBcbiAgICBwcmVzc2VkOiAoZSkgLT5cbiAgICAgICAgQHBpY2tIb3RzcG90IGUsIChob3RzcG90KSA9PlxuICAgICAgICAgICAgQHRyaWdnZXIgJ2hvdHNwb3RQcmVzc2VkJywgaG90c3BvdFxuXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIFxuICAgICAgICByZXR1cm5cblxuTWljcm9FdmVudC5taXhpbiBWaWV3ZXJcblxubW9kdWxlLmV4cG9ydHMgPSBWaWV3ZXJcbiIsIk1pY3JvRXZlbnQgPSByZXF1aXJlICdtaWNyb2V2ZW50J1xuU0dOID0gcmVxdWlyZSAnLi4vLi4vY29yZSdcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBCb290c3RyYXBwZXJcbiAgICBjb25zdHJ1Y3RvcjogKEBvcHRpb25zID0ge30pIC0+XG4gICAgICAgIHJldHVyblxuXG4gICAgY3JlYXRlVmlld2VyOiAoZGF0YSkgLT5cbiAgICAgICAgbmV3IFNHTi5QYWdlZFB1YmxpY2F0aW9uS2l0LlZpZXdlciBAb3B0aW9ucy5lbCxcbiAgICAgICAgICAgIGlkOiBAb3B0aW9ucy5pZFxuICAgICAgICAgICAgb3duZWRCeTogZGF0YS5kZXRhaWxzLmRlYWxlcl9pZFxuICAgICAgICAgICAgY29sb3I6ICcjJyArIGRhdGEuZGV0YWlscy5icmFuZGluZy5wYWdlZmxpcC5jb2xvclxuICAgICAgICAgICAgaG90c3BvdFJhdGlvOiBkYXRhLmRldGFpbHMuZGltZW5zaW9ucy5oZWlnaHRcbiAgICAgICAgICAgIGtleWJvYXJkOiB0cnVlXG4gICAgICAgICAgICBwYWdlSWQ6IEBvcHRpb25zLnBhZ2VJZFxuICAgICAgICAgICAgZXZlbnRUcmFja2VyOiBAb3B0aW9ucy5ldmVudFRyYWNrZXJcbiAgICAgICAgICAgIHBhZ2VzOiBAdHJhbnNmb3JtUGFnZXMgZGF0YS5wYWdlc1xuXG4gICAgdHJhbnNmb3JtUGFnZXM6IChwYWdlcykgLT5cbiAgICAgICAgcGFnZXMubWFwIChwYWdlLCBpKSAtPlxuICAgICAgICAgICAgcGFnZU51bWJlciA9IGkgKyAxXG5cbiAgICAgICAgICAgIGlkOiAncGFnZScgKyBwYWdlTnVtYmVyXG4gICAgICAgICAgICBsYWJlbDogcGFnZU51bWJlciArICcnXG4gICAgICAgICAgICBwYWdlTnVtYmVyOiBwYWdlTnVtYmVyXG4gICAgICAgICAgICBpbWFnZXM6XG4gICAgICAgICAgICAgICAgbWVkaXVtOiBwYWdlLnZpZXdcbiAgICAgICAgICAgICAgICBsYXJnZTogcGFnZS56b29tXG5cbiAgICBhcHBseUhvdHNwb3RzOiAodmlld2VyLCBob3RzcG90cykgLT5cbiAgICAgICAgb2JqID0ge31cblxuICAgICAgICBob3RzcG90cy5mb3JFYWNoIChob3RzcG90KSAtPiBvYmpbaG90c3BvdC5pZF0gPSBob3RzcG90XG4gICAgICAgIFxuICAgICAgICB2aWV3ZXIuYXBwbHlIb3RzcG90cyBvYmpcblxuICAgICAgICByZXR1cm5cbiAgICBcbiAgICBmZXRjaDogKGNhbGxiYWNrKSAtPlxuICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrLmJpbmQgQFxuICAgICAgICBTR04udXRpbC5hc3luYy5wYXJhbGxlbCBbQGZldGNoRGV0YWlscy5iaW5kKEApLCBAZmV0Y2hQYWdlcy5iaW5kKEApXSwgKHJlc3VsdCkgLT5cbiAgICAgICAgICAgIGRhdGEgPVxuICAgICAgICAgICAgICAgIGRldGFpbHM6IHJlc3VsdFswXVsxXVxuICAgICAgICAgICAgICAgIHBhZ2VzOiByZXN1bHRbMV1bMV1cblxuICAgICAgICAgICAgaWYgcmVzdWx0WzBdWzBdP1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrIHJlc3VsdFswXVswXVxuICAgICAgICAgICAgZWxzZSBpZiByZXN1bHRbMV1bMF0/XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgcmVzdWx0WzFdWzBdXG4gICAgICAgICAgICBlbHNlIGlmIGRhdGEuZGV0YWlscz8gYW5kIGRhdGEucGFnZXM/XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgbnVsbCwgZGF0YVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrIG5ldyBFcnJvcigpXG5cbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICBcbiAgICAgICAgcmV0dXJuXG5cbiAgICBmZXRjaERldGFpbHM6IChjYWxsYmFjaykgLT5cbiAgICAgICAgU0dOLkNvcmVLaXQucmVxdWVzdFxuICAgICAgICAgICAgdXJsOiBcIi92Mi9jYXRhbG9ncy8je0BvcHRpb25zLmlkfVwiXG4gICAgICAgICwgY2FsbGJhY2tcblxuICAgICAgICByZXR1cm5cblxuICAgIGZldGNoUGFnZXM6IChjYWxsYmFjaykgLT5cbiAgICAgICAgU0dOLkNvcmVLaXQucmVxdWVzdFxuICAgICAgICAgICAgdXJsOiBcIi92Mi9jYXRhbG9ncy8je0BvcHRpb25zLmlkfS9wYWdlc1wiXG4gICAgICAgICwgY2FsbGJhY2tcblxuICAgICAgICByZXR1cm5cblxuICAgIGZldGNoSG90c3BvdHM6IChjYWxsYmFjaykgLT5cbiAgICAgICAgU0dOLkNvcmVLaXQucmVxdWVzdFxuICAgICAgICAgICAgdXJsOiBcIi92Mi9jYXRhbG9ncy8je0BvcHRpb25zLmlkfS9ob3RzcG90c1wiXG4gICAgICAgICwgY2FsbGJhY2tcblxuICAgICAgICByZXR1cm4iLCJtb2R1bGUuZXhwb3J0cyA9XG4gICAgVmlld2VyOiByZXF1aXJlICcuL3ZpZXdlcidcblxuICAgIEJvb3RzdHJhcHBlcjogcmVxdWlyZSAnLi9ib290c3RyYXBwZXInXG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9O1xufSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKSwgcmVxdWlyZSgnY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpLCByZXF1aXJlKCdjb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyksIHJlcXVpcmUoJ2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKSwgcmVxdWlyZSgnY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyksIHJlcXVpcmUoJ2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0JykpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnLCAnY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicsICdjb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJywgJ2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnLCAnY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJywgJ2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0J10sIGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuSW5jaXRvID0gZmFjdG9yeSgpKTtcbn0odGhpcywgZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBfdHlwZW9mKG9iaik7XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG4gIH1cblxuICBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICAgIH07XG4gICAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgICByZXR1cm4gbztcbiAgICB9O1xuXG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICAgIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICAgIHJldHVybiBjYWxsO1xuICAgIH1cblxuICAgIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xuICB9XG5cbiAgdmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxuICBmdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG4gIFx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xuICB9XG5cbiAgdmFyIG1pY3JvZXZlbnQgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG4gIC8qKlxuICAgKiBNaWNyb0V2ZW50IC0gdG8gbWFrZSBhbnkganMgb2JqZWN0IGFuIGV2ZW50IGVtaXR0ZXIgKHNlcnZlciBvciBicm93c2VyKVxuICAgKiBcbiAgICogLSBwdXJlIGphdmFzY3JpcHQgLSBzZXJ2ZXIgY29tcGF0aWJsZSwgYnJvd3NlciBjb21wYXRpYmxlXG4gICAqIC0gZG9udCByZWx5IG9uIHRoZSBicm93c2VyIGRvbXNcbiAgICogLSBzdXBlciBzaW1wbGUgLSB5b3UgZ2V0IGl0IGltbWVkaWF0bHksIG5vIG1pc3RlcnksIG5vIG1hZ2ljIGludm9sdmVkXG4gICAqXG4gICAqIC0gY3JlYXRlIGEgTWljcm9FdmVudERlYnVnIHdpdGggZ29vZGllcyB0byBkZWJ1Z1xuICAgKiAgIC0gbWFrZSBpdCBzYWZlciB0byB1c2VcbiAgKi9cblxuICB2YXIgTWljcm9FdmVudFx0PSBmdW5jdGlvbigpe307XG4gIE1pY3JvRXZlbnQucHJvdG90eXBlXHQ9IHtcbiAgXHRiaW5kXHQ6IGZ1bmN0aW9uKGV2ZW50LCBmY3Qpe1xuICBcdFx0dGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICBcdFx0dGhpcy5fZXZlbnRzW2V2ZW50XSA9IHRoaXMuX2V2ZW50c1tldmVudF1cdHx8IFtdO1xuICBcdFx0dGhpcy5fZXZlbnRzW2V2ZW50XS5wdXNoKGZjdCk7XG4gIFx0fSxcbiAgXHR1bmJpbmRcdDogZnVuY3Rpb24oZXZlbnQsIGZjdCl7XG4gIFx0XHR0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIFx0XHRpZiggZXZlbnQgaW4gdGhpcy5fZXZlbnRzID09PSBmYWxzZSAgKVx0cmV0dXJuO1xuICBcdFx0dGhpcy5fZXZlbnRzW2V2ZW50XS5zcGxpY2UodGhpcy5fZXZlbnRzW2V2ZW50XS5pbmRleE9mKGZjdCksIDEpO1xuICBcdH0sXG4gIFx0dHJpZ2dlclx0OiBmdW5jdGlvbihldmVudCAvKiAsIGFyZ3MuLi4gKi8pe1xuICBcdFx0dGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICBcdFx0aWYoIGV2ZW50IGluIHRoaXMuX2V2ZW50cyA9PT0gZmFsc2UgIClcdHJldHVybjtcbiAgXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLl9ldmVudHNbZXZlbnRdLmxlbmd0aDsgaSsrKXtcbiAgXHRcdFx0dGhpcy5fZXZlbnRzW2V2ZW50XVtpXS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgXHRcdH1cbiAgXHR9XG4gIH07XG5cbiAgLyoqXG4gICAqIG1peGluIHdpbGwgZGVsZWdhdGUgYWxsIE1pY3JvRXZlbnQuanMgZnVuY3Rpb24gaW4gdGhlIGRlc3RpbmF0aW9uIG9iamVjdFxuICAgKlxuICAgKiAtIHJlcXVpcmUoJ01pY3JvRXZlbnQnKS5taXhpbihGb29iYXIpIHdpbGwgbWFrZSBGb29iYXIgYWJsZSB0byB1c2UgTWljcm9FdmVudFxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gdGhlIG9iamVjdCB3aGljaCB3aWxsIHN1cHBvcnQgTWljcm9FdmVudFxuICAqL1xuICBNaWNyb0V2ZW50Lm1peGluXHQ9IGZ1bmN0aW9uKGRlc3RPYmplY3Qpe1xuICBcdHZhciBwcm9wc1x0PSBbJ2JpbmQnLCAndW5iaW5kJywgJ3RyaWdnZXInXTtcbiAgXHRmb3IodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpICsrKXtcbiAgXHRcdGRlc3RPYmplY3QucHJvdG90eXBlW3Byb3BzW2ldXVx0PSBNaWNyb0V2ZW50LnByb3RvdHlwZVtwcm9wc1tpXV07XG4gIFx0fVxuICB9O1xuXG4gIC8vIGV4cG9ydCBpbiBjb21tb24ganNcbiAgaWYoICdleHBvcnRzJyBpbiBtb2R1bGUpe1xuICBcdG1vZHVsZS5leHBvcnRzXHQ9IE1pY3JvRXZlbnQ7XG4gIH1cbiAgfSk7XG5cbiAgdmFyIHV0aWxzO1xuICB1dGlscyA9IHtcbiAgICBmb3JtYXRVbml0OiBmdW5jdGlvbiBmb3JtYXRVbml0KHVuaXQpIHtcbiAgICAgIGlmICh1bml0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB1bml0ID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQodW5pdCwgXCJweFwiKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHVuaXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB1bml0LnJlcGxhY2UoJ2RwJywgJ3B4Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGlzRGVmaW5lZFN0cjogZnVuY3Rpb24gaXNEZWZpbmVkU3RyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5sZW5ndGggPiAwO1xuICAgIH0sXG4gICAgZXNjYXBlSFRNTDogZnVuY3Rpb24gZXNjYXBlSFRNTCgpIHtcbiAgICAgIHZhciB1bnNhZmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuICAgICAgcmV0dXJuIHVuc2FmZS5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7JykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpLnJlcGxhY2UoLycvZywgJyYjMDM5OycpO1xuICAgIH0sXG4gICAgdGhyb3R0bGU6IGZ1bmN0aW9uIHRocm90dGxlKGZuLCBkZWxheSkge1xuICAgICAgdmFyIHRpbWVyO1xuXG4gICAgICBpZiAoZGVsYXkgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgfVxuXG4gICAgICB0aW1lciA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZXIgPSB0cnVlO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGltZXIgPSBmYWxzZTtcbiAgICAgICAgICBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xuICB2YXIgdXRpbHNfMSA9IHV0aWxzO1xuXG4gIHZhciBWaWV3LFxuICAgICAgdXRpbHMkMSxcbiAgICAgIGluZGV4T2YgPSBbXS5pbmRleE9mO1xuICB1dGlscyQxID0gdXRpbHNfMTtcblxuICB2YXIgdmlldyA9IFZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIFZpZXcgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBWaWV3KCkge1xuICAgICAgICB2YXIgYXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaWV3KTtcblxuICAgICAgICB0aGlzLmF0dHJzID0gYXR0cnM7XG4gICAgICAgIHRoaXMuZWwgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoKTtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX2NyZWF0ZUNsYXNzKFZpZXcsIFt7XG4gICAgICAgIGtleTogXCJyZW5kZXJcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiY3JlYXRlRWxlbWVudFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRWxlbWVudCgpIHtcbiAgICAgICAgICB2YXIgY2xhc3NOYW1lLCBlbCwgcmVmO1xuICAgICAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZ05hbWUpO1xuICAgICAgICAgIGNsYXNzTmFtZSA9IChyZWYgPSB0aGlzLmNsYXNzTmFtZSkgIT0gbnVsbCA/IHJlZiA6ICcnO1xuICAgICAgICAgIGVsLmNsYXNzTmFtZSA9ICdpbmNpdG9fX3ZpZXcgJyArIGNsYXNzTmFtZTtcbiAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcInNldEF0dHJpYnV0ZXNcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoKSB7XG4gICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgIHZhciByZWYsIHJlZjEsIHNoYWRvdywgc3Ryb2tlU3R5bGVzLCB0cmFuc2Zvcm1zOyAvLyBJZGVudGlmaWVyLlxuXG4gICAgICAgICAgaWYgKHV0aWxzJDEuaXNEZWZpbmVkU3RyKHRoaXMuYXR0cnMuaWQpKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgnZGF0YS1pZCcsIHRoaXMuYXR0cnMuaWQpO1xuICAgICAgICAgIH0gLy8gUm9sZS5cblxuXG4gICAgICAgICAgaWYgKHV0aWxzJDEuaXNEZWZpbmVkU3RyKHRoaXMuYXR0cnMucm9sZSkpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdkYXRhLXJvbGUnLCB0aGlzLmF0dHJzLnJvbGUpO1xuICAgICAgICAgIH0gLy8gQWNjZXNzaWJpbGl0eSBsYWJlbC5cblxuXG4gICAgICAgICAgaWYgKHV0aWxzJDEuaXNEZWZpbmVkU3RyKHRoaXMuYXR0cnMuYWNjZXNzaWJpbGl0eV9sYWJlbCkpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgdGhpcy5hdHRycy5hY2Nlc3NpYmlsaXR5X2xhYmVsKTtcbiAgICAgICAgICB9IC8vIEFjY2Vzc2liaWxpdHkgdmlzaWJpbGl0eS5cblxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMuYWNjZXNzaWJpbGl0eV9oaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuICAgICAgICAgIH0gLy8gVGl0bGUuXG5cblxuICAgICAgICAgIGlmICh1dGlscyQxLmlzRGVmaW5lZFN0cih0aGlzLmF0dHJzLnRpdGxlKSkge1xuICAgICAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgdGhpcy5hdHRycy50aXRsZSk7XG4gICAgICAgICAgfSAvLyBHcmF2aXR5LlxuXG5cbiAgICAgICAgICBpZiAodXRpbHMkMS5pc0RlZmluZWRTdHIodGhpcy5hdHRycy5ncmF2aXR5KSkge1xuICAgICAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZ3Jhdml0eScsIHRoaXMuYXR0cnMuZ3Jhdml0eSk7XG4gICAgICAgICAgfSAvLyBMaW5rLlxuXG5cbiAgICAgICAgICBpZiAodXRpbHMkMS5pc0RlZmluZWRTdHIodGhpcy5hdHRycy5saW5rKSkge1xuICAgICAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGluaycsICcnKTtcbiAgICAgICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5vcGVuKF90aGlzLmF0dHJzLmxpbmssICdfYmxhbmsnKTtcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICB9IC8vIFdpZHRoLlxuXG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy5sYXlvdXRfd2lkdGggPT09ICdtYXRjaF9wYXJlbnQnKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5hdHRycy5sYXlvdXRfd2lkdGggPT09ICd3cmFwX2NvbnRlbnQnKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYXR0cnMubGF5b3V0X3dpZHRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUud2lkdGggPSB1dGlscyQxLmZvcm1hdFVuaXQodGhpcy5hdHRycy5sYXlvdXRfd2lkdGgpO1xuICAgICAgICAgIH0gLy8gSGVpZ2h0LlxuXG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy5sYXlvdXRfaGVpZ2h0ID09PSAnbWF0Y2hfcGFyZW50Jykge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmF0dHJzLmxheW91dF9oZWlnaHQgPT09ICd3cmFwX2NvbnRlbnQnKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYXR0cnMubGF5b3V0X2hlaWdodCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmhlaWdodCA9IHV0aWxzJDEuZm9ybWF0VW5pdCh0aGlzLmF0dHJzLmxheW91dF9oZWlnaHQpO1xuICAgICAgICAgIH0gLy8gTWluIHdpZHRoLlxuXG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy5taW5fd2lkdGggIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5taW5XaWR0aCA9IHV0aWxzJDEuZm9ybWF0VW5pdCh0aGlzLmF0dHJzLm1pbl93aWR0aCk7XG4gICAgICAgICAgfSAvLyBNYXggd2lkdGguXG5cblxuICAgICAgICAgIGlmICh0aGlzLmF0dHJzLm1heF93aWR0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLm1heFdpZHRoID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMubWF4X3dpZHRoKTtcbiAgICAgICAgICB9IC8vIE1pbiBoZWlnaHQuXG5cblxuICAgICAgICAgIGlmICh0aGlzLmF0dHJzLm1pbl9oZWlnaHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5taW5IZWlnaHQgPSB1dGlscyQxLmZvcm1hdFVuaXQodGhpcy5hdHRycy5taW5faGVpZ2h0KTtcbiAgICAgICAgICB9IC8vIE1heCBoZWlnaHQuXG5cblxuICAgICAgICAgIGlmICh0aGlzLmF0dHJzLm1heF9oZWlnaHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5tYXhIZWlnaHQgPSB1dGlscyQxLmZvcm1hdFVuaXQodGhpcy5hdHRycy5tYXhfaGVpZ2h0KTtcbiAgICAgICAgICB9IC8vIFBvc2l0aW9uIGluIHJlbGF0aW9uIHRvIHBhcmVudC5cblxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMubGF5b3V0X3RvcCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLnRvcCA9IHV0aWxzJDEuZm9ybWF0VW5pdCh0aGlzLmF0dHJzLmxheW91dF90b3ApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLmF0dHJzLmxheW91dF9sZWZ0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUubGVmdCA9IHV0aWxzJDEuZm9ybWF0VW5pdCh0aGlzLmF0dHJzLmxheW91dF9sZWZ0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy5sYXlvdXRfcmlnaHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5yaWdodCA9IHV0aWxzJDEuZm9ybWF0VW5pdCh0aGlzLmF0dHJzLmxheW91dF9yaWdodCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMubGF5b3V0X2JvdHRvbSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmJvdHRvbSA9IHV0aWxzJDEuZm9ybWF0VW5pdCh0aGlzLmF0dHJzLmxheW91dF9ib3R0b20pO1xuICAgICAgICAgIH0gLy8gQmFja2dyb3VuZC5cblxuXG4gICAgICAgICAgaWYgKHV0aWxzJDEuaXNEZWZpbmVkU3RyKHRoaXMuYXR0cnMuYmFja2dyb3VuZF9jb2xvcikpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gdGhpcy5hdHRycy5iYWNrZ3JvdW5kX2NvbG9yO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscyQxLmlzRGVmaW5lZFN0cih0aGlzLmF0dHJzLmJhY2tncm91bmRfaW1hZ2UpKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgnZGF0YS1zcmMnLCB0aGlzLmF0dHJzLmJhY2tncm91bmRfaW1hZ2UpO1xuICAgICAgICAgICAgdGhpcy5sYXp5bG9hZCA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKChyZWYgPSB0aGlzLmF0dHJzLmJhY2tncm91bmRfdGlsZV9tb2RlKSA9PT0gJ3JlcGVhdF94JyB8fCByZWYgPT09ICdyZXBlYXRfeScgfHwgcmVmID09PSAncmVwZWF0Jykge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5iYWNrZ3JvdW5kUmVwZWF0ID0gdGhpcy5hdHRycy5iYWNrZ3JvdW5kX3RpbGVfbW9kZS5yZXBsYWNlKCdfJywgJy0nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMkMS5pc0RlZmluZWRTdHIodGhpcy5hdHRycy5iYWNrZ3JvdW5kX2ltYWdlX3Bvc2l0aW9uKSkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb24gPSB0aGlzLmF0dHJzLmJhY2tncm91bmRfaW1hZ2VfcG9zaXRpb24ucmVwbGFjZSgnXycsICcgJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMuYmFja2dyb3VuZF9pbWFnZV9zY2FsZV90eXBlID09PSAnY2VudGVyX2Nyb3AnKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmJhY2tncm91bmRTaXplID0gJ2NvdmVyJztcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYXR0cnMuYmFja2dyb3VuZF9pbWFnZV9zY2FsZV90eXBlID09PSAnY2VudGVyX2luc2lkZScpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUuYmFja2dyb3VuZFNpemUgPSAnY29udGFpbic7XG4gICAgICAgICAgfSAvLyBNYXJnaW4uXG5cblxuICAgICAgICAgIGlmICh0aGlzLmF0dHJzLmxheW91dF9tYXJnaW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5tYXJnaW4gPSB1dGlscyQxLmZvcm1hdFVuaXQodGhpcy5hdHRycy5sYXlvdXRfbWFyZ2luKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy5sYXlvdXRfbWFyZ2luX3RvcCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLm1hcmdpblRvcCA9IHV0aWxzJDEuZm9ybWF0VW5pdCh0aGlzLmF0dHJzLmxheW91dF9tYXJnaW5fdG9wKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy5sYXlvdXRfbWFyZ2luX2xlZnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5tYXJnaW5MZWZ0ID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMubGF5b3V0X21hcmdpbl9sZWZ0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy5sYXlvdXRfbWFyZ2luX3JpZ2h0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUubWFyZ2luUmlnaHQgPSB1dGlscyQxLmZvcm1hdFVuaXQodGhpcy5hdHRycy5sYXlvdXRfbWFyZ2luX3JpZ2h0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy5sYXlvdXRfbWFyZ2luX2JvdHRvbSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLm1hcmdpbkJvdHRvbSA9IHV0aWxzJDEuZm9ybWF0VW5pdCh0aGlzLmF0dHJzLmxheW91dF9tYXJnaW5fYm90dG9tKTtcbiAgICAgICAgICB9IC8vIFBhZGRpbmcuXG5cblxuICAgICAgICAgIGlmICh0aGlzLmF0dHJzLnBhZGRpbmcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5wYWRkaW5nID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMucGFkZGluZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMucGFkZGluZ190b3AgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5wYWRkaW5nVG9wID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMucGFkZGluZ190b3ApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLmF0dHJzLnBhZGRpbmdfbGVmdCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLnBhZGRpbmdMZWZ0ID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMucGFkZGluZ19sZWZ0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy5wYWRkaW5nX3JpZ2h0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUucGFkZGluZ1JpZ2h0ID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMucGFkZGluZ19yaWdodCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMucGFkZGluZ19ib3R0b20gIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5wYWRkaW5nQm90dG9tID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMucGFkZGluZ19ib3R0b20pO1xuICAgICAgICAgIH0gLy8gQ29ybmVyIHJhZGl1cy5cblxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMuY29ybmVyX3JhZGl1cyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmJvcmRlclJhZGl1cyA9IHV0aWxzJDEuZm9ybWF0VW5pdCh0aGlzLmF0dHJzLmNvcm5lcl9yYWRpdXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLmF0dHJzLmNvcm5lcl90b3BfbGVmdF9yYWRpdXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5ib3JkZXJUb3BMZWZ0UmFkaXVzID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMuY29ybmVyX3RvcF9sZWZ0X3JhZGl1cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMuY29ybmVyX3RvcF9yaWdodF9yYWRpdXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5ib3JkZXJUb3BSaWdodFJhZGl1cyA9IHV0aWxzJDEuZm9ybWF0VW5pdCh0aGlzLmF0dHJzLmNvcm5lcl90b3BfcmlnaHRfcmFkaXVzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy5jb3JuZXJfYm90dG9tX2xlZnRfcmFkaXVzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUuYm9yZGVyQm90dG9tTGVmdFJhZGl1cyA9IHV0aWxzJDEuZm9ybWF0VW5pdCh0aGlzLmF0dHJzLmNvcm5lcl9ib3R0b21fbGVmdF9yYWRpdXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLmF0dHJzLmNvcm5lcl9ib3R0b21fcmlnaHRfcmFkaXVzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUuYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMgPSB1dGlscyQxLmZvcm1hdFVuaXQodGhpcy5hdHRycy5jb3JuZXJfYm90dG9tX3JpZ2h0X3JhZGl1cyk7XG4gICAgICAgICAgfSAvLyBDbGlwIGNoaWxkcmVuLlxuXG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy5jbGlwX2NoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5vdmVyZmxvdyA9ICd2aXNpYmxlJztcbiAgICAgICAgICB9IC8vIFNoYWRvdy5cblxuXG4gICAgICAgICAgc2hhZG93ID0gdGhpcy5nZXRTaGFkb3coKTtcblxuICAgICAgICAgIGlmIChzaGFkb3cgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5ib3hTaGFkb3cgPSBcIlwiLmNvbmNhdChzaGFkb3cuZHgsIFwicHggXCIpLmNvbmNhdChzaGFkb3cuZHksIFwicHggXCIpLmNvbmNhdChzaGFkb3cucmFkaXVzLCBcInB4IFwiKS5jb25jYXQoc2hhZG93LmNvbG9yKTtcbiAgICAgICAgICB9IC8vIFN0cm9rZS5cblxuXG4gICAgICAgICAgc3Ryb2tlU3R5bGVzID0gWydzb2xpZCcsICdkb3R0ZWQnLCAnZGFzaGVkJ107XG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy5zdHJva2Vfd2lkdGggIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5ib3JkZXJXaWR0aCA9IHV0aWxzJDEuZm9ybWF0VW5pdCh0aGlzLmF0dHJzLnN0cm9rZV93aWR0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMuc3Ryb2tlX2NvbG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUuYm9yZGVyQ29sb3IgPSB0aGlzLmF0dHJzLnN0cm9rZV9jb2xvcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVmMSA9IHRoaXMuYXR0cnMuc3Ryb2tlX3N0eWxlLCBpbmRleE9mLmNhbGwoc3Ryb2tlU3R5bGVzLCByZWYxKSA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmJvcmRlclN0eWxlID0gdGhpcy5hdHRycy5zdHJva2Vfc3R5bGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMuc3Ryb2tlX3RvcF93aWR0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmJvcmRlclRvcFdpZHRoID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMuc3Ryb2tlX3RvcF93aWR0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMuc3Ryb2tlX3RvcF9jb2xvciAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmJvcmRlclRvcENvbG9yID0gdGhpcy5hdHRycy5zdHJva2VfdG9wX2NvbG9yO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLmF0dHJzLnN0cm9rZV9sZWZ0X3dpZHRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUuYm9yZGVyTGVmdFdpZHRoID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMuc3Ryb2tlX2xlZnRfd2lkdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLmF0dHJzLnN0cm9rZV9sZWZ0X2NvbG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUuYm9yZGVyTGVmdENvbG9yID0gdGhpcy5hdHRycy5zdHJva2VfbGVmdF9jb2xvcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy5zdHJva2VfcmlnaHRfd2lkdGggIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5ib3JkZXJSaWdodFdpZHRoID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMuc3Ryb2tlX3JpZ2h0X3dpZHRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy5zdHJva2VfcmlnaHRfY29sb3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5ib3JkZXJSaWdodENvbG9yID0gdGhpcy5hdHRycy5zdHJva2VfcmlnaHRfY29sb3I7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMuc3Ryb2tlX2JvdHRvbV93aWR0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmJvcmRlckJvdHRvbVdpZHRoID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMuc3Ryb2tlX2JvdHRvbV93aWR0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMuc3Ryb2tlX2JvdHRvbV9jb2xvciAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmJvcmRlckJvdHRvbUNvbG9yID0gdGhpcy5hdHRycy5zdHJva2VfYm90dG9tX2NvbG9yO1xuICAgICAgICAgIH0gLy8gRmxleC5cblxuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmF0dHJzLmxheW91dF9mbGV4X3NocmluayA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUuZmxleFNocmluayA9IHRoaXMuYXR0cnMubGF5b3V0X2ZsZXhfc2hyaW5rO1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5tc0ZsZXhTaHJpbmsgPSB0aGlzLmF0dHJzLmxheW91dF9mbGV4X3NocmluaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuYXR0cnMubGF5b3V0X2ZsZXhfZ3JvdyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUuZmxleEdyb3cgPSB0aGlzLmF0dHJzLmxheW91dF9mbGV4X2dyb3c7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLm1zRmxleEdyb3cgPSB0aGlzLmF0dHJzLmxheW91dF9mbGV4X2dyb3c7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMubGF5b3V0X2ZsZXhfYmFzaXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5mbGV4QmFzaXMgPSB1dGlscyQxLmZvcm1hdFVuaXQodGhpcy5hdHRycy5sYXlvdXRfZmxleF9iYXNpcyk7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLm1zRmxleEJhc2lzID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMubGF5b3V0X2ZsZXhfYmFzaXMpO1xuICAgICAgICAgIH0gLy8gVHJhbnNmb3Jtcy5cblxuXG4gICAgICAgICAgdHJhbnNmb3JtcyA9IHRoaXMuZ2V0VHJhbnNmb3JtcygpO1xuXG4gICAgICAgICAgaWYgKHRyYW5zZm9ybXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1zLmpvaW4oJyAnKTtcbiAgICAgICAgICB9IC8vIFRyYW5zZm9ybSBvcmlnaW4uXG5cblxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuYXR0cnMudHJhbnNmb3JtX29yaWdpbikgJiYgdGhpcy5hdHRycy50cmFuc2Zvcm1fb3JpZ2luLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBbdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMudHJhbnNmb3JtX29yaWdpblswXSksIHV0aWxzJDEuZm9ybWF0VW5pdCh0aGlzLmF0dHJzLnRyYW5zZm9ybV9vcmlnaW5bMV0pXS5qb2luKCcgJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJnZXRUcmFuc2Zvcm1zXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1zKCkge1xuICAgICAgICAgIHZhciB0cmFuc2Zvcm1zLCB0cmFuc2xhdGVYLCB0cmFuc2xhdGVZO1xuICAgICAgICAgIHRyYW5zZm9ybXMgPSBbXTtcbiAgICAgICAgICB0cmFuc2xhdGVYID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMudHJhbnNmb3JtX3RyYW5zbGF0ZV94KTtcbiAgICAgICAgICB0cmFuc2xhdGVZID0gdXRpbHMkMS5mb3JtYXRVbml0KHRoaXMuYXR0cnMudHJhbnNmb3JtX3RyYW5zbGF0ZV95KTtcblxuICAgICAgICAgIGlmICh0cmFuc2xhdGVYICE9PSAwKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1zLnB1c2goXCJ0cmFuc2xhdGVYKFwiLmNvbmNhdCh0cmFuc2xhdGVYLCBcIilcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0cmFuc2xhdGVZICE9PSAwKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1zLnB1c2goXCJ0cmFuc2xhdGVZKFwiLmNvbmNhdCh0cmFuc2xhdGVZLCBcIilcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5hdHRycy50cmFuc2Zvcm1fcm90YXRlID09PSAnbnVtYmVyJyAmJiB0aGlzLmF0dHJzLnRyYW5zZm9ybV9yb3RhdGUgIT09IDApIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybXMucHVzaChcInJvdGF0ZShcIi5jb25jYXQodGhpcy5hdHRycy50cmFuc2Zvcm1fcm90YXRlLCBcImRlZylcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5hdHRycy50cmFuc2Zvcm1fc2NhbGUgPT09ICdudW1iZXInICYmIHRoaXMuYXR0cnMudHJhbnNmb3JtX3NjYWxlICE9PSAxKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1zLnB1c2goXCJzY2FsZShcIi5jb25jYXQodGhpcy5hdHRycy50cmFuc2Zvcm1fc2NhbGUsIFwiKVwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybXM7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldFNoYWRvd1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2hhZG93KCkge1xuICAgICAgICAgIHZhciBjb2xvciwgZHgsIGR5LCByYWRpdXM7XG5cbiAgICAgICAgICBpZiAodXRpbHMkMS5pc0RlZmluZWRTdHIodGhpcy5hdHRycy5zaGFkb3dfY29sb3IpKSB7XG4gICAgICAgICAgICBkeCA9IHR5cGVvZiB0aGlzLmF0dHJzLnNoYWRvd19keCA9PT0gJ251bWJlcicgPyB0aGlzLmF0dHJzLnNoYWRvd19keCA6IDA7XG4gICAgICAgICAgICBkeSA9IHR5cGVvZiB0aGlzLmF0dHJzLnNoYWRvd19keSA9PT0gJ251bWJlcicgPyB0aGlzLmF0dHJzLnNoYWRvd19keSA6IDA7XG4gICAgICAgICAgICByYWRpdXMgPSB0eXBlb2YgdGhpcy5hdHRycy5zaGFkb3dfcmFkaXVzID09PSAnbnVtYmVyJyA/IHRoaXMuYXR0cnMuc2hhZG93X3JhZGl1cyA6IDA7XG4gICAgICAgICAgICBjb2xvciA9IHRoaXMuYXR0cnMuc2hhZG93X2NvbG9yO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgZHg6IGR4LFxuICAgICAgICAgICAgICBkeTogZHksXG4gICAgICAgICAgICAgIHJhZGl1czogcmFkaXVzLFxuICAgICAgICAgICAgICBjb2xvcjogY29sb3JcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XSk7XG5cbiAgICAgIHJldHVybiBWaWV3O1xuICAgIH0oKTtcbiAgICBWaWV3LnByb3RvdHlwZS50YWdOYW1lID0gJ2Rpdic7XG4gICAgVmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gbnVsbDtcbiAgICByZXR1cm4gVmlldztcbiAgfS5jYWxsKGNvbW1vbmpzR2xvYmFsKTtcblxuICB2YXIgSW1hZ2UsIFZpZXckMSwgdXRpbHMkMjtcbiAgVmlldyQxID0gdmlldztcbiAgdXRpbHMkMiA9IHV0aWxzXzE7XG5cbiAgdmFyIGltYWdlID0gSW1hZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEltYWdlID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKF9WaWV3KSB7XG4gICAgICBfaW5oZXJpdHMoSW1hZ2UsIF9WaWV3KTtcblxuICAgICAgZnVuY3Rpb24gSW1hZ2UoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbWFnZSk7XG5cbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihJbWFnZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICB9XG5cbiAgICAgIF9jcmVhdGVDbGFzcyhJbWFnZSwgW3tcbiAgICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgIGlmICh1dGlscyQyLmlzRGVmaW5lZFN0cih0aGlzLmF0dHJzLnNyYykpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdkYXRhLXNyYycsIHRoaXMuYXR0cnMuc3JjKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMkMi5pc0RlZmluZWRTdHIodGhpcy5hdHRycy5sYWJlbCkpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdhbHQnLCB0aGlzLmF0dHJzLmxhYmVsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ2FsdCcsICcnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gSW1hZ2U7XG4gICAgfShWaWV3JDEpO1xuICAgIEltYWdlLnByb3RvdHlwZS50YWdOYW1lID0gJ2ltZyc7XG4gICAgSW1hZ2UucHJvdG90eXBlLmNsYXNzTmFtZSA9ICdpbmNpdG9fX2ltYWdlLXZpZXcnO1xuICAgIEltYWdlLnByb3RvdHlwZS5sYXp5bG9hZCA9IHRydWU7XG4gICAgcmV0dXJuIEltYWdlO1xuICB9LmNhbGwoY29tbW9uanNHbG9iYWwpO1xuXG4gIHZhciBUZXh0VmlldyxcbiAgICAgIFZpZXckMixcbiAgICAgIHV0aWxzJDMsXG4gICAgICBpbmRleE9mJDEgPSBbXS5pbmRleE9mO1xuICBWaWV3JDIgPSB2aWV3O1xuICB1dGlscyQzID0gdXRpbHNfMTtcblxuICB2YXIgdGV4dCA9IFRleHRWaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBUZXh0VmlldyA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIGZ1bmN0aW9uIChfVmlldykge1xuICAgICAgX2luaGVyaXRzKFRleHRWaWV3LCBfVmlldyk7XG5cbiAgICAgIGZ1bmN0aW9uIFRleHRWaWV3KCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGV4dFZpZXcpO1xuXG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVGV4dFZpZXcpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuXG4gICAgICBfY3JlYXRlQ2xhc3MoVGV4dFZpZXcsIFt7XG4gICAgICAgIGtleTogXCJyZW5kZXJcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICB2YXIgcGFyc2VkVGV4dCwgdGV4dCwgdGV4dFNoYWRvdywgdGV4dFN0eWxlcztcblxuICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5hdHRycy50ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGV4dFN0eWxlcyA9ICh0aGlzLmF0dHJzLnRleHRfc3R5bGUgfHwgJycpLnNwbGl0KCd8Jyk7XG4gICAgICAgICAgdGV4dCA9IHRoaXMuYXR0cnMudGV4dDtcblxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuYXR0cnMuc3BhbnMpICYmIHRoaXMuYXR0cnMuc3BhbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcGFyc2VkVGV4dCA9IHRoaXMucGFyc2VTcGFucyh0ZXh0LCB0aGlzLmF0dHJzLnNwYW5zKTtcbiAgICAgICAgICAgIHRleHQgPSBwYXJzZWRUZXh0Lm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICB2YXIgZXNjYXBlZFRleHQsIHNwYW5OYW1lO1xuICAgICAgICAgICAgICBlc2NhcGVkVGV4dCA9IHV0aWxzJDMuZXNjYXBlSFRNTChpdGVtLnRleHQgfHwgJycpO1xuXG4gICAgICAgICAgICAgIGlmIChpdGVtLnNwYW4gIT0gbnVsbCAmJiBpdGVtLnNwYW4ubmFtZSA9PT0gJ2xpbmsnICYmIGl0ZW0uc3Bhbi51cmwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnPGEgaHJlZj1cIicgKyBlbmNvZGVVUkkoaXRlbS5zcGFuLnVybCkgKyAnXCIgcmVsPVwiZXh0ZXJuYWxcIiB0YXJnZXQ9XCJfYmxhbmtcIj4nICsgZXNjYXBlZFRleHQgKyAnPC9hPic7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5zcGFuICE9IG51bGwgJiYgaXRlbS5zcGFuLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNwYW5OYW1lID0gaXRlbS5zcGFuLm5hbWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuICc8c3BhbiBkYXRhLW5hbWU9XCInICsgc3Bhbk5hbWUgKyAnXCI+JyArIGVzY2FwZWRUZXh0ICsgJzwvc3Bhbj4nO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBlc2NhcGVkVGV4dDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0ZXh0ID0gdGV4dC5qb2luKCcnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dCA9IHV0aWxzJDMuZXNjYXBlSFRNTCh0ZXh0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy50ZXh0X3ByZXZlbnRfd2lkb3cpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gdGV4dC5yZXBsYWNlKC9cXCZuYnNwOyhbXlxcc10rKSQvLCAnICQxJykucmVwbGFjZSgvXFxzKFteXFxzXSspXFxzKiQvLCAnJm5ic3A7JDEnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbC5pbm5lckhUTUwgPSB0ZXh0O1xuICAgICAgICAgIH0gLy8gRm9udCBmYW1pbHkuXG5cblxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuYXR0cnMuZm9udF9mYW1pbHkpICYmIHRoaXMuYXR0cnMuZm9udF9mYW1pbHkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5mb250RmFtaWx5ID0gdGhpcy5hdHRycy5mb250X2ZhbWlseS5qb2luKCcsICcpO1xuICAgICAgICAgIH0gLy8gVGV4dCBzaXplLlxuXG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy50ZXh0X3NpemUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5mb250U2l6ZSA9IFwiXCIuY29uY2F0KHRoaXMuYXR0cnMudGV4dF9zaXplLCBcInB4XCIpO1xuICAgICAgICAgIH0gLy8gTGluZSBoZWlnaHQuXG5cblxuICAgICAgICAgIGlmICh0aGlzLmF0dHJzLmxpbmVfc3BhY2luZ19tdWx0aXBsaWVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUubGluZUhlaWdodCA9IHRoaXMuYXR0cnMubGluZV9zcGFjaW5nX211bHRpcGxpZXI7XG4gICAgICAgICAgfSAvLyBUZXh0IGNvbG9yLlxuXG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy50ZXh0X2NvbG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUuY29sb3IgPSB0aGlzLmF0dHJzLnRleHRfY29sb3I7XG4gICAgICAgICAgfSAvLyBUZXh0IHN0eWxlcy5cblxuXG4gICAgICAgICAgaWYgKGluZGV4T2YkMS5jYWxsKHRleHRTdHlsZXMsICdib2xkJykgPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5mb250V2VpZ2h0ID0gJ2JvbGQnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpbmRleE9mJDEuY2FsbCh0ZXh0U3R5bGVzLCAnaXRhbGljJykgPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5mb250U3R5bGUgPSAnaXRhbGljJztcbiAgICAgICAgICB9IC8vIFRleHQgc2hhZG93LlxuXG5cbiAgICAgICAgICB0ZXh0U2hhZG93ID0gdGhpcy5nZXRUZXh0U2hhZG93KCk7XG5cbiAgICAgICAgICBpZiAodGV4dFNoYWRvdyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLnRleHRTaGFkb3cgPSBcIlwiLmNvbmNhdCh0ZXh0U2hhZG93LmR4LCBcInB4IFwiKS5jb25jYXQodGV4dFNoYWRvdy5keSwgXCJweCBcIikuY29uY2F0KHRleHRTaGFkb3cucmFkaXVzLCBcInB4IFwiKS5jb25jYXQodGV4dFNoYWRvdy5jb2xvcik7XG4gICAgICAgICAgfSAvLyBUZXh0IGFsaWdubWVudC5cblxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMudGV4dF9hbGlnbm1lbnQgPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS50ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmF0dHJzLnRleHRfYWxpZ25tZW50ID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYXR0cnMudGV4dF9hbGlnbm1lbnQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUudGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICB9IC8vIE1heCBsaW5lcy5cblxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMuc2luZ2xlX2xpbmUgPT09IHRydWUgfHwgdGhpcy5hdHRycy5tYXhfbGluZXMgPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdkYXRhLXNpbmdsZS1saW5lJywgdHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5hdHRycy5tYXhfbGluZXMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmRpc3BsYXkgPSAnLXdlYmtpdC1ib3gnO1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS53ZWJraXRMaW5lQ2xhbXAgPSB0aGlzLmF0dHJzLm1heF9saW5lcztcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUud2Via2l0Qm94T3JpZW50ID0gJ3ZlcnRpY2FsJztcbiAgICAgICAgICB9IC8vIEFsbCBjYXBzLlxuXG5cbiAgICAgICAgICBpZiAodGhpcy5hdHRycy50ZXh0X2FsbF9jYXBzID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLnRleHRUcmFuc2Zvcm0gPSAndXBwZXJjYXNlJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwicGFyc2VTcGFuc1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VTcGFucyh0ZXh0KSB7XG4gICAgICAgICAgdmFyIHNwYW5zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcbiAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgICAgaWYgKHNwYW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHNwYW5zWzBdLnN0YXJ0ID4gMCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICB0ZXh0OiB0ZXh0LnNsaWNlKDAsIHNwYW5zWzBdLnN0YXJ0KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3BhbnMuZm9yRWFjaChmdW5jdGlvbiAoc3BhbiwgaSkge1xuICAgICAgICAgICAgdmFyIGVuZEluZGV4LCBzdGFydEluZGV4O1xuICAgICAgICAgICAgc3RhcnRJbmRleCA9IHNwYW4uc3RhcnQ7XG4gICAgICAgICAgICBlbmRJbmRleCA9IHNwYW4uZW5kO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICB0ZXh0OiB0ZXh0LnNsaWNlKHN0YXJ0SW5kZXgsIGVuZEluZGV4KSxcbiAgICAgICAgICAgICAgc3Bhbjogc3BhblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChpID09PSBzcGFucy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgIGlmIChlbmRJbmRleCA8IHRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgdGV4dDogdGV4dC5zbGljZShlbmRJbmRleCwgdGV4dC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZW5kSW5kZXggPCBzcGFuc1tpICsgMV0uc3RhcnQpIHtcbiAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgIHRleHQ6IHRleHQuc2xpY2UoZW5kSW5kZXgsIHNwYW5zW2kgKyAxXS5zdGFydClcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiZ2V0VGV4dFNoYWRvd1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGV4dFNoYWRvdygpIHtcbiAgICAgICAgICB2YXIgY29sb3IsIGR4LCBkeSwgcmFkaXVzO1xuXG4gICAgICAgICAgaWYgKHV0aWxzJDMuaXNEZWZpbmVkU3RyKHRoaXMuYXR0cnMudGV4dF9zaGFkb3dfY29sb3IpKSB7XG4gICAgICAgICAgICBkeCA9IHR5cGVvZiB0aGlzLmF0dHJzLnRleHRfc2hhZG93X2R4ID09PSAnbnVtYmVyJyA/IHRoaXMuYXR0cnMudGV4dF9zaGFkb3dfZHggOiAwO1xuICAgICAgICAgICAgZHkgPSB0eXBlb2YgdGhpcy5hdHRycy50ZXh0X3NoYWRvd19keSA9PT0gJ251bWJlcicgPyB0aGlzLmF0dHJzLnRleHRfc2hhZG93X2R5IDogMDtcbiAgICAgICAgICAgIHJhZGl1cyA9IHR5cGVvZiB0aGlzLmF0dHJzLnRleHRfc2hhZG93X3JhZGl1cyA9PT0gJ251bWJlcicgPyB0aGlzLmF0dHJzLnRleHRfc2hhZG93X3JhZGl1cyA6IDA7XG4gICAgICAgICAgICBjb2xvciA9IHRoaXMuYXR0cnMudGV4dF9zaGFkb3dfY29sb3I7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBkeDogZHgsXG4gICAgICAgICAgICAgIGR5OiBkeSxcbiAgICAgICAgICAgICAgcmFkaXVzOiByYWRpdXMsXG4gICAgICAgICAgICAgIGNvbG9yOiBjb2xvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIFRleHRWaWV3O1xuICAgIH0oVmlldyQyKTtcbiAgICBUZXh0Vmlldy5wcm90b3R5cGUudGFnTmFtZSA9ICdwJztcbiAgICBUZXh0Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gJ2luY2l0b19fdGV4dC12aWV3JztcbiAgICByZXR1cm4gVGV4dFZpZXc7XG4gIH0uY2FsbChjb21tb25qc0dsb2JhbCk7XG5cbiAgdmFyIEZsZXhMYXlvdXQsXG4gICAgICBWaWV3JDMsXG4gICAgICBhbGxvd2VkSG9zdG5hbWVzLFxuICAgICAgdXRpbHMkNCxcbiAgICAgIGluZGV4T2YkMiA9IFtdLmluZGV4T2Y7XG4gIFZpZXckMyA9IHZpZXc7XG4gIHV0aWxzJDQgPSB1dGlsc18xO1xuICBhbGxvd2VkSG9zdG5hbWVzID0gWyd3d3cueW91dHViZS5jb20nLCAnd3d3LnZpbWVvLmNvbScsICd2aWRlby50d2VudHl0aHJlZS5uZXQnXTtcblxuICB2YXIgdmlkZW9FbWJlZCA9IEZsZXhMYXlvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEZsZXhMYXlvdXQgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoX1ZpZXcpIHtcbiAgICAgIF9pbmhlcml0cyhGbGV4TGF5b3V0LCBfVmlldyk7XG5cbiAgICAgIGZ1bmN0aW9uIEZsZXhMYXlvdXQoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGbGV4TGF5b3V0KTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEZsZXhMYXlvdXQpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuXG4gICAgICBfY3JlYXRlQ2xhc3MoRmxleExheW91dCwgW3tcbiAgICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgIHZhciBsaW5rRWwsIHJlZiwgc3JjO1xuXG4gICAgICAgICAgaWYgKHV0aWxzJDQuaXNEZWZpbmVkU3RyKHRoaXMuYXR0cnMuc3JjKSkge1xuICAgICAgICAgICAgc3JjID0gdGhpcy5hdHRycy5zcmM7XG4gICAgICAgICAgICBsaW5rRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICBsaW5rRWwuc2V0QXR0cmlidXRlKCdocmVmJywgc3JjKTtcblxuICAgICAgICAgICAgaWYgKHJlZiA9IGxpbmtFbC5ob3N0bmFtZSwgaW5kZXhPZiQyLmNhbGwoYWxsb3dlZEhvc3RuYW1lcywgcmVmKSA+PSAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdkYXRhLXNyYycsIHNyYyk7XG4gICAgICAgICAgICAgIHRoaXMubGF6eWxvYWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XSk7XG5cbiAgICAgIHJldHVybiBGbGV4TGF5b3V0O1xuICAgIH0oVmlldyQzKTtcbiAgICBGbGV4TGF5b3V0LnByb3RvdHlwZS5jbGFzc05hbWUgPSAnaW5jaXRvX192aWRlby1lbWJlZC12aWV3JztcbiAgICBGbGV4TGF5b3V0LnByb3RvdHlwZS5sYXp5bG9hZCA9IGZhbHNlO1xuICAgIHJldHVybiBGbGV4TGF5b3V0O1xuICB9LmNhbGwoY29tbW9uanNHbG9iYWwpO1xuXG4gIHZhciBWaWRlbywgVmlldyQ0LCB1dGlscyQ1O1xuICBWaWV3JDQgPSB2aWV3O1xuICB1dGlscyQ1ID0gdXRpbHNfMTtcblxuICB2YXIgdmlkZW8gPSBWaWRlbyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgVmlkZW8gPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoX1ZpZXcpIHtcbiAgICAgIF9pbmhlcml0cyhWaWRlbywgX1ZpZXcpO1xuXG4gICAgICBmdW5jdGlvbiBWaWRlbygpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZGVvKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFZpZGVvKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgX2NyZWF0ZUNsYXNzKFZpZGVvLCBbe1xuICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgaWYgKCF1dGlscyQ1LmlzRGVmaW5lZFN0cih0aGlzLmF0dHJzLnNyYykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmVsLm11dGVkID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmVsLnByZWxvYWQgPSAnbWV0YWRhdGEnO1xuICAgICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsICd0cnVlJyk7XG4gICAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ3dlYmtpdC1wbGF5c2lubGluZScsICd0cnVlJyk7XG4gICAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJywgdGhpcy5hdHRycy5zcmMpO1xuICAgICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdkYXRhLW1pbWUnLCB0aGlzLmF0dHJzLm1pbWUpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMuYXV0b3BsYXkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLmF0dHJzLmxvb3AgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMuZWwubG9vcCA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuYXR0cnMuY29udHJvbHMgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuY29udHJvbHMgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XSk7XG5cbiAgICAgIHJldHVybiBWaWRlbztcbiAgICB9KFZpZXckNCk7XG4gICAgVmlkZW8ucHJvdG90eXBlLmNsYXNzTmFtZSA9ICdpbmNpdG9fX3ZpZGVvLXZpZXcnO1xuICAgIFZpZGVvLnByb3RvdHlwZS50YWdOYW1lID0gJ3ZpZGVvJztcbiAgICBWaWRlby5wcm90b3R5cGUubGF6eWxvYWQgPSB0cnVlO1xuICAgIHJldHVybiBWaWRlbztcbiAgfS5jYWxsKGNvbW1vbmpzR2xvYmFsKTtcblxuICB2YXIgQWJzb2x1dGVMYXlvdXQsIFZpZXckNTtcbiAgVmlldyQ1ID0gdmlldztcblxuICB2YXIgYWJzb2x1dGVMYXlvdXQgPSBBYnNvbHV0ZUxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgQWJzb2x1dGVMYXlvdXQgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoX1ZpZXcpIHtcbiAgICAgIF9pbmhlcml0cyhBYnNvbHV0ZUxheW91dCwgX1ZpZXcpO1xuXG4gICAgICBmdW5jdGlvbiBBYnNvbHV0ZUxheW91dCgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFic29sdXRlTGF5b3V0KTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEFic29sdXRlTGF5b3V0KS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgX2NyZWF0ZUNsYXNzKEFic29sdXRlTGF5b3V0LCBbe1xuICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIEFic29sdXRlTGF5b3V0O1xuICAgIH0oVmlldyQ1KTtcbiAgICBBYnNvbHV0ZUxheW91dC5wcm90b3R5cGUuY2xhc3NOYW1lID0gJ2luY2l0b19fYWJzb2x1dGUtbGF5b3V0LXZpZXcnO1xuICAgIHJldHVybiBBYnNvbHV0ZUxheW91dDtcbiAgfS5jYWxsKGNvbW1vbmpzR2xvYmFsKTtcblxuICB2YXIgRmxleExheW91dCQxLFxuICAgICAgVmlldyQ2LFxuICAgICAgYWxpZ25JdGVtTW9kZXMsXG4gICAgICBmbGV4RGlyZWN0aW9uTW9kZXMsXG4gICAgICBmbGV4SnVzdGlmeU1vZGVzLFxuICAgICAgaW5kZXhPZiQzID0gW10uaW5kZXhPZjtcbiAgVmlldyQ2ID0gdmlldztcbiAgYWxpZ25JdGVtTW9kZXMgPSBbJ3N0cmV0Y2gnLCAnY2VudGVyJywgJ2ZsZXgtc3RhcnQnLCAnZmxleC1lbmQnLCAnYmFzZWxpbmUnXTtcbiAgZmxleEp1c3RpZnlNb2RlcyA9IFsnZmxleC1zdGFydCcsICdmbGV4LWVuZCcsICdjZW50ZXInLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnXTtcbiAgZmxleERpcmVjdGlvbk1vZGVzID0gWydyb3cnLCAnY29sdW1uJ107XG5cbiAgdmFyIGZsZXhMYXlvdXQgPSBGbGV4TGF5b3V0JDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEZsZXhMYXlvdXQgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoX1ZpZXcpIHtcbiAgICAgIF9pbmhlcml0cyhGbGV4TGF5b3V0LCBfVmlldyk7XG5cbiAgICAgIGZ1bmN0aW9uIEZsZXhMYXlvdXQoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGbGV4TGF5b3V0KTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEZsZXhMYXlvdXQpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuXG4gICAgICBfY3JlYXRlQ2xhc3MoRmxleExheW91dCwgW3tcbiAgICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgIHZhciByZWYsIHJlZjEsIHJlZjI7XG5cbiAgICAgICAgICBpZiAocmVmID0gdGhpcy5hdHRycy5sYXlvdXRfZmxleF9hbGlnbl9pdGVtcywgaW5kZXhPZiQzLmNhbGwoYWxpZ25JdGVtTW9kZXMsIHJlZikgPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5hbGlnbkl0ZW1zID0gdGhpcy5hdHRycy5sYXlvdXRfZmxleF9hbGlnbl9pdGVtcztcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUubXNBbGlnbkl0ZW1zID0gdGhpcy5hdHRycy5sYXlvdXRfZmxleF9hbGlnbl9pdGVtcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVmMSA9IHRoaXMuYXR0cnMubGF5b3V0X2ZsZXhfanVzdGlmeV9jb250ZW50LCBpbmRleE9mJDMuY2FsbChmbGV4SnVzdGlmeU1vZGVzLCByZWYxKSA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gdGhpcy5hdHRycy5sYXlvdXRfZmxleF9qdXN0aWZ5X2NvbnRlbnQ7XG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLm1zRmxleFBhY2sgPSB0aGlzLmF0dHJzLmxheW91dF9mbGV4X2p1c3RpZnlfY29udGVudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVmMiA9IHRoaXMuYXR0cnMubGF5b3V0X2ZsZXhfZGlyZWN0aW9uLCBpbmRleE9mJDMuY2FsbChmbGV4RGlyZWN0aW9uTW9kZXMsIHJlZjIpID49IDApIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGUuZmxleERpcmVjdGlvbiA9IHRoaXMuYXR0cnMubGF5b3V0X2ZsZXhfZGlyZWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5tc0ZsZXhEaXJlY3Rpb24gPSB0aGlzLmF0dHJzLmxheW91dF9mbGV4X2RpcmVjdGlvbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gRmxleExheW91dDtcbiAgICB9KFZpZXckNik7XG4gICAgRmxleExheW91dC5wcm90b3R5cGUuY2xhc3NOYW1lID0gJ2luY2l0b19fZmxleC1sYXlvdXQtdmlldyc7XG4gICAgcmV0dXJuIEZsZXhMYXlvdXQ7XG4gIH0uY2FsbChjb21tb25qc0dsb2JhbCk7XG5cbiAgdmFyIEFic29sdXRlTGF5b3V0JDEsIEZsZXhMYXlvdXQkMiwgSW1hZ2VWaWV3LCBJbmNpdG8sIE1pY3JvRXZlbnQsIFRleHRWaWV3JDEsIFZpZGVvRW1iZWRWaWV3LCBWaWRlb1ZpZXcsIFZpZXckNywgdXRpbHMkNjtcbiAgTWljcm9FdmVudCA9IG1pY3JvZXZlbnQ7XG4gIHV0aWxzJDYgPSB1dGlsc18xO1xuICBWaWV3JDcgPSB2aWV3O1xuICBJbWFnZVZpZXcgPSBpbWFnZTtcbiAgVGV4dFZpZXckMSA9IHRleHQ7XG4gIFZpZGVvRW1iZWRWaWV3ID0gdmlkZW9FbWJlZDtcbiAgVmlkZW9WaWV3ID0gdmlkZW87XG4gIEFic29sdXRlTGF5b3V0JDEgPSBhYnNvbHV0ZUxheW91dDtcbiAgRmxleExheW91dCQyID0gZmxleExheW91dDtcblxuICBJbmNpdG8gPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbmNpdG8oY29udGFpbmVyRWwpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluY2l0byk7XG5cbiAgICAgIHRoaXMuY29udGFpbmVyRWwgPSBjb250YWluZXJFbDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICB0aGlzLmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0aGlzLmVudHJpZXMgPSBbXTtcbiAgICAgIHRoaXMuaWRzID0ge307XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEluY2l0bywgW3tcbiAgICAgIGtleTogXCJzdGFydFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICB2YXIgaW5jaXRvO1xuICAgICAgICBpbmNpdG8gPSB0aGlzLm9wdGlvbnMuaW5jaXRvIHx8IHt9O1xuICAgICAgICB0aGlzLmVsLmNsYXNzTmFtZSA9ICdpbmNpdG8nO1xuXG4gICAgICAgIGlmIChpbmNpdG8ubG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgnbGFuZycsIGluY2l0by5sb2NhbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sb2FkRm9udHMoaW5jaXRvLmZvbnRfYXNzZXRzKTtcbiAgICAgICAgdGhpcy5hcHBseVRoZW1lKGluY2l0by50aGVtZSk7XG4gICAgICAgIHRoaXMucmVuZGVyKHRoaXMuZWwsIGluY2l0by5yb290X3ZpZXcpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmFwcGVuZENoaWxkKHRoaXMuZWwpO1xuICAgICAgICB0aGlzLmxhenlsb2FkKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkZXN0cm95XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5yZW1vdmVDaGlsZCh0aGlzLmVsKTtcblxuICAgICAgICBpZiAodGhpcy5sYXp5bG9hZENoZWNrICE9IG51bGwpIHtcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5sYXp5bG9hZENoZWNrLCBmYWxzZSk7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMubGF6eWxvYWRDaGVjaywgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKCdkZXN0cm95ZWQnKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKGVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGF0dHJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgICAgdmFyIG1hdGNoLCByZWYsIHZpZXcsIHZpZXdOYW1lLCB2aWV3cztcbiAgICAgICAgbWF0Y2ggPSBudWxsO1xuICAgICAgICB2aWV3TmFtZSA9IGF0dHJzLnZpZXdfbmFtZTtcbiAgICAgICAgdmlld3MgPSB7XG4gICAgICAgICAgVmlldzogVmlldyQ3LFxuICAgICAgICAgIEltYWdlVmlldzogSW1hZ2VWaWV3LFxuICAgICAgICAgIFRleHRWaWV3OiBUZXh0VmlldyQxLFxuICAgICAgICAgIFZpZGVvRW1iZWRWaWV3OiBWaWRlb0VtYmVkVmlldyxcbiAgICAgICAgICBWaWRlb1ZpZXc6IFZpZGVvVmlldyxcbiAgICAgICAgICBBYnNvbHV0ZUxheW91dDogQWJzb2x1dGVMYXlvdXQkMSxcbiAgICAgICAgICBGbGV4TGF5b3V0OiBGbGV4TGF5b3V0JDJcbiAgICAgICAgfTtcbiAgICAgICAgbWF0Y2ggPSAocmVmID0gdmlld3Nbdmlld05hbWVdKSAhPSBudWxsID8gcmVmIDogVmlldyQ3O1xuICAgICAgICB2aWV3ID0gbmV3IG1hdGNoKGF0dHJzKS5yZW5kZXIoKTtcblxuICAgICAgICBpZiAodmlldy5sYXp5bG9hZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMuZW50cmllcy5wdXNoKHZpZXcuZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGF0dHJzLmlkICE9IG51bGwgJiYgX3R5cGVvZihhdHRycy5tZXRhKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB0aGlzLmlkc1thdHRycy5pZF0gPSBhdHRycy5tZXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXR0cnMuY2hpbGRfdmlld3MpKSB7XG4gICAgICAgICAgYXR0cnMuY2hpbGRfdmlld3MuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRWaWV3KSB7XG4gICAgICAgICAgICBfdGhpcy5yZW5kZXIodmlldy5lbCwgY2hpbGRWaWV3KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKHZpZXcuZWwpO1xuICAgICAgICByZXR1cm4gdmlldy5lbDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiYXBwbHlUaGVtZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5VGhlbWUoKSB7XG4gICAgICAgIHZhciB0aGVtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhlbWUuZm9udF9mYW1pbHkpKSB7XG4gICAgICAgICAgdGhpcy5lbC5zdHlsZS5mb250RmFtaWx5ID0gdGhlbWUuZm9udF9mYW1pbHkuam9pbignLCAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscyQ2LmlzRGVmaW5lZFN0cih0aGVtZS5iYWNrZ3JvdW5kX2NvbG9yKSkge1xuICAgICAgICAgIHRoaXMuZWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gdGhlbWUuYmFja2dyb3VuZF9jb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscyQ2LmlzRGVmaW5lZFN0cih0aGVtZS50ZXh0X2NvbG9yKSkge1xuICAgICAgICAgIHRoaXMuZWwuc3R5bGUuY29sb3IgPSB0aGVtZS50ZXh0X2NvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGVtZS5saW5lX3NwYWNpbmdfbXVsdGlwbGllciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICB0aGlzLmVsLnN0eWxlLmxpbmVIZWlnaHQgPSB0aGVtZS5saW5lX3NwYWNpbmdfbXVsdGlwbGllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJsb2FkRm9udHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkRm9udHMoKSB7XG4gICAgICAgIHZhciBmb250QXNzZXRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgICAgdmFyIGZvbnQsIGtleSwgcmVmLCByZWYxLCBzdHlsZUVsLCB0ZXh0LCB1cmxzLCB2YWx1ZTtcblxuICAgICAgICBpZiAoJ0ZvbnRGYWNlJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgICBmb3IgKGtleSBpbiBmb250QXNzZXRzKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGZvbnRBc3NldHNba2V5XTtcbiAgICAgICAgICAgIHVybHMgPSB2YWx1ZS5zcmMubWFwKGZ1bmN0aW9uIChzcmMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwidXJsKFwiLmNvbmNhdChzcmNbMV0sIFwiKVwiKTtcbiAgICAgICAgICAgIH0pLmpvaW4oJywgJyk7XG4gICAgICAgICAgICBmb250ID0gbmV3IEZvbnRGYWNlKGtleSwgdXJscywge1xuICAgICAgICAgICAgICBzdHlsZTogKHJlZiA9IHZhbHVlLnN0eWxlKSAhPSBudWxsID8gcmVmIDogJ25vcm1hbCcsXG4gICAgICAgICAgICAgIHdlaWdodDogKHJlZjEgPSB2YWx1ZS53ZWlnaHQpICE9IG51bGwgPyByZWYxIDogJ25vcm1hbCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZG9jdW1lbnQuZm9udHMuYWRkKGZvbnQpO1xuICAgICAgICAgICAgZm9udC5sb2FkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gICAgICAgICAgZm9yIChrZXkgaW4gZm9udEFzc2V0cykge1xuICAgICAgICAgICAgdmFsdWUgPSBmb250QXNzZXRzW2tleV07XG4gICAgICAgICAgICB1cmxzID0gdmFsdWUuc3JjLm1hcChmdW5jdGlvbiAoc3JjKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcInVybCgnXCIuY29uY2F0KHNyY1sxXSwgXCInKSBmb3JtYXQoJ1wiKS5jb25jYXQoc3JjWzBdLCBcIicpXCIpO1xuICAgICAgICAgICAgfSkuam9pbignLCAnKTtcbiAgICAgICAgICAgIHRleHQgPSBcIkBmb250LWZhY2Uge1xcbiAgICBmb250LWZhbWlseTogJ1wiLmNvbmNhdChrZXksIFwiJztcXG4gICAgc3JjOiBcIikuY29uY2F0KHVybHMsIFwiO1xcbn1cIik7XG4gICAgICAgICAgICBzdHlsZUVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlRWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImxhenlsb2FkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbGF6eWxvYWQoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBjaGVjaywgaXNJbnNpZGVWaWV3cG9ydCwgb2JzZXJ2ZXIsIHRocmVzaG9sZDtcbiAgICAgICAgdGhyZXNob2xkID0gMTAwMDtcblxuICAgICAgICBpZiAoJ0ludGVyc2VjdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgICBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihmdW5jdGlvbiAoZW50cmllcykge1xuICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcgfHwgZW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gPiAwKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMyLnJldmVhbEVsZW1lbnQoZW50cnkudGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICByb290TWFyZ2luOiBcIlwiLmNvbmNhdCh0aHJlc2hvbGQsIFwicHhcIilcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmVudHJpZXMuZm9yRWFjaChvYnNlcnZlci5vYnNlcnZlLmJpbmQob2JzZXJ2ZXIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc0luc2lkZVZpZXdwb3J0ID0gZnVuY3Rpb24gaXNJbnNpZGVWaWV3cG9ydChlbCkge1xuICAgICAgICAgICAgdmFyIHJlY3QsIHJlZiwgd2luZG93SGVpZ2h0O1xuICAgICAgICAgICAgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgd2luZG93SGVpZ2h0ID0gKHJlZiA9IHdpbmRvdy5pbm5lckhlaWdodCkgIT0gbnVsbCA/IHJlZiA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICByZXR1cm4gcmVjdC50b3AgPD0gd2luZG93SGVpZ2h0ICsgdGhyZXNob2xkICYmIHJlY3QudG9wICsgcmVjdC5oZWlnaHQgPj0gLXRocmVzaG9sZDtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY2hlY2sgPSBmdW5jdGlvbiBjaGVjaygpIHtcbiAgICAgICAgICAgIF90aGlzMi5lbnRyaWVzID0gX3RoaXMyLmVudHJpZXMuZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICBpZiAoaXNJbnNpZGVWaWV3cG9ydChlbCkpIHtcbiAgICAgICAgICAgICAgICBfdGhpczIucmV2ZWFsRWxlbWVudChlbCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICB0aGlzLmxhenlsb2FkQ2hlY2sgPSB1dGlscyQ2LnRocm90dGxlKGNoZWNrLCAxNTApO1xuICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmxhenlsb2FkQ2hlY2ssIGZhbHNlKTtcbiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5sYXp5bG9hZENoZWNrLCBmYWxzZSk7XG4gICAgICAgICAgc2V0VGltZW91dChjaGVjaywgMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmV2ZWFsRWxlbWVudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJldmVhbEVsZW1lbnQoZWwpIHtcbiAgICAgICAgdmFyIGlmcmFtZUVsLCBzb3VyY2VFbCwgc3JjO1xuICAgICAgICBzcmMgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJyk7XG5cbiAgICAgICAgaWYgKGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2ltZycpIHtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZWwuY2xhc3NOYW1lICs9ICcgaW5jaXRvLS1sb2FkZWQnO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnc3JjJywgc3JjKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICBzb3VyY2VFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NvdXJjZScpO1xuICAgICAgICAgIHNvdXJjZUVsLnNldEF0dHJpYnV0ZSgnc3JjJywgc3JjKTtcbiAgICAgICAgICBzb3VyY2VFbC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbWltZScpKTtcbiAgICAgICAgICBlbC5hcHBlbmRDaGlsZChzb3VyY2VFbCk7XG4gICAgICAgIH0gZWxzZSBpZiAoL2luY2l0b19fdmlkZW8tZW1iZWQtdmlldy9naS50ZXN0KGVsLmNsYXNzTmFtZSkpIHtcbiAgICAgICAgICBpZnJhbWVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgICAgIGlmcmFtZUVsLnNldEF0dHJpYnV0ZSgnYWxsb3cnLCAnYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUnKTtcbiAgICAgICAgICBpZnJhbWVFbC5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNyYyk7XG4gICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoaWZyYW1lRWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IFwidXJsKFwiLmNvbmNhdChzcmMsIFwiKVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBJbmNpdG87XG4gIH0oKTtcblxuICBNaWNyb0V2ZW50Lm1peGluKEluY2l0byk7XG4gIHZhciBpbmNpdG8gPSBJbmNpdG87XG5cbiAgcmV0dXJuIGluY2l0bztcblxufSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5jaXRvLmpzLm1hcFxuIiwiSW5jaXRvID0gcmVxdWlyZSAnaW5jaXRvLWJyb3dzZXInXG5NaWNyb0V2ZW50ID0gcmVxdWlyZSAnbWljcm9ldmVudCdcblxuY2xhc3MgVmlld2VyXG4gICAgY29uc3RydWN0b3I6IChAZWwsIEBvcHRpb25zID0ge30pIC0+XG4gICAgICAgIEBpbmNpdG8gPSBuZXcgSW5jaXRvIEBlbCxcbiAgICAgICAgICAgIGluY2l0bzogQG9wdGlvbnMuaW5jaXRvXG4gICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuXG4gICAgXG4gICAgc3RhcnQ6IC0+XG4gICAgICAgIEBpbmNpdG8uc3RhcnQoKVxuXG4gICAgICAgIEBlbC5jbGFzc0xpc3QuYWRkICdzZ24taW5jaXRvLS1zdGFydGVkJ1xuXG4gICAgICAgIEBcbiAgICBcbiAgICBkZXN0cm95OiAtPlxuICAgICAgICBAaW5jaXRvLmRlc3Ryb3koKVxuXG4gICAgICAgIHJldHVyblxuXG5NaWNyb0V2ZW50Lm1peGluIFZpZXdlclxuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXdlciIsIm1vZHVsZS5leHBvcnRzID0gY2xhc3MgQ29udHJvbHNcbiAgICBjb25zdHJ1Y3RvcjogKEB2aWV3ZXIpIC0+XG4gICAgICAgIEBwcm9ncmVzc0VsID0gQHZpZXdlci5lbC5xdWVyeVNlbGVjdG9yICcuc2duLWluY2l0b19fcHJvZ3Jlc3MnXG4gICAgICAgIEBzY3JvbGxMaXN0ZW5lciA9IEBzY3JvbGwuYmluZCBAXG4gICAgICAgIEBpc1Njcm9sbGluZyA9IGZhbHNlXG5cbiAgICAgICAgaWYgQHByb2dyZXNzRWw/XG4gICAgICAgICAgICBAcHJvZ3Jlc3NFbC50ZXh0Q29udGVudCA9IFwiMCAlXCJcblxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJ3Njcm9sbCcsIEBzY3JvbGxMaXN0ZW5lciwgZmFsc2VcblxuICAgICAgICAgICAgQHZpZXdlci5iaW5kICdkZXN0cm95ZWQnLCA9PlxuICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyICdzY3JvbGwnLCBAc2Nyb2xsTGlzdGVuZXJcblxuICAgICAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIHJldHVyblxuICAgIFxuICAgIHNjcm9sbDogLT5cbiAgICAgICAgc2Nyb2xsVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgICAgIHdpbkhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodFxuICAgICAgICBkb2NIZWlnaHQgPSBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodFxuICAgICAgICBwcm9ncmVzcyA9IE1hdGgucm91bmQgc2Nyb2xsVG9wIC8gKGRvY0hlaWdodCAtIHdpbkhlaWdodCkgKiAxMDBcblxuICAgICAgICBjbGVhclRpbWVvdXQgQHNjcm9sbFRpbWVvdXRcbiAgICAgICAgQHNjcm9sbFRpbWVvdXQgPSBzZXRUaW1lb3V0ID0+XG4gICAgICAgICAgICBAaXNTY3JvbGxpbmcgPSBmYWxzZVxuXG4gICAgICAgICAgICBAdmlld2VyLmVsLmNsYXNzTGlzdC5yZW1vdmUgJ3Nnbi1pbmNpdG8tLXNjcm9sbGluZydcblxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICwgMTAwMFxuXG4gICAgICAgIGlmIEBpc1Njcm9sbGluZyBpcyBmYWxzZVxuICAgICAgICAgICAgQHZpZXdlci5lbC5jbGFzc0xpc3QuYWRkICdzZ24taW5jaXRvLS1zY3JvbGxpbmcnXG5cbiAgICAgICAgICAgIEBpc1Njcm9sbGluZyA9IHRydWVcblxuICAgICAgICBAcHJvZ3Jlc3NFbC50ZXh0Q29udGVudCA9IFwiI3twcm9ncmVzc30gJVwiXG5cbiAgICAgICAgcmV0dXJuIiwidXRpbCA9IHJlcXVpcmUgJy4uLy4uL3V0aWwnXG5TR04gPSByZXF1aXJlICcuLi8uLi9jb3JlJ1xuQ29udHJvbHMgPSByZXF1aXJlICcuL2NvbnRyb2xzJ1xuc2NoZW1hID0gcmVxdWlyZSAnLi4vLi4vLi4vZ3JhcGhxbC9pbmNpdG8uZ3JhcGhxbCdcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBCb290c3RyYXBwZXJcbiAgICBjb25zdHJ1Y3RvcjogKEBvcHRpb25zID0ge30pIC0+XG4gICAgICAgIEBkZXZpY2VDYXRlZ29yeSA9IEBnZXREZXZpY2VDYXRlZ29yeSgpXG4gICAgICAgIEBwaXhlbFJhdGlvID0gQGdldFBpeGVsUmF0aW8oKVxuICAgICAgICBAcG9pbnRlciA9IEBnZXRQb2ludGVyKClcbiAgICAgICAgQG9yaWVudGF0aW9uID0gQGdldE9yaWVudGF0aW9uKClcbiAgICAgICAgQHRpbWUgPSBAZ2V0VGltZSgpXG4gICAgICAgIEBsb2NhbGUgPSBAZ2V0TG9jYWxlKClcbiAgICAgICAgQG1heFdpZHRoID0gQGdldE1heFdpZHRoKClcbiAgICAgICAgQHZlcnNpb25zU3VwcG9ydGVkID0gWycxLjAuMCddXG4gICAgICAgIEBzdG9yYWdlS2V5ID0gXCJpbmNpdG8tI3tAb3B0aW9ucy5pZH1cIlxuXG4gICAgICAgIHJldHVyblxuICAgIFxuICAgIGdldERldmljZUNhdGVnb3J5OiAtPlxuICAgICAgICB1dGlsLmdldERldmljZUNhdGVnb3J5KClcbiAgICBcbiAgICBnZXRQaXhlbFJhdGlvOiAtPlxuICAgICAgICB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyBvciAxXG4gICAgXG4gICAgZ2V0UG9pbnRlcjogLT5cbiAgICAgICAgdXRpbC5nZXRQb2ludGVyKClcbiAgICBcbiAgICBnZXRPcmllbnRhdGlvbjogLT5cbiAgICAgICAgb3JpZW50YXRpb24gPSB1dGlsLmdldE9yaWVudGF0aW9uIHNjcmVlbi53aWR0aCwgc2NyZWVuLmhlaWdodFxuICAgICAgICBvcmllbnRhdGlvbiA9ICdob3Jpem9udGFsJyBpZiBvcmllbnRhdGlvbiBpcyAncXVhZHJhdGljJ1xuXG4gICAgICAgIG9yaWVudGF0aW9uXG4gICAgXG4gICAgZ2V0VGltZTogLT5cbiAgICAgICAgbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgXG4gICAgZ2V0TG9jYWxlOiAtPlxuICAgICAgICBsb2NhbGVDaGFpbiA9IFtdXG4gICAgICAgIGxvY2FsZSA9IG51bGxcblxuICAgICAgICBpZiBBcnJheS5pc0FycmF5KG5hdmlnYXRvci5sYW5ndWFnZXMpIGFuZCBuYXZpZ2F0b3IubGFuZ3VhZ2VzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgIGxvY2FsZUNoYWluID0gbG9jYWxlQ2hhaW4uY29uY2F0IG5hdmlnYXRvci5sYW5ndWFnZXNcbiAgICAgICAgZWxzZSBpZiB0eXBlb2YgbmF2aWdhdG9yLmxhbmd1YWdlID09ICdzdHJpbmcnIGFuZCBuYXZpZ2F0b3IubGFuZ3VhZ2UubGVuZ3RoID4gMFxuICAgICAgICAgICAgbG9jYWxlQ2hhaW4ucHVzaCBuYXZpZ2F0b3IubGFuZ3VhZ2VcbiAgICAgICAgZWxzZSBpZiB0eXBlb2YgbmF2aWdhdG9yLmJyb3dzZXJMYW5ndWFnZSA9PSAnc3RyaW5nJyBhbmQgbmF2aWdhdG9yLmJyb3dzZXJMYW5ndWFnZS5sZW5ndGggPiAwXG4gICAgICAgICAgICBsb2NhbGVDaGFpbi5wdXNoIG5hdmlnYXRvci5icm93c2VyTGFuZ3VhZ2VcblxuICAgICAgICBsb2NhbGVDaGFpbi5wdXNoICdlbl9VUydcblxuICAgICAgICBmb3IgcHJlZkxvY2FsZSBpbiBsb2NhbGVDaGFpblxuICAgICAgICAgICAgY29udGludWUgaWYgbm90IHByZWZMb2NhbGU/XG5cbiAgICAgICAgICAgIHByZWZMb2NhbGUgPSBwcmVmTG9jYWxlLnJlcGxhY2UgJy0nLCAnXydcblxuICAgICAgICAgICAgaWYgL1thLXpdW2Etel1fW0EtWl1bQS1aXS9nLnRlc3QgcHJlZkxvY2FsZVxuICAgICAgICAgICAgICAgIGxvY2FsZSA9IHByZWZMb2NhbGVcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgIGxvY2FsZVxuICAgIFxuICAgIGdldE1heFdpZHRoOiAtPlxuICAgICAgICBpZiBNYXRoLmFicyh3aW5kb3cub3JpZW50YXRpb24pIGlzIDkwXG4gICAgICAgICAgICBNYXRoLm1pbiBAb3B0aW9ucy5lbC5vZmZzZXRXaWR0aCwgc2NyZWVuLndpZHRoXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEBvcHRpb25zLmVsLm9mZnNldFdpZHRoXG5cbiAgICBmZXRjaDogKGNhbGxiYWNrKSAtPlxuICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrLmJpbmQgQFxuICAgICAgICBkYXRhID0gU0dOLnN0b3JhZ2Uuc2Vzc2lvbi5nZXQgQHN0b3JhZ2VLZXlcblxuICAgICAgICBpZiBkYXRhPyBhbmQgZGF0YS5yZXNwb25zZT8gYW5kIGRhdGEud2lkdGggaXMgQG1heFdpZHRoXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sgbnVsbCwgZGF0YS5yZXNwb25zZVxuXG4gICAgICAgIFNHTi5HcmFwaEtpdC5yZXF1ZXN0XG4gICAgICAgICAgICBxdWVyeTogc2NoZW1hXG4gICAgICAgICAgICBvcGVyYXRpb25OYW1lOiAnR2V0SW5jaXRvUHVibGljYXRpb24nXG4gICAgICAgICAgICB2YXJpYWJsZXM6XG4gICAgICAgICAgICAgICAgaWQ6IEBvcHRpb25zLmlkXG4gICAgICAgICAgICAgICAgZGV2aWNlQ2F0ZWdvcnk6ICdERVZJQ0VfQ0FURUdPUllfJyArIEBkZXZpY2VDYXRlZ29yeS50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICAgICAgcGl4ZWxSYXRpbzogQHBpeGVsUmF0aW9cbiAgICAgICAgICAgICAgICBwb2ludGVyOiAnUE9JTlRFUl8nICsgQHBvaW50ZXIudG9VcHBlckNhc2UoKVxuICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uOiAnT1JJRU5UQVRJT05fJyArIEBvcmllbnRhdGlvbi50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICAgICAgdGltZTogQHRpbWVcbiAgICAgICAgICAgICAgICBsb2NhbGU6IEBsb2NhbGVcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDogQG1heFdpZHRoXG4gICAgICAgICAgICAgICAgdmVyc2lvbnNTdXBwb3J0ZWQ6IEB2ZXJzaW9uc1N1cHBvcnRlZFxuICAgICAgICAsIChlcnIsIHJlcykgPT5cbiAgICAgICAgICAgIGlmIGVycj9cbiAgICAgICAgICAgICAgICBjYWxsYmFjayBlcnJcbiAgICAgICAgICAgIGVsc2UgaWYgcmVzLmVycm9ycyBhbmQgcmVzLmVycm9ycy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgdXRpbC5lcnJvcihuZXcgRXJyb3IoKSwgJ2dyYXBoIHJlcXVlc3QgY29udGFpbmVkIGVycm9ycycpXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgbnVsbCwgcmVzXG5cbiAgICAgICAgICAgICAgICBTR04uc3RvcmFnZS5zZXNzaW9uLnNldCBAc3RvcmFnZUtleSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IEBtYXhXaWR0aFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZTogcmVzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIHJldHVyblxuICAgIFxuICAgIGNyZWF0ZVZpZXdlcjogKGRhdGEpIC0+XG4gICAgICAgIGlmIG5vdCBkYXRhLmluY2l0bz9cbiAgICAgICAgICAgIHRocm93IHV0aWwuZXJyb3IgbmV3IEVycm9yKCksICd5b3UgbmVlZCB0byBzdXBwbHkgdmFsaWQgSW5jaXRvIHRvIGNyZWF0ZSBhIHZpZXdlcidcblxuICAgICAgICB2aWV3ZXIgPSBuZXcgU0dOLkluY2l0b1B1YmxpY2F0aW9uS2l0LlZpZXdlciBAb3B0aW9ucy5lbCxcbiAgICAgICAgICAgIGlkOiBAb3B0aW9ucy5pZFxuICAgICAgICAgICAgaW5jaXRvOiBkYXRhLmluY2l0b1xuICAgICAgICAgICAgZXZlbnRUcmFja2VyOiBAb3B0aW9ucy5ldmVudFRyYWNrZXJcbiAgICAgICAgY29udHJvbHMgPSBuZXcgQ29udHJvbHMgdmlld2VyXG5cbiAgICAgICAgdmlld2VyIiwibW9kdWxlLmV4cG9ydHMgPVxuICAgIFZpZXdlcjogcmVxdWlyZSAnLi92aWV3ZXInXG5cbiAgICBCb290c3RyYXBwZXI6IHJlcXVpcmUgJy4vYm9vdHN0cmFwcGVyJyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBtYXRjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJG1hdGNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNCBDcmFpZyBDYW1wYmVsbFxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEdBVE9SLkpTXG4gKiBTaW1wbGUgRXZlbnQgRGVsZWdhdGlvblxuICpcbiAqIEB2ZXJzaW9uIDEuMi40XG4gKlxuICogQ29tcGF0aWJsZSB3aXRoIElFIDkrLCBGRiAzLjYrLCBTYWZhcmkgNSssIENocm9tZVxuICpcbiAqIEluY2x1ZGUgbGVnYWN5LmpzIGZvciBjb21wYXRpYmlsaXR5IHdpdGggb2xkZXIgYnJvd3NlcnNcbiAqXG4gKiAgICAgICAgICAgICAuLS5fICAgXyBfIF8gXyBfIF8gXyBfXG4gKiAgLi0nJy0uX18uLScwMCAgJy0nICcgJyAnICcgJyAnICcgJy0uXG4gKiAnLl9fXyAnICAgIC4gICAuLS1fJy0nICctJyAnLScgXyctJyAnLl9cbiAqICBWOiBWICd2di0nICAgJ18gICAnLiAgICAgICAuJyAgXy4uJyAnLicuXG4gKiAgICAnPS5fX19fLj1fLi0tJyAgIDpfLl9fLl9fOl8gICAnLiAgIDogOlxuICogICAgICAgICAgICAoKChfX19fLi0nICAgICAgICAnLS4gIC8gICA6IDpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCgoLSdcXCAuJyAvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX19fXy4uJyAgLidcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgJy0uX19fX18uLSdcbiAqL1xudmFyIF9tYXRjaGVyLFxuICBfbGV2ZWwgPSAwLFxuICBfaWQgPSAwLFxuICBfaGFuZGxlcnMgPSB7fSxcbiAgX2dhdG9ySW5zdGFuY2VzID0ge307XG5cbmZ1bmN0aW9uIF9hZGRFdmVudChnYXRvciwgdHlwZSwgY2FsbGJhY2spIHtcbiAgLy8gYmx1ciBhbmQgZm9jdXMgZG8gbm90IGJ1YmJsZSB1cCBidXQgaWYgeW91IHVzZSBldmVudCBjYXB0dXJpbmdcbiAgLy8gdGhlbiB5b3Ugd2lsbCBnZXQgdGhlbVxuICB2YXIgdXNlQ2FwdHVyZSA9IHR5cGUgPT0gXCJibHVyXCIgfHwgdHlwZSA9PSBcImZvY3VzXCI7XG4gIGdhdG9yLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSk7XG59XG5cbmZ1bmN0aW9uIF9jYW5jZWwoZSkge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG59XG5cbi8qKlxuICAgICAqIHJldHVybnMgZnVuY3Rpb24gdG8gdXNlIGZvciBkZXRlcm1pbmluZyBpZiBhbiBlbGVtZW50XG4gICAgICogbWF0Y2hlcyBhIHF1ZXJ5IHNlbGVjdG9yXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG5mdW5jdGlvbiBfZ2V0TWF0Y2hlcihlbGVtZW50KSB7XG4gIGlmIChfbWF0Y2hlcikge1xuICAgIHJldHVybiBfbWF0Y2hlcjtcbiAgfVxuXG4gIGlmIChlbGVtZW50Lm1hdGNoZXMpIHtcbiAgICBfbWF0Y2hlciA9IGVsZW1lbnQubWF0Y2hlcztcbiAgICByZXR1cm4gX21hdGNoZXI7XG4gIH1cblxuICBpZiAoZWxlbWVudC53ZWJraXRNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICBfbWF0Y2hlciA9IGVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yO1xuICAgIHJldHVybiBfbWF0Y2hlcjtcbiAgfVxuXG4gIGlmIChlbGVtZW50Lm1vek1hdGNoZXNTZWxlY3Rvcikge1xuICAgIF9tYXRjaGVyID0gZWxlbWVudC5tb3pNYXRjaGVzU2VsZWN0b3I7XG4gICAgcmV0dXJuIF9tYXRjaGVyO1xuICB9XG5cbiAgaWYgKGVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICBfbWF0Y2hlciA9IGVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3I7XG4gICAgcmV0dXJuIF9tYXRjaGVyO1xuICB9XG5cbiAgaWYgKGVsZW1lbnQub01hdGNoZXNTZWxlY3Rvcikge1xuICAgIF9tYXRjaGVyID0gZWxlbWVudC5vTWF0Y2hlc1NlbGVjdG9yO1xuICAgIHJldHVybiBfbWF0Y2hlcjtcbiAgfVxuXG4gIC8vIGlmIGl0IGRvZXNuJ3QgbWF0Y2ggYSBuYXRpdmUgYnJvd3NlciBtZXRob2RcbiAgLy8gZmFsbCBiYWNrIHRvIHRoZSBnYXRvciBmdW5jdGlvblxuICBfbWF0Y2hlciA9IEdhdG9yLm1hdGNoZXNTZWxlY3RvcjtcbiAgcmV0dXJuIF9tYXRjaGVyO1xufVxuXG4vKipcbiAgICAgKiBkZXRlcm1pbmVzIGlmIHRoZSBzcGVjaWZpZWQgZWxlbWVudCBtYXRjaGVzIGEgZ2l2ZW4gc2VsZWN0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCAtIHRoZSBlbGVtZW50IHRvIGNvbXBhcmUgYWdhaW5zdCB0aGUgc2VsZWN0b3JcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAgICAgKiBAcGFyYW0ge05vZGV9IGJvdW5kRWxlbWVudCAtIHRoZSBlbGVtZW50IHRoZSBsaXN0ZW5lciB3YXMgYXR0YWNoZWQgdG9cbiAgICAgKiBAcmV0dXJucyB7dm9pZHxOb2RlfVxuICAgICAqL1xuZnVuY3Rpb24gX21hdGNoZXNTZWxlY3RvcihlbGVtZW50LCBzZWxlY3RvciwgYm91bmRFbGVtZW50KSB7XG4gIC8vIG5vIHNlbGVjdG9yIG1lYW5zIHRoaXMgZXZlbnQgd2FzIGJvdW5kIGRpcmVjdGx5IHRvIHRoaXMgZWxlbWVudFxuICBpZiAoc2VsZWN0b3IgPT0gXCJfcm9vdFwiKSB7XG4gICAgcmV0dXJuIGJvdW5kRWxlbWVudDtcbiAgfVxuXG4gIC8vIGlmIHdlIGhhdmUgbW92ZWQgdXAgdG8gdGhlIGVsZW1lbnQgeW91IGJvdW5kIHRoZSBldmVudCB0b1xuICAvLyB0aGVuIHdlIGhhdmUgY29tZSB0b28gZmFyXG4gIGlmIChlbGVtZW50ID09PSBib3VuZEVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBpZiB0aGlzIGlzIGEgbWF0Y2ggdGhlbiB3ZSBhcmUgZG9uZSFcbiAgaWYgKF9nZXRNYXRjaGVyKGVsZW1lbnQpLmNhbGwoZWxlbWVudCwgc2VsZWN0b3IpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICAvLyBpZiB0aGlzIGVsZW1lbnQgZGlkIG5vdCBtYXRjaCBidXQgaGFzIGEgcGFyZW50IHdlIHNob3VsZCB0cnlcbiAgLy8gZ29pbmcgdXAgdGhlIHRyZWUgdG8gc2VlIGlmIGFueSBvZiB0aGUgcGFyZW50IGVsZW1lbnRzIG1hdGNoXG4gIC8vIGZvciBleGFtcGxlIGlmIHlvdSBhcmUgbG9va2luZyBmb3IgYSBjbGljayBvbiBhbiA8YT4gdGFnIGJ1dCB0aGVyZVxuICAvLyBpcyBhIDxzcGFuPiBpbnNpZGUgb2YgdGhlIGEgdGFnIHRoYXQgaXQgaXMgdGhlIHRhcmdldCxcbiAgLy8gaXQgc2hvdWxkIHN0aWxsIHdvcmtcbiAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgIF9sZXZlbCsrO1xuICAgIHJldHVybiBfbWF0Y2hlc1NlbGVjdG9yKGVsZW1lbnQucGFyZW50Tm9kZSwgc2VsZWN0b3IsIGJvdW5kRWxlbWVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2FkZEhhbmRsZXIoZ2F0b3IsIGV2ZW50LCBzZWxlY3RvciwgY2FsbGJhY2spIHtcbiAgaWYgKCFfaGFuZGxlcnNbZ2F0b3IuaWRdKSB7XG4gICAgX2hhbmRsZXJzW2dhdG9yLmlkXSA9IHt9O1xuICB9XG5cbiAgaWYgKCFfaGFuZGxlcnNbZ2F0b3IuaWRdW2V2ZW50XSkge1xuICAgIF9oYW5kbGVyc1tnYXRvci5pZF1bZXZlbnRdID0ge307XG4gIH1cblxuICBpZiAoIV9oYW5kbGVyc1tnYXRvci5pZF1bZXZlbnRdW3NlbGVjdG9yXSkge1xuICAgIF9oYW5kbGVyc1tnYXRvci5pZF1bZXZlbnRdW3NlbGVjdG9yXSA9IFtdO1xuICB9XG5cbiAgX2hhbmRsZXJzW2dhdG9yLmlkXVtldmVudF1bc2VsZWN0b3JdLnB1c2goY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBfcmVtb3ZlSGFuZGxlcihnYXRvciwgZXZlbnQsIHNlbGVjdG9yLCBjYWxsYmFjaykge1xuICAvLyBpZiB0aGVyZSBhcmUgbm8gZXZlbnRzIHRpZWQgdG8gdGhpcyBlbGVtZW50IGF0IGFsbFxuICAvLyB0aGVuIGRvbid0IGRvIGFueXRoaW5nXG4gIGlmICghX2hhbmRsZXJzW2dhdG9yLmlkXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGlmIHRoZXJlIGlzIG5vIGV2ZW50IHR5cGUgc3BlY2lmaWVkIHRoZW4gcmVtb3ZlIGFsbCBldmVudHNcbiAgLy8gZXhhbXBsZTogR2F0b3IoZWxlbWVudCkub2ZmKClcbiAgaWYgKCFldmVudCkge1xuICAgIGZvciAodmFyIHR5cGUgaW4gX2hhbmRsZXJzW2dhdG9yLmlkXSkge1xuICAgICAgaWYgKF9oYW5kbGVyc1tnYXRvci5pZF0uaGFzT3duUHJvcGVydHkodHlwZSkpIHtcbiAgICAgICAgX2hhbmRsZXJzW2dhdG9yLmlkXVt0eXBlXSA9IHt9O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBpZiBubyBjYWxsYmFjayBvciBzZWxlY3RvciBpcyBzcGVjaWZpZWQgcmVtb3ZlIGFsbCBldmVudHMgb2YgdGhpcyB0eXBlXG4gIC8vIGV4YW1wbGU6IEdhdG9yKGVsZW1lbnQpLm9mZignY2xpY2snKVxuICBpZiAoIWNhbGxiYWNrICYmICFzZWxlY3Rvcikge1xuICAgIF9oYW5kbGVyc1tnYXRvci5pZF1bZXZlbnRdID0ge307XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gaWYgYSBzZWxlY3RvciBpcyBzcGVjaWZpZWQgYnV0IG5vIGNhbGxiYWNrIHJlbW92ZSBhbGwgZXZlbnRzXG4gIC8vIGZvciB0aGlzIHNlbGVjdG9yXG4gIC8vIGV4YW1wbGU6IEdhdG9yKGVsZW1lbnQpLm9mZignY2xpY2snLCAnLnN1Yi1lbGVtZW50JylcbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIGRlbGV0ZSBfaGFuZGxlcnNbZ2F0b3IuaWRdW2V2ZW50XVtzZWxlY3Rvcl07XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gaWYgd2UgaGF2ZSBzcGVjaWZpZWQgYW4gZXZlbnQgdHlwZSwgc2VsZWN0b3IsIGFuZCBjYWxsYmFjayB0aGVuIHdlXG4gIC8vIG5lZWQgdG8gbWFrZSBzdXJlIHRoZXJlIGFyZSBjYWxsYmFja3MgdGllZCB0byB0aGlzIHNlbGVjdG9yIHRvXG4gIC8vIGJlZ2luIHdpdGguICBpZiB0aGVyZSBhcmVuJ3QgdGhlbiB3ZSBjYW4gc3RvcCBoZXJlXG4gIGlmICghX2hhbmRsZXJzW2dhdG9yLmlkXVtldmVudF1bc2VsZWN0b3JdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gaWYgdGhlcmUgYXJlIHRoZW4gbG9vcCB0aHJvdWdoIGFsbCB0aGUgY2FsbGJhY2tzIGFuZCBpZiB3ZSBmaW5kXG4gIC8vIG9uZSB0aGF0IG1hdGNoZXMgcmVtb3ZlIGl0IGZyb20gdGhlIGFycmF5XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgX2hhbmRsZXJzW2dhdG9yLmlkXVtldmVudF1bc2VsZWN0b3JdLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKF9oYW5kbGVyc1tnYXRvci5pZF1bZXZlbnRdW3NlbGVjdG9yXVtpXSA9PT0gY2FsbGJhY2spIHtcbiAgICAgIF9oYW5kbGVyc1tnYXRvci5pZF1bZXZlbnRdW3NlbGVjdG9yXS5zcGxpY2UoaSwgMSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX2hhbmRsZUV2ZW50KGlkLCBlLCB0eXBlKSB7XG4gIGlmICghX2hhbmRsZXJzW2lkXVt0eXBlXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQsXG4gICAgc2VsZWN0b3IsXG4gICAgbWF0Y2gsXG4gICAgbWF0Y2hlcyA9IHt9LFxuICAgIGkgPSAwLFxuICAgIGogPSAwO1xuXG4gIC8vIGZpbmQgYWxsIGV2ZW50cyB0aGF0IG1hdGNoXG4gIF9sZXZlbCA9IDA7XG4gIGZvciAoc2VsZWN0b3IgaW4gX2hhbmRsZXJzW2lkXVt0eXBlXSkge1xuICAgIGlmIChfaGFuZGxlcnNbaWRdW3R5cGVdLmhhc093blByb3BlcnR5KHNlbGVjdG9yKSkge1xuICAgICAgbWF0Y2ggPSBfbWF0Y2hlc1NlbGVjdG9yKHRhcmdldCwgc2VsZWN0b3IsIF9nYXRvckluc3RhbmNlc1tpZF0uZWxlbWVudCk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgbWF0Y2ggJiZcbiAgICAgICAgR2F0b3IubWF0Y2hlc0V2ZW50KFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgX2dhdG9ySW5zdGFuY2VzW2lkXS5lbGVtZW50LFxuICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgIHNlbGVjdG9yID09IFwiX3Jvb3RcIixcbiAgICAgICAgICBlXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBfbGV2ZWwrKztcbiAgICAgICAgX2hhbmRsZXJzW2lkXVt0eXBlXVtzZWxlY3Rvcl0ubWF0Y2ggPSBtYXRjaDtcbiAgICAgICAgbWF0Y2hlc1tfbGV2ZWxdID0gX2hhbmRsZXJzW2lkXVt0eXBlXVtzZWxlY3Rvcl07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gc3RvcFByb3BhZ2F0aW9uKCkgZmFpbHMgdG8gc2V0IGNhbmNlbEJ1YmJsZSB0byB0cnVlIGluIFdlYmtpdFxuICAvLyBAc2VlIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTE2MjI3MFxuICBlLnN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIGUuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgfTtcblxuICBmb3IgKGkgPSAwOyBpIDw9IF9sZXZlbDsgaSsrKSB7XG4gICAgaWYgKG1hdGNoZXNbaV0pIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtYXRjaGVzW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChtYXRjaGVzW2ldW2pdLmNhbGwobWF0Y2hlc1tpXS5tYXRjaCwgZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgR2F0b3IuY2FuY2VsKGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlLmNhbmNlbEJ1YmJsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAgICAgKiBiaW5kcyB0aGUgc3BlY2lmaWVkIGV2ZW50cyB0byB0aGUgZWxlbWVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd8QXJyYXl9IGV2ZW50c1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gcmVtb3ZlXG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKi9cbmZ1bmN0aW9uIF9iaW5kKGV2ZW50cywgc2VsZWN0b3IsIGNhbGxiYWNrLCByZW1vdmUpIHtcbiAgLy8gZmFpbCBzaWxlbnRseSBpZiB5b3UgcGFzcyBudWxsIG9yIHVuZGVmaW5lZCBhcyBhbiBhbGVtZW50XG4gIC8vIGluIHRoZSBHYXRvciBjb25zdHJ1Y3RvclxuICBpZiAoIXRoaXMuZWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghKGV2ZW50cyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgIGV2ZW50cyA9IFtldmVudHNdO1xuICB9XG5cbiAgaWYgKCFjYWxsYmFjayAmJiB0eXBlb2Ygc2VsZWN0b3IgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2FsbGJhY2sgPSBzZWxlY3RvcjtcbiAgICBzZWxlY3RvciA9IFwiX3Jvb3RcIjtcbiAgfVxuXG4gIHZhciBpZCA9IHRoaXMuaWQsXG4gICAgaTtcblxuICBmdW5jdGlvbiBfZ2V0R2xvYmFsQ2FsbGJhY2sodHlwZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICBfaGFuZGxlRXZlbnQoaWQsIGUsIHR5cGUpO1xuICAgIH07XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJlbW92ZSkge1xuICAgICAgX3JlbW92ZUhhbmRsZXIodGhpcywgZXZlbnRzW2ldLCBzZWxlY3RvciwgY2FsbGJhY2spO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKCFfaGFuZGxlcnNbaWRdIHx8ICFfaGFuZGxlcnNbaWRdW2V2ZW50c1tpXV0pIHtcbiAgICAgIEdhdG9yLmFkZEV2ZW50KHRoaXMsIGV2ZW50c1tpXSwgX2dldEdsb2JhbENhbGxiYWNrKGV2ZW50c1tpXSkpO1xuICAgIH1cblxuICAgIF9hZGRIYW5kbGVyKHRoaXMsIGV2ZW50c1tpXSwgc2VsZWN0b3IsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAgICAgKiBHYXRvciBvYmplY3QgY29uc3RydWN0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudFxuICAgICAqL1xuZnVuY3Rpb24gR2F0b3IoZWxlbWVudCwgaWQpIHtcbiAgLy8gY2FsbGVkIGFzIGZ1bmN0aW9uXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBHYXRvcikpIHtcbiAgICAvLyBvbmx5IGtlZXAgb25lIEdhdG9yIGluc3RhbmNlIHBlciBub2RlIHRvIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgZG9uJ3QgY3JlYXRlIGEgdG9uIG9mIG5ldyBvYmplY3RzIGlmIHlvdSB3YW50IHRvIGRlbGVnYXRlXG4gICAgLy8gbXVsdGlwbGUgZXZlbnRzIGZyb20gdGhlIHNhbWUgbm9kZVxuICAgIC8vXG4gICAgLy8gZm9yIGV4YW1wbGU6IEdhdG9yKGRvY3VtZW50KS5vbiguLi5cbiAgICBmb3IgKHZhciBrZXkgaW4gX2dhdG9ySW5zdGFuY2VzKSB7XG4gICAgICBpZiAoX2dhdG9ySW5zdGFuY2VzW2tleV0uZWxlbWVudCA9PT0gZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gX2dhdG9ySW5zdGFuY2VzW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2lkKys7XG4gICAgX2dhdG9ySW5zdGFuY2VzW19pZF0gPSBuZXcgR2F0b3IoZWxlbWVudCwgX2lkKTtcblxuICAgIHJldHVybiBfZ2F0b3JJbnN0YW5jZXNbX2lkXTtcbiAgfVxuXG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gIHRoaXMuaWQgPSBpZDtcbn1cblxuLyoqXG4gICAgICogYWRkcyBhbiBldmVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd8QXJyYXl9IGV2ZW50c1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKi9cbkdhdG9yLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKGV2ZW50cywgc2VsZWN0b3IsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBfYmluZC5jYWxsKHRoaXMsIGV2ZW50cywgc2VsZWN0b3IsIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICAgICAqIHJlbW92ZXMgYW4gZXZlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfEFycmF5fSBldmVudHNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICovXG5HYXRvci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24oZXZlbnRzLCBzZWxlY3RvciwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIF9iaW5kLmNhbGwodGhpcywgZXZlbnRzLCBzZWxlY3RvciwgY2FsbGJhY2ssIHRydWUpO1xufTtcblxuR2F0b3IubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oKSB7fTtcbkdhdG9yLmNhbmNlbCA9IF9jYW5jZWw7XG5HYXRvci5hZGRFdmVudCA9IF9hZGRFdmVudDtcbkdhdG9yLm1hdGNoZXNFdmVudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gR2F0b3I7XG59XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5leHBvcnRzKSB7XG4gIHdpbmRvdy5HYXRvciA9IEdhdG9yO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBPZmZlckRldGFpbHNcbiAgICBjb25zdHJ1Y3RvcjogKEBvcHRpb25zID0ge30pIC0+XG4gICAgICAgIEBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ2RpdidcblxuICAgICAgICBAZWwuY2xhc3NOYW1lID0gJ3Nnbi1vZmZlci1kZXRhaWxzJ1xuICAgICAgICBAZWwuc2V0QXR0cmlidXRlICd0YWJpbmRleCcsIC0xXG4gICAgICAgIEBlbC5hcHBlbmRDaGlsZCBAb3B0aW9ucy5jb250ZW50RWxcblxuICAgICAgICBAcmVzaXplTGlzdGVuZXIgPSBAcmVzaXplLmJpbmQgQFxuXG4gICAgICAgIEBwb3NpdGlvbigpXG5cbiAgICAgICAgcmV0dXJuXG4gICAgXG4gICAgYXBwZW5kVG86IChlbCkgLT5cbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQgQGVsXG5cbiAgICAgICAgQGVsLm9mZnNldFdpZHRoXG5cbiAgICAgICAgQHNob3coKVxuXG4gICAgICAgIEBcbiAgICBcbiAgICBzaG93OiAtPlxuICAgICAgICBAZWwuY2xhc3NOYW1lICs9ICcgaW4nXG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJ3Jlc2l6ZScsIEByZXNpemVMaXN0ZW5lciwgZmFsc2VcblxuICAgICAgICBAXG4gICAgXG4gICAgZGVzdHJveTogLT5cbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIgJ3Jlc2l6ZScsIEByZXNpemVMaXN0ZW5lclxuXG4gICAgICAgIEBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkIEBlbFxuXG4gICAgICAgIHJldHVyblxuICAgIFxuICAgIHBvc2l0aW9uOiAtPlxuICAgICAgICByZWN0ID0gQG9wdGlvbnMuYW5jaG9yRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgdG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgcmVjdC50b3AgKyBAb3B0aW9ucy5hbmNob3JFbC5vZmZzZXRIZWlnaHRcbiAgICAgICAgbGVmdCA9IHdpbmRvdy5wYWdlWE9mZnNldCArIHJlY3QubGVmdFxuICAgICAgICB3aWR0aCA9IEBvcHRpb25zLmFuY2hvckVsLm9mZnNldFdpZHRoXG5cbiAgICAgICAgQGVsLnN0eWxlLnRvcCA9IHRvcCArICdweCdcbiAgICAgICAgQGVsLnN0eWxlLmxlZnQgPSBsZWZ0ICsgJ3B4J1xuICAgICAgICBAZWwuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCdcblxuICAgICAgICByZXR1cm5cbiAgICBcbiAgICByZXNpemU6IC0+XG4gICAgICAgIEBwb3NpdGlvbigpXG5cbiAgICAgICAgcmV0dXJuIiwiTWljcm9FdmVudCA9IHJlcXVpcmUgJ21pY3JvZXZlbnQnXG5HYXRvciA9IHJlcXVpcmUgJy4uLy4uLy4uLy4uL3ZlbmRvci9nYXRvcidcbk11c3RhY2hlID0gcmVxdWlyZSAnbXVzdGFjaGUnXG5rZXlDb2RlcyA9IHJlcXVpcmUgJy4uLy4uL2tleS1jb2RlcydcblxudGVtcGxhdGUgPSBcIlwiXCJcbjxkaXYgY2xhc3M9XCJzZ24tcG9wb3Zlcl9fYmFja2dyb3VuZFwiIGRhdGEtY2xvc2U+PC9kaXY+XG48ZGl2IGNsYXNzPVwic2duLXBvcG92ZXJfX21lbnVcIj5cbiAgICB7eyNoZWFkZXJ9fVxuICAgICAgICA8ZGl2IGNsYXNzPVwic2duLXBvcG92ZXJfX2hlYWRlclwiPnt7aGVhZGVyfX08L2Rpdj5cbiAgICB7ey9oZWFkZXJ9fVxuICAgIDxkaXYgY2xhc3M9XCJzZ24tcG9wb3Zlcl9fY29udGVudFwiPlxuICAgICAgICA8dWw+XG4gICAgICAgICAgICB7eyNzaW5nbGVDaG9pY2VJdGVtc319XG4gICAgICAgICAgICAgICAgPGxpIGRhdGEtaW5kZXg9XCJ7e2luZGV4fX1cIj5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJzZ24tcG9wb3Zlci1pdGVtX190aXRsZVwiPnt7aXRlbS50aXRsZX19PC9wPlxuICAgICAgICAgICAgICAgICAgICB7eyNpdGVtLnN1YnRpdGxlfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwic2duLXBvcG92ZXItaXRlbV9fc3VidGl0bGVcIj57e2l0ZW0uc3VidGl0bGV9fTwvcD5cbiAgICAgICAgICAgICAgICAgICAge3svaXRlbS5zdWJ0aXRsZX19XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIHt7L3NpbmdsZUNob2ljZUl0ZW1zfX1cbiAgICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuXCJcIlwiXG5cbmNsYXNzIFBvcG92ZXJcbiAgICBjb25zdHJ1Y3RvcjogKEBvcHRpb25zID0ge30pIC0+XG4gICAgICAgIEBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ2RpdidcbiAgICAgICAgQGJhY2tncm91bmRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ2RpdidcbiAgICAgICAgQHJlc2l6ZUxpc3RlbmVyID0gQHJlc2l6ZS5iaW5kIEBcbiAgICAgICAgQHNjcm9sbExpc3RlbmVyID0gQHNjcm9sbC5iaW5kIEBcblxuICAgICAgICByZXR1cm5cblxuICAgIHJlbmRlcjogLT5cbiAgICAgICAgd2lkdGggPSBAb3B0aW9ucy53aWR0aCA/IDEwMFxuICAgICAgICBoZWFkZXIgPSBAb3B0aW9ucy5oZWFkZXJcbiAgICAgICAgdGVtcGxhdGUgPSBAb3B0aW9ucy50ZW1wbGF0ZSBpZiBAb3B0aW9ucy50ZW1wbGF0ZT9cbiAgICAgICAgdHJpZ2dlciA9IEB0cmlnZ2VyLmJpbmQgQFxuICAgICAgICB2aWV3ID1cbiAgICAgICAgICAgIGhlYWRlcjogaGVhZGVyXG4gICAgICAgICAgICBzaW5nbGVDaG9pY2VJdGVtczogQG9wdGlvbnMuc2luZ2xlQ2hvaWNlSXRlbXM/Lm1hcCAoaXRlbSwgaSkgLT5cbiAgICAgICAgICAgICAgICBpdGVtOiBpdGVtXG4gICAgICAgICAgICAgICAgaW5kZXg6IGlcblxuICAgICAgICBAZWwuY2xhc3NOYW1lID0gJ3Nnbi1wb3BvdmVyJ1xuICAgICAgICBAZWwuc2V0QXR0cmlidXRlICd0YWJpbmRleCcsIC0xXG4gICAgICAgIEBlbC5pbm5lckhUTUwgPSBNdXN0YWNoZS5yZW5kZXIgdGVtcGxhdGUsIHZpZXdcblxuICAgICAgICBAcG9zaXRpb24oKVxuICAgICAgICBAYWRkRXZlbnRMaXN0ZW5lcnMoKVxuXG4gICAgICAgIEBcblxuICAgIGRlc3Ryb3k6IC0+XG4gICAgICAgIEdhdG9yKEBlbCkub2ZmKClcblxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciAncmVzaXplJywgQHJlc2l6ZUxpc3RlbmVyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyICdzY3JvbGwnLCBAc2Nyb2xsTGlzdGVuZXJcblxuICAgICAgICBpZiBAZWwucGFyZW50Tm9kZT9cbiAgICAgICAgICAgIEBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkIEBlbFxuXG4gICAgICAgICAgICBAdHJpZ2dlciAnZGVzdHJveWVkJ1xuXG4gICAgICAgIHJldHVyblxuICAgIFxuICAgIHBvc2l0aW9uOiAtPlxuICAgICAgICB0b3AgPSBAb3B0aW9ucy55XG4gICAgICAgIGxlZnQgPSBAb3B0aW9ucy54XG5cbiAgICAgICAgbWVudUVsID0gQGVsLnF1ZXJ5U2VsZWN0b3IgJy5zZ24tcG9wb3Zlcl9fbWVudSdcblxuICAgICAgICB3aWR0aCA9IG1lbnVFbC5vZmZzZXRXaWR0aFxuICAgICAgICBoZWlnaHQgPSBtZW51RWwub2Zmc2V0SGVpZ2h0XG4gICAgICAgIHBhcmVudFdpZHRoID0gQGVsLnBhcmVudE5vZGUub2Zmc2V0V2lkdGhcbiAgICAgICAgcGFyZW50SGVpZ2h0ID0gQGVsLnBhcmVudE5vZGUub2Zmc2V0SGVpZ2h0XG4gICAgICAgIGJvdW5kaW5nUmVjdCA9IEBlbC5wYXJlbnROb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG5cbiAgICAgICAgdG9wIC09IGJvdW5kaW5nUmVjdC50b3BcbiAgICAgICAgbGVmdCAtPSBib3VuZGluZ1JlY3QubGVmdFxuXG4gICAgICAgIHRvcCAtPSB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICAgICAgbGVmdCAtPSB3aW5kb3cucGFnZVhPZmZzZXRcblxuICAgICAgICBpZiB0b3AgKyBoZWlnaHQgPiBwYXJlbnRIZWlnaHRcbiAgICAgICAgICAgIG1lbnVFbC5zdHlsZS50b3AgPSBwYXJlbnRIZWlnaHQgLSBoZWlnaHQgKyAncHgnXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG1lbnVFbC5zdHlsZS50b3AgPSB0b3AgKyAncHgnXG5cbiAgICAgICAgaWYgbGVmdCArIHdpZHRoID4gcGFyZW50V2lkdGhcbiAgICAgICAgICAgIG1lbnVFbC5zdHlsZS5sZWZ0ID0gcGFyZW50V2lkdGggLSB3aWR0aCArICdweCdcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbWVudUVsLnN0eWxlLmxlZnQgPSBsZWZ0ICsgJ3B4J1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuXG4gICAgXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnM6IC0+XG4gICAgICAgIHRyaWdnZXIgPSBAdHJpZ2dlci5iaW5kIEBcblxuICAgICAgICBAZWwuYWRkRXZlbnRMaXN0ZW5lciAna2V5dXAnLCBAa2V5VXAuYmluZChAKVxuXG4gICAgICAgIEdhdG9yKEBlbCkub24gJ2NsaWNrJywgJ1tkYXRhLWluZGV4XScsIChlKSAtPlxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICAgICAgICAgIHRyaWdnZXIgJ3NlbGVjdGVkJywgaW5kZXg6ICtAZ2V0QXR0cmlidXRlICdkYXRhLWluZGV4J1xuXG4gICAgICAgICAgICByZXR1cm5cblxuICAgICAgICBHYXRvcihAZWwpLm9uICdjbGljaycsICdbZGF0YS1jbG9zZV0nLCAoZSkgPT5cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBAZGVzdHJveSgpXG5cbiAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIEdhdG9yKEBlbCkub24gJ2NsaWNrJywgJy5zZ24tcG9wb3Zlcl9fbWVudScsIChlKSAtPlxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuXG4gICAgICAgICAgICByZXR1cm5cblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAncmVzaXplJywgQHJlc2l6ZUxpc3RlbmVyLCBmYWxzZVxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAnc2Nyb2xsJywgQHNjcm9sbExpc3RlbmVyLCBmYWxzZVxuXG4gICAgICAgIHJldHVyblxuXG4gICAga2V5VXA6IChlKSAtPlxuICAgICAgICBAZGVzdHJveSgpIGlmIGUua2V5Q29kZSBpcyBrZXlDb2Rlcy5FU0NcbiAgICAgICAgXG4gICAgICAgIHJldHVyblxuXG4gICAgcmVzaXplOiAtPlxuICAgICAgICBAZGVzdHJveSgpXG5cbiAgICAgICAgcmV0dXJuXG5cbiAgICBzY3JvbGw6IC0+XG4gICAgICAgIEBkZXN0cm95KClcblxuICAgICAgICByZXR1cm5cblxuTWljcm9FdmVudC5taXhpbiBQb3BvdmVyXG5cbm1vZHVsZS5leHBvcnRzID0gUG9wb3ZlclxuIiwiUG9wb3ZlciA9IHJlcXVpcmUgJy4vcG9wb3ZlcidcblxubW9kdWxlLmV4cG9ydHMgPSAoY3R4LCBjYWxsYmFjaykgLT5cbiAgICBpdGVtcyA9IGN0eC5pdGVtc1xuICAgIHBvcG92ZXIgPSBudWxsXG5cbiAgICBpZiBpdGVtcy5sZW5ndGggaXMgMVxuICAgICAgICBjYWxsYmFjayBpdGVtc1swXVxuICAgIGVsc2UgaWYgaXRlbXMubGVuZ3RoID4gMVxuICAgICAgICBwb3BvdmVyID0gbmV3IFBvcG92ZXJcbiAgICAgICAgICAgIGhlYWRlcjogY3R4LmhlYWRlcixcbiAgICAgICAgICAgIHg6IGN0eC54XG4gICAgICAgICAgICB5OiBjdHgueVxuICAgICAgICAgICAgc2luZ2xlQ2hvaWNlSXRlbXM6IGl0ZW1zXG5cbiAgICAgICAgcG9wb3Zlci5iaW5kICdzZWxlY3RlZCcsIChlKSAtPlxuICAgICAgICAgICAgY2FsbGJhY2sgaXRlbXNbZS5pbmRleF1cblxuICAgICAgICAgICAgcG9wb3Zlci5kZXN0cm95KClcblxuICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgcG9wb3Zlci5iaW5kICdkZXN0cm95ZWQnLCAtPlxuICAgICAgICAgICAgY3R4LmVsLmZvY3VzKClcblxuICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgY3R4LmVsLmFwcGVuZENoaWxkIHBvcG92ZXIuZWxcbiAgICAgICAgcG9wb3Zlci5yZW5kZXIoKS5lbC5mb2N1cygpXG5cbiAgICBkZXN0cm95OiAtPlxuICAgICAgICBwb3BvdmVyLmRlc3Ryb3koKSBpZiBwb3BvdmVyP1xuXG4gICAgICAgIHJldHVybiIsIkdhdG9yID0gcmVxdWlyZSAnLi4vLi4vLi4vLi4vdmVuZG9yL2dhdG9yJ1xuXG5tb2R1bGUuZXhwb3J0cyA9XG4gICAgT2ZmZXJEZXRhaWxzOiByZXF1aXJlICcuL29mZmVyLWRldGFpbHMnXG5cbiAgICBQb3BvdmVyOiByZXF1aXJlICcuL3BvcG92ZXInXG5cbiAgICBzaW5nbGVDaG9pY2VQb3BvdmVyOiByZXF1aXJlICcuL3NpbmdsZS1jaG9pY2UtcG9wb3ZlcidcblxuICAgIG9uOiAoZWwsIGV2ZW50cywgc2VsZWN0b3IsIGNhbGxiYWNrKSAtPlxuICAgICAgICBHYXRvcihlbCkub24gZXZlbnRzLCBzZWxlY3RvciwgY2FsbGJhY2tcblxuICAgIG9mZjogKGVsLCBldmVudHMsIHNlbGVjdG9yLCBjYWxsYmFjaykgLT5cbiAgICAgICAgR2F0b3IoZWwpLm9mZiBldmVudHMsIHNlbGVjdG9yLCBjYWxsYmFjayIsIntpc0Jyb3dzZXJ9ID0gcmVxdWlyZSAnLi91dGlsJ1xuXG5TR04gPSByZXF1aXJlICcuL2NvcmUnXG5cbiMgRXhwb3NlIHN0b3JhZ2UgYmFja2VuZHMuXG5TR04uc3RvcmFnZSA9XG4gICAgbG9jYWw6IHJlcXVpcmUgJy4vc3RvcmFnZS9jbGllbnQtbG9jYWwnXG4gICAgc2Vzc2lvbjogcmVxdWlyZSAnLi9zdG9yYWdlL2NsaWVudC1zZXNzaW9uJ1xuICAgIGNvb2tpZTogcmVxdWlyZSAnLi9zdG9yYWdlL2NsaWVudC1jb29raWUnXG5cbiMgRXhwb3NlIHRoZSBkaWZmZXJlbnQga2l0cy5cblNHTi5Bc3NldHNLaXQgPSByZXF1aXJlICcuL2tpdHMvYXNzZXRzJ1xuU0dOLkV2ZW50c0tpdCA9IHJlcXVpcmUgJy4va2l0cy9ldmVudHMnXG5TR04uR3JhcGhLaXQgPSByZXF1aXJlICcuL2tpdHMvZ3JhcGgnXG5TR04uQ29yZUtpdCA9IHJlcXVpcmUgJy4va2l0cy9jb3JlJ1xuU0dOLlBhZ2VkUHVibGljYXRpb25LaXQgPSByZXF1aXJlICcuL2tpdHMvcGFnZWQtcHVibGljYXRpb24nXG5TR04uSW5jaXRvUHVibGljYXRpb25LaXQgPSByZXF1aXJlICcuL2tpdHMvaW5jaXRvLXB1YmxpY2F0aW9uJ1xuU0dOLkNvcmVVSUtpdCA9IHJlcXVpcmUgJy4va2l0cy9jb3JlLXVpJ1xuXG4jIFNldCB0aGUgY29yZSBzZXNzaW9uIGZyb20gdGhlIGNvb2tpZSBzdG9yZSBpZiBwb3NzaWJsZS5cbnNlc3Npb24gPSBTR04uc3RvcmFnZS5jb29raWUuZ2V0ICdzZXNzaW9uJ1xuXG5pZiB0eXBlb2Ygc2Vzc2lvbiBpcyAnb2JqZWN0J1xuICAgIFNHTi5jb25maWcuc2V0XG4gICAgICAgIGNvcmVTZXNzaW9uVG9rZW46IHNlc3Npb24udG9rZW5cbiAgICAgICAgY29yZVNlc3Npb25DbGllbnRJZDogc2Vzc2lvbi5jbGllbnRfaWRcblxuU0dOLmNsaWVudCA9IGRvIC0+XG4gICAgaWQgPSBTR04uc3RvcmFnZS5sb2NhbC5nZXQgJ2NsaWVudC1pZCdcbiAgICBpZCA9IGlkLmRhdGEgaWYgaWQ/LmRhdGFcblxuICAgIGlmIG5vdCBpZD9cbiAgICAgICAgaWQgPSBTR04udXRpbC51dWlkKClcbiAgICAgICAgXG4gICAgICAgIFNHTi5zdG9yYWdlLmxvY2FsLnNldCAnY2xpZW50LWlkJywgaWRcblxuICAgIGlkOiBpZFxuXG4jIExpc3RlbiBmb3IgY2hhbmdlcyBpbiB0aGUgY29uZmlnLlxuU0dOLmNvbmZpZy5iaW5kICdjaGFuZ2UnLCAoY2hhbmdlZEF0dHJpYnV0ZXMpIC0+XG4gICAgZXZlbnRUcmFja2VyID0gY2hhbmdlZEF0dHJpYnV0ZXMuZXZlbnRUcmFja2VyXG5cbiAgICBpZiBldmVudFRyYWNrZXI/XG4gICAgICAgIGV2ZW50VHJhY2tlci50cmFja0NsaWVudFNlc3Npb25PcGVuZWQoKVxuXG4gICAgcmV0dXJuXG5cbmlmIGlzQnJvd3NlcigpXG4gICAgIyBBdXRvY29uZmlndXJlIHRoZSBTREsuXG4gICAgc2NyaXB0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCAnc2duLXNkaydcblxuICAgIGlmIHNjcmlwdEVsP1xuICAgICAgICBhcHBLZXkgPSBzY3JpcHRFbC5nZXRBdHRyaWJ1dGUgJ2RhdGEtYXBwLWtleSdcbiAgICAgICAgdHJhY2tJZCA9IHNjcmlwdEVsLmdldEF0dHJpYnV0ZSAnZGF0YS10cmFjay1pZCdcbiAgICAgICAgY29uZmlnID0ge31cblxuICAgICAgICBjb25maWcuYXBwS2V5ID0gYXBwS2V5IGlmIGFwcEtleT9cbiAgICAgICAgY29uZmlnLmV2ZW50VHJhY2tlciA9IG5ldyBTR04uRXZlbnRzS2l0LlRyYWNrZXIodHJhY2tJZDogdHJhY2tJZCkgaWYgdHJhY2tJZD9cblxuICAgICAgICBTR04uY29uZmlnLnNldCBjb25maWdcblxubW9kdWxlLmV4cG9ydHMgPSBTR05cbiJdLCJuYW1lcyI6WyJhRnVuY3Rpb24iLCJnbG9iYWwiLCJjb3JlIiwicmVxdWlyZSQkMCIsImlkIiwicmVxdWlyZSQkMSIsInVpZCIsImNvZiIsImlzT2JqZWN0IiwiZG9jdW1lbnQiLCJyZXF1aXJlJCQyIiwiYW5PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsIklFOF9ET01fREVGSU5FIiwiZFAiLCJjcmVhdGVEZXNjIiwiaGFzIiwiaGlkZSIsImN0eCIsInJlZGVmaW5lIiwiSXRlcmF0b3JzIiwidG9JbnRlZ2VyIiwiSVRFUkFUT1IiLCJjbGFzc29mIiwiZ2V0SXRlckZuIiwiaXNBcnJheUl0ZXIiLCJ0b0xlbmd0aCIsImNhbGwiLCJwcm9jZXNzIiwiaW52b2tlIiwiY2VsIiwiaHRtbCIsIlByb21pc2UiLCJuYXZpZ2F0b3IiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsIlRBRyIsIlNQRUNJRVMiLCJERVNDUklQVE9SUyIsIlR5cGVFcnJvciIsImlzTm9kZSIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwidXNlckFnZW50IiwicGVyZm9ybSIsImFuSW5zdGFuY2UiLCJyZXF1aXJlJCQzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiJGV4cG9ydCIsInJlcXVpcmUkJDQiLCJyZXF1aXJlJCQ1IiwicmVxdWlyZSQkNiIsIkxJQlJBUlkiLCJwcm9taXNlUmVzb2x2ZSIsInJlcXVpcmUkJDciLCJmb3JPZiIsIklPYmplY3QiLCJkZWZpbmVkIiwidG9JT2JqZWN0IiwicElFIiwibWluIiwidG9BYnNvbHV0ZUluZGV4IiwiJGtleXMiLCJpc1JlZ0V4cCIsImluaGVyaXRJZlJlcXVpcmVkIiwiJGZsYWdzIiwicmVnZXhwRmxhZ3MiLCJyZWdleHBFeGVjIiwid2tzIiwiZmFpbHMiLCJtYXgiLCJmbG9vciIsInJlZ0V4cEV4ZWMiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJ0b09iamVjdCIsInV0aWwiLCJpc0Jyb3dzZXIiLCJ3aW5kb3ciLCJlcnJvciIsImVyciIsIm9wdGlvbnMiLCJrZXkiLCJ2YWx1ZSIsIm1lc3NhZ2UiLCJjb2RlIiwibmFtZSIsInN0YWNrIiwidGltZSIsIkRhdGUiLCJ1dWlkIiwicmVwbGFjZSIsImMiLCJyIiwidiIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsImdldFF1ZXJ5UGFyYW0iLCJmaWVsZCIsInVybCIsImhyZWYiLCJyZWciLCJzdHJpbmciLCJsb2NhdGlvbiIsIlJlZ0V4cCIsImV4ZWMiLCJnZXRSYW5kb21OdW1iZXJCZXR3ZWVuIiwiZnJvbSIsInRvIiwiZ2V0T1MiLCJ1YSIsImluZGV4T2YiLCJnZXREZXZpY2VDYXRlZ29yeSIsImRldmljZUNhdGVnb3J5IiwicGxhdGZvcm0iLCJ0ZXN0IiwiZ2V0UG9pbnRlciIsInBvaW50ZXIiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsImdldE9yaWVudGF0aW9uIiwid2lkdGgiLCJoZWlnaHQiLCJnZXRTY3JlZW5EaW1lbnNpb25zIiwiZGVuc2l0eSIsImxvZ2ljYWwiLCJwaHlzaWNhbCIsInJlZiIsInNjcmVlbiIsInJvdW5kIiwiZ2V0VXRjT2Zmc2V0U2Vjb25kcyIsImphbjEiLCJqYW4yIiwibm93Iiwic3RkVGltZU9mZnNldCIsInRtcCIsImdldEZ1bGxZZWFyIiwidG9HTVRTdHJpbmciLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsImdldFV0Y0RzdE9mZnNldFNlY29uZHMiLCJnZXRUaW1lem9uZU9mZnNldCIsImdldENvbG9yQnJpZ2h0bmVzcyIsImNvbG9yIiwiaGV4IiwicmdiIiwicyIsInN1bSIsIngiLCJwYXJzZUludCIsImJ0b2EiLCJzdHIiLCJidWZmZXIiLCJCdWZmZXIiLCJjaHVuayIsImFyciIsInNpemUiLCJyZXN1bHRzIiwibGVuZ3RoIiwicHVzaCIsInNwbGljZSIsInRocm90dGxlIiwiZm4iLCJ0aHJlc2hvbGQiLCJzY29wZSIsImRlZmVyVGltZXIiLCJsYXN0IiwiYXJncyIsImNvbnRleHQiLCJnZXRUaW1lIiwiYXJndW1lbnRzIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImFwcGx5IiwibG9hZEltYWdlIiwic3JjIiwiY2FsbGJhY2siLCJpbWciLCJJbWFnZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJFcnJvciIsImRpc3RhbmNlIiwibGF0MSIsImxuZzEiLCJsYXQyIiwibG5nMiIsImRpc3QiLCJyYWRsYXQxIiwicmFkbGF0MiIsInJhZHRoZXRhIiwidGhldGEiLCJQSSIsInNpbiIsImNvcyIsImFjb3MiLCJhc3luYyIsInBhcmFsbGVsIiwiYXN5bmNDYWxscyIsInNoYXJlZENhbGxiYWNrIiwiYWxsUmVzdWx0cyIsImNvdW50ZXIiLCJrIiwibWFrZUNhbGxiYWNrIiwiaW5kZXgiLCJpIiwicHJvbWlzZUNhbGxiYWNrSW50ZXJvcCIsImZ1biIsImNiUGFyYW1ldGVySW5kZXgiLCJtYWtlUHJvbWlzZSIsInBhcmFtZXRlcnMiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2FsbFBhcmFtZXRlcnMiLCJqIiwibmVvQ2FsbGJhY2siLCJyZXN1bHQiLCJBcnJheVByb3RvIiwiZW51bUJ1Z0tleXMiLCJnZXRLZXlzIiwiSUVfUFJPVE8iLCJQUk9UT1RZUEUiLCJkUHMiLCJjcmVhdGUiLCJkZXNjcmlwdG9yIiwic2V0VG9TdHJpbmdUYWciLCIkaXRlckNyZWF0ZSIsImdldFByb3RvdHlwZU9mIiwic3RlcCIsImFkZFRvVW5zY29wYWJsZXMiLCJOQU1FIiwicHJvdG8iLCIkaXRlcmF0b3JzIiwiQ29uZmlnIiwiTWljcm9FdmVudCIsImF0dHJzIiwiY29uZmlnIiwiY2hhbmdlZEF0dHJpYnV0ZXMiLCJrZXlzIiwidHJpZ2dlciIsIm9wdGlvbiIsIm1peGluIiwiZGVmaW5lIiwidGhpcyIsIk11c3RhY2hlIiwicGFpcnMiLCJ0IiwidmlldyIsInRlbXBsYXRlIiwicmVuZGVyIiwidXBkYXRlIiwidHJhbnNsYXRpb25zIiwic2V0IiwibG9jYWxlIiwiY29yZVVybCIsImdyYXBoVXJsIiwiZXZlbnRzVHJhY2tVcmwiLCJldmVudHNQdWxzZVVybCIsImFzc2V0c0ZpbGVVcGxvYWRVcmwiLCJTR04iLCJwcmVmaXhLZXkiLCJzdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwiZ2V0IiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5Iiwic2Vzc2lvblN0b3JhZ2UiLCJMQVNUX0lOREVYIiwiY2FsbFJlZ0V4cEV4ZWMiLCJjYSIsImN0IiwibGVuIiwiY29va2llIiwic3BsaXQiLCJ0cmltIiwiZGF0ZSIsImRheXMiLCJzZXRUaW1lIiwidG9VVENTdHJpbmciLCJwcm9ncmVzc0NhbGxiYWNrIiwiZm9ybURhdGEiLCJodHRwIiwidGltZW91dCIsIkZvcm1EYXRhIiwiWE1MSHR0cFJlcXVlc3QiLCJhcHBlbmQiLCJmaWxlIiwic3RhdHVzIiwicmVzcG9uc2UiLCJzdGF0dXNDb2RlIiwiZGF0YSIsInVwbG9hZCIsIm9ucHJvZ3Jlc3MiLCJlIiwibGVuZ3RoQ29tcHV0YWJsZSIsInByb2dyZXNzIiwibG9hZGVkIiwidG90YWwiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJmaWxlVXBsb2FkIiwiZ09QUyIsImNyeXB0IiwiVHJhY2tlciIsIl9kaXNwYXRjaCIsImNsaWVudExvY2FsU3RvcmFnZSIsImRpc3BhdGNoIiwiZGlzcGF0Y2hMaW1pdCIsImRpc3BhdGNoaW5nIiwiZmV0Y2giLCJnZXRQb29sIiwibWQ1IiwicG9vbCIsInNoaXAiLCJBcnJheSIsImlzQXJyYXkiLCJmaWx0ZXIiLCJldnQiLCJfaSIsImdlb2hhc2giLCJjb3VudHJ5IiwidHlwZSIsInByb3BlcnRpZXMiLCJ2ZXJzaW9uIiwidHJhY2tJZCIsIk9iamVjdCIsImFzc2lnbiIsInBvb2xMaW1pdCIsInNoaWZ0IiwiaGFzT3duUHJvcGVydHkiLCJ0cmFja0V2ZW50Iiwidmlld1Rva2VuIiwicGFydHMiLCJjbGllbnQiLCJjb25jYXQiLCJqb2luIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiYXNCeXRlcyIsInNsaWNlIiwiZGVmYXVsdE9wdGlvbnMiLCJldmVudHMiLCJyZXEiLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsInRoZW4iLCJqc29uIiwibmFja3MiLCJmb3JFYWNoIiwicmVzRXZlbnQiLCJwb29sRXZlbnQiLCJjYXRjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJQdWxzZSIsImRlc3Ryb3llZCIsImNvbm5lY3Rpb24iLCJjb25uZWN0IiwiY2xvc2UiLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJvbk9wZW4iLCJiaW5kIiwib25tZXNzYWdlIiwib25NZXNzYWdlIiwib25FcnJvciIsIm9uY2xvc2UiLCJvbkNsb3NlIiwicGFyc2VDb29raWVzIiwicmVxdWVzdCIsImNvb2tpZXMiLCJwYXJzZWRDb29raWVzIiwibWFwIiwia2V5VmFsdWVQYWlyIiwiYXBwS2V5IiwiYXV0aFRva2VuIiwiYXV0aFRva2VuQ29va2llTmFtZSIsInF1ZXJ5Iiwib3BlcmF0aW9uTmFtZSIsInZhcmlhYmxlcyIsImNyZWRlbnRpYWxzIiwiYXV0aENvb2tpZSIsInNlY29uZFRpbWUiLCJDb3JlS2l0Iiwic2Vzc2lvbiIsImVuc3VyZSIsImFwcFNlY3JldCIsImFwcFZlcnNpb24iLCJnZW8iLCJxcyIsInJlZjEiLCJyZWYyIiwidG9rZW4iLCJnZW9sb2NhdGlvbiIsInNpZ24iLCJyX2xvY2FsZSIsImFwaV9hdiIsInJfbGF0IiwibGF0aXR1ZGUiLCJyX2xuZyIsImxvbmdpdHVkZSIsInJfcmFkaXVzIiwicmFkaXVzIiwicl9zZW5zb3IiLCJzZW5zb3IiLCJ2YWwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJyZWYzIiwicmVzcG9uc2VUb2tlbiIsInNhdmVUb2tlbiIsImNvcmVTZXNzaW9uVG9rZW4iLCJjYWxsYmFja1F1ZXVlIiwiY2xpZW50Q29va2llU3RvcmFnZSIsInJlbmV3ZWQiLCJzaGEyNTYiLCJ0dGwiLCJzYXZlQ29va2llIiwic2F2ZUNsaWVudElkIiwiY2xpZW50SWQiLCJjb3JlU2Vzc2lvbkNsaWVudElkIiwiY2xpZW50X2lkIiwicmVuZXciLCJjb21wbGV0ZSIsInF1ZXVlQ291bnQiLCJhc2MiLCJjcmVhdGVDb21tb25qc01vZHVsZSIsIlBhZ2VkUHVibGljYXRpb25QYWdlU3ByZWFkIiwiY29udGVudHNSZW5kZXJlZCIsImhvdHNwb3RzUmVuZGVyZWQiLCJlbCIsInJlbmRlckVsIiwicGFnZXMiLCJwYWdlSWRzIiwiY3JlYXRlRWxlbWVudCIsImdldFBhZ2VzIiwicGFnZSIsImNsYXNzTmFtZSIsInNldEF0dHJpYnV0ZSIsImdldElkIiwibWF4Wm9vbVNjYWxlIiwiaW1hZ2VMb2FkcyIsInBhZ2VDb3VudCIsImdldEVsIiwiaW1hZ2UiLCJsb2FkZXJFbCIsInBhZ2VFbCIsImltYWdlcyIsIm1lZGl1bSIsImFwcGVuZENoaWxkIiwiaW5uZXJIVE1MIiwibGFiZWwiLCJpc0NvbXBsZXRlIiwic3R5bGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJwYWdlU3ByZWFkSWQiLCJwYWdlU3ByZWFkIiwidmVyc29QYWdlU3ByZWFkIiwicGFnZUVscyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZXRBdHRyaWJ1dGUiLCJmaW5kIiwibGFyZ2UiLCJyZW1vdmVBdHRyaWJ1dGUiLCJQYWdlU3ByZWFkIiwiUGFnZWRQdWJsaWNhdGlvblBhZ2VTcHJlYWRzIiwiY29sbGVjdGlvbiIsImlkcyIsImZyYWciLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwicGFnZU1vZGUiLCJmaXJzdFBhZ2UiLCJsYXN0UGFnZSIsIm1pZHN0UGFnZVNwcmVhZHMiLCJwYWdlU3ByZWFkcyIsInBvcCIsIm1pZHN0UGFnZXMiLCJQYWdlU3ByZWFkcyIsIlBhZ2VkUHVibGljYXRpb25Db3JlIiwiVmVyc28iLCJtYWtlT3B0aW9ucyIsImRlZmF1bHRzIiwicGFnZUlkIiwiZ2V0T3B0aW9uIiwiZWxzIiwicm9vdCIsInF1ZXJ5U2VsZWN0b3IiLCJ2ZXJzbyIsImdldFBhZ2VNb2RlIiwicGFnZUxvYWRlZCIsInBhZ2VzTG9hZGVkIiwic2V0Q29sb3IiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwiZ2V0RnJhZyIsImNyZWF0ZVZlcnNvIiwic3RhcnQiLCJkZXN0cm95IiwiZ2V0VmVyc28iLCJyZXNpemVMaXN0ZW5lciIsInJlc2l6ZSIsInVubG9hZExpc3RlbmVyIiwidW5sb2FkIiwiZm9jdXMiLCJwYWdlU3ByZWFkRWwiLCJwYWdlU3ByZWFkRWxzIiwiYmFja2dyb3VuZENvbG9yIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib3B0cyIsIm92ZXJyaWRlUGFnZVNwcmVhZENvbnRlbnRSZWN0IiwiYmVmb3JlTmF2aWdhdGlvbiIsImFmdGVyTmF2aWdhdGlvbiIsImF0dGVtcHRlZE5hdmlnYXRpb24iLCJjbGlja2VkIiwiZG91YmxlQ2xpY2tlZCIsInByZXNzZWQiLCJjb250ZXh0bWVudSIsInBhblN0YXJ0IiwicGFuRW5kIiwiem9vbWVkSW4iLCJ6b29tZWRPdXQiLCJhY3R1YWxIZWlnaHQiLCJhY3R1YWxXaWR0aCIsImNsaWVudFJlY3QiLCJpbWFnZVJhdGlvIiwicGFnZUhlaWdodCIsInBhZ2VXaWR0aCIsInJlY3QiLCJzY2FsZSIsInRvcCIsImxlZnQiLCJyaWdodCIsImJvdHRvbSIsImdldFBhZ2VFbHMiLCJ0cmFuc2Zvcm0iLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhZ2VMYWJlbHMiLCJtYXRjaCIsInZpc2liaWxpdHkiLCJnZXRWaXNpYmlsaXR5IiwicmVuZGVyQ29udGVudHMiLCJjbGVhckNvbnRlbnRzIiwibmV3U3ByZWFkRWwiLCJwYWdlU3ByZWFkQ291bnQiLCJwb3NpdGlvbiIsInByb2dyZXNzTGFiZWwiLCJ0aGVWZXJzbyIsIm5ld1Bvc2l0aW9uIiwiZ2V0UGFnZVNwcmVhZEZyb21Qb3NpdGlvbiIsImdldFBhZ2VTcHJlYWRDb3VudCIsImZvcm1hdFByb2dyZXNzTGFiZWwiLCJyZW5kZXJQYWdlU3ByZWFkcyIsInJlc2V0SWRsZVRpbWVyIiwic3RhcnRJZGxlVGltZXIiLCJuZXdQb3NpdGlvbklzRW5kIiwiaXNJbnNpZGVDb250ZW50IiwiZmluZFBhZ2UiLCJ6b29tSW4iLCJ6b29tT3V0IiwiaWRsZVRpbWVvdXQiLCJnZXRQb3NpdGlvbiIsImdldFBhZ2VJZHMiLCJyZWZyZXNoIiwibmF2aWdhdGVUbyIsImdldFBhZ2VTcHJlYWRQb3NpdGlvbkZyb21QYWdlSWQiLCJkdXJhdGlvbiIsImdldFR5cGUiLCJnZXRDb250ZW50UmVjdCIsInN3aXRjaFBhZ2VNb2RlIiwicGFnZVNwcmVhZFdpZHRoIiwicGFnZVNwcmVhZE1heFpvb21TY2FsZSIsImlkbGVEZWxheSIsInJlc2l6ZURlbGF5IiwiUGFnZWRQdWJsaWNhdGlvbkhvdHNwb3RzIiwiY3VycmVudFBhZ2VTcHJlYWRJZCIsInBhZ2VTcHJlYWRzTG9hZGVkIiwiY2FjaGUiLCJob3RzcG90c1JlY2VpdmVkIiwicmVzaXplZCIsImJvdW5kaW5nUmVjdCIsImNvbnRlbnRSZWN0IiwiaG90c3BvdCIsImhvdHNwb3RFbCIsImhvdHNwb3RFbHMiLCJyYXRpbyIsInJlbmRlckhvdHNwb3QiLCJtYXhYIiwibWF4WSIsIm1pblgiLCJtaW5ZIiwicGFnZU51bWJlciIsInBhZ2VOdW1iZXJzIiwibG9jYXRpb25zIiwiY29vcmRzIiwieSIsInNldENhY2hlIiwicmVuZGVySG90c3BvdHMiLCJyZXF1ZXN0SG90c3BvdHMiLCJnZXRDYWNoZSIsIkVTQyIsIkFSUk9XX1JJR0hUIiwiQVJST1dfTEVGVCIsIlNQQUNFIiwiTlVNQkVSX09ORSIsIlBhZ2VkUHVibGljYXRpb25Db250cm9scyIsImtleUNvZGVzIiwicHJvZ3Jlc3NCYXIiLCJwcmV2Q29udHJvbCIsIm5leHRDb250cm9sIiwia2V5RG93bkxpc3RlbmVyIiwia2V5RG93biIsImtleWJvYXJkIiwicHJldkNsaWNrZWQiLCJuZXh0Q2xpY2tlZCIsImNsb3NlQ2xpY2tlZCIsInNob3dQcm9ncmVzcyIsInZpc2liaWxpdHlDbGFzc05hbWUiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJ0ZXh0Q29udGVudCIsInByZXZlbnREZWZhdWx0Iiwia2V5Q29kZSIsIlBhZ2VkUHVibGljYXRpb25FdmVudFRyYWNraW5nIiwiZXZlbnRUcmFja2VyIiwiaGlkZGVuIiwiYXBwZWFyZWQiLCJkaXNhcHBlYXJlZCIsInBhZ2VTcHJlYWREaXNhcHBlYXJlZCIsInRyYWNrUGFnZWRQdWJsaWNhdGlvbk9wZW5lZCIsImNyZWF0ZVZpZXdUb2tlbiIsInRyYWNrUGFnZWRQdWJsaWNhdGlvblBhZ2VEaXNhcHBlYXJlZCIsInBhZ2VTcHJlYWRBcHBlYXJlZCIsInRyYWNrUGFnZVNwcmVhZERpc2FwcGVhcmVkIiwiQ29udHJvbHMiLCJDb3JlIiwiRXZlbnRUcmFja2luZyIsIkhvdHNwb3RzIiwiVmlld2VyIiwiX2NvcmUiLCJfaG90c3BvdHMiLCJfY29udHJvbHMiLCJfZXZlbnRUcmFja2luZyIsInZpZXdTZXNzaW9uIiwiaG90c3BvdHMiLCJob3RzcG90UXVldWUiLCJwb3BvdmVyIiwiX3NldHVwRXZlbnRMaXN0ZW5lcnMiLCJ0cmFja09wZW5lZCIsIm5hdmlnYXRlVG9JbmRleCIsImZpcnN0IiwicHJldiIsIm5leHQiLCJob3RzcG90c1JlcXVlc3RlZCIsIm92ZXJsYXlFbHMiLCJvdmVybGF5RWwiLCJDb3JlVUlLaXQiLCJzaW5nbGVDaG9pY2VQb3BvdmVyIiwiaGVhZGVyIiwiaXRlbXMiLCJ0aXRsZSIsIm9mZmVyIiwiaGVhZGluZyIsInN1YnRpdGxlIiwicHJpY2luZyIsImN1cnJlbmN5IiwicHJpY2UiLCJob3RzcG90UmVxdWVzdCIsImhvdHNwb3RSYXRpbyIsInByb2Nlc3NIb3RzcG90UXVldWUiLCJwaWNrSG90c3BvdCIsIkJvb3RzdHJhcHBlciIsIlBhZ2VkUHVibGljYXRpb25LaXQiLCJvd25lZEJ5IiwiZGV0YWlscyIsImRlYWxlcl9pZCIsImJyYW5kaW5nIiwicGFnZWZsaXAiLCJkaW1lbnNpb25zIiwidHJhbnNmb3JtUGFnZXMiLCJ6b29tIiwidmlld2VyIiwib2JqIiwiYXBwbHlIb3RzcG90cyIsImZldGNoRGV0YWlscyIsImZldGNoUGFnZXMiLCJjb21tb25qc0dsb2JhbCIsIkluY2l0byIsImluY2l0byIsInByb2dyZXNzRWwiLCJzY3JvbGxMaXN0ZW5lciIsInNjcm9sbCIsImlzU2Nyb2xsaW5nIiwiZG9jSGVpZ2h0Iiwic2Nyb2xsVG9wIiwid2luSGVpZ2h0IiwicGFnZVlPZmZzZXQiLCJpbm5lckhlaWdodCIsImNsaWVudEhlaWdodCIsInNjcm9sbFRpbWVvdXQiLCJzY2hlbWEiLCJwaXhlbFJhdGlvIiwiZ2V0UGl4ZWxSYXRpbyIsIm9yaWVudGF0aW9uIiwiZ2V0TG9jYWxlIiwibWF4V2lkdGgiLCJnZXRNYXhXaWR0aCIsInZlcnNpb25zU3VwcG9ydGVkIiwic3RvcmFnZUtleSIsImRldmljZVBpeGVsUmF0aW8iLCJ0b0lTT1N0cmluZyIsImxvY2FsZUNoYWluIiwicHJlZkxvY2FsZSIsImxhbmd1YWdlcyIsImxhbmd1YWdlIiwiYnJvd3Nlckxhbmd1YWdlIiwiYWJzIiwiR3JhcGhLaXQiLCJ0b1VwcGVyQ2FzZSIsInJlcyIsImVycm9ycyIsImNvbnRyb2xzIiwiSW5jaXRvUHVibGljYXRpb25LaXQiLCJfbWF0Y2hlciIsIl9sZXZlbCIsIl9pZCIsIl9oYW5kbGVycyIsIl9nYXRvckluc3RhbmNlcyIsIl9hZGRFdmVudCIsImdhdG9yIiwidXNlQ2FwdHVyZSIsImVsZW1lbnQiLCJfY2FuY2VsIiwic3RvcFByb3BhZ2F0aW9uIiwiX2dldE1hdGNoZXIiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJHYXRvciIsIm1hdGNoZXNTZWxlY3RvciIsIl9tYXRjaGVzU2VsZWN0b3IiLCJzZWxlY3RvciIsImJvdW5kRWxlbWVudCIsIl9hZGRIYW5kbGVyIiwiZXZlbnQiLCJfcmVtb3ZlSGFuZGxlciIsIl9oYW5kbGVFdmVudCIsInRhcmdldCIsInNyY0VsZW1lbnQiLCJtYXRjaGVzRXZlbnQiLCJjYW5jZWxCdWJibGUiLCJjYW5jZWwiLCJfYmluZCIsIl9nZXRHbG9iYWxDYWxsYmFjayIsImFkZEV2ZW50IiwicHJvdG90eXBlIiwib24iLCJvZmYiLCJtb2R1bGUiLCJleHBvcnRzIiwiT2ZmZXJEZXRhaWxzIiwiY29udGVudEVsIiwic2hvdyIsImFuY2hvckVsIiwicGFnZVhPZmZzZXQiLCJQb3BvdmVyIiwiYmFja2dyb3VuZEVsIiwic2luZ2xlQ2hvaWNlSXRlbXMiLCJpdGVtIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJtZW51RWwiLCJwYXJlbnRIZWlnaHQiLCJwYXJlbnRXaWR0aCIsImtleVVwIiwic2NyaXB0RWwiLCJsb2NhbCIsIkFzc2V0c0tpdCIsIkV2ZW50c0tpdCIsInJlcXVpcmUkJDgiLCJyZXF1aXJlJCQ5IiwicmVxdWlyZSQkMTAiLCJyZXF1aXJlJCQxMSIsInRyYWNrQ2xpZW50U2Vzc2lvbk9wZW5lZCIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QUssSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssSUFBSSxPQUFPO0lBQzlDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hFO0dBQ0QsT0FBTyxHQUFHLFNBQVMsS0FBSyxpQkFBaUI7SUFDeEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUNsQyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssSUFBSSxPQUFPO0lBQzlDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUNsRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBQztLQUM1RTtJQUNEO0dBQ0QsQ0FBQzs7Ozs7Ozs7O0VBU0YsVUFBVSxDQUFDLEtBQUssR0FBRyxTQUFTLFVBQVUsQ0FBQztHQUN0QyxJQUFJLEtBQUssR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7R0FDMUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUM7SUFDckMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFO0lBQ0Q7OztFQUdE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Q0FBQyxDQUFDLFdBQVcsSUFBSSxNQUFNLEVBQUU7VUFDM0IsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxVQUFVLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDO1NBQ3ZFOzs7UUFHRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7VUFDL0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsT0FBTyxDQUFDLENBQUM7T0FDVjs7O01BR0QsV0FBVyxFQUFFLFNBQVMsQ0FBQyxFQUFFO1FBQ3ZCLEtBQUssSUFBSSxLQUFLLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1VBQzdCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5QyxPQUFPLEtBQUssQ0FBQztPQUNkOzs7TUFHRCxZQUFZLEVBQUUsU0FBUyxLQUFLLEVBQUU7UUFDNUIsS0FBSyxJQUFJLEtBQUssR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDO1VBQzlELEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDOUMsT0FBTyxLQUFLLENBQUM7T0FDZDs7O01BR0QsWUFBWSxFQUFFLFNBQVMsS0FBSyxFQUFFO1FBQzVCLEtBQUssSUFBSSxLQUFLLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDO1VBQ3ZELEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7UUFDeEQsT0FBTyxLQUFLLENBQUM7T0FDZDs7O01BR0QsVUFBVSxFQUFFLFNBQVMsS0FBSyxFQUFFO1FBQzFCLEtBQUssSUFBSSxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7VUFDL0MsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7VUFDeEMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDekM7UUFDRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7T0FDckI7OztNQUdELFVBQVUsRUFBRSxTQUFTLEdBQUcsRUFBRTtRQUN4QixLQUFLLElBQUksS0FBSyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDO1VBQ2hELEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDN0MsT0FBTyxLQUFLLENBQUM7T0FDZDs7O01BR0QsYUFBYSxFQUFFLFNBQVMs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LFVBQVU7ZUFDM0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQztPQUNwRDs7O01BR0QsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO01BQy9CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7TUFHcEMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUc7VUFDWixFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUc7VUFDWixFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUc7VUFDWixFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQzs7TUFFakIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTs7UUFFckMsSUFBSSxFQUFFLEdBQUcsQ0FBQztZQUNOLEVBQUUsR0FBRyxDQUFDO1lBQ04sRUFBRSxHQUFHLENBQUM7WUFDTixFQUFFLEdBQUcsQ0FBQyxDQUFDOztRQUVYLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUM1QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDN0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQzs7UUFFN0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUMzQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQztRQUM3QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDOztRQUU3QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDN0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUM1QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7O1FBRTVDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDN0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQztRQUM3QyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7UUFFNUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7T0FDcEI7O01BRUQsT0FBT0EsUUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbkMsQ0FBQzs7O0lBR0YsR0FBRyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtNQUN4QyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQzdDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMxQyxDQUFDO0lBQ0YsR0FBRyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtNQUN4QyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQzdDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMxQyxDQUFDO0lBQ0YsR0FBRyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtNQUN4QyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQ3hDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMxQyxDQUFDO0lBQ0YsR0FBRyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtNQUN4QyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztNQUMzQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDMUMsQ0FBQzs7O0lBR0YsR0FBRyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDcEIsR0FBRyxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7O0lBRXJCLGNBQWMsR0FBRyxVQUFVLE9BQU8sRUFBRSxPQUFPLEVBQUU7TUFDM0MsSUFBSSxPQUFPLEtBQUssU0FBUyxJQUFJLE9BQU8sS0FBSyxJQUFJO1FBQzNDLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLEdBQUcsT0FBTyxDQUFDLENBQUM7O01BRWpELElBQUksV0FBVyxHQUFHQSxRQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztNQUM1RCxPQUFPLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxHQUFHLFdBQVc7VUFDM0MsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7VUFDNURBLFFBQUssQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDbkMsQ0FBQzs7R0FFSCxHQUFHLENBQUM7OztFQy9KTCxJQUFBN0MsS0FBQSxFQUFBOEMsT0FBQSxFQUFBQyxTQUFBLEVBQUFDLGtCQUFBLEVBQUFDLFFBQUEsRUFBQUMsYUFBQSxFQUFBQyxXQUFBLEVBQUFDLEtBQUEsRUFBQUMsT0FBQSxFQUFBQyxLQUFBLEVBQUFDLElBQUEsRUFBQUMsSUFBQTs7RUFBQUosS0FBQSxHQUFRbFQsZUFBUjtBQUNBb1QsT0FBQSxHQUFNbFQsR0FBTjtBQUNBNFAsT0FBQSxHQUFNdlAsR0FBTjtFQUNBdVMsa0JBQUEsR0FBcUJyUSxXQUFyQjs7RUFFQTBRLE9BQUEsR0FBVTtRQUNOckI7RUFBQUEsRUFBQUEsSUFBQSxHQUFPZ0Isa0JBQWtCLENBQUM1QyxHQUFuQixDQUF1QixvQkFBdkIsQ0FBUDs7RUFDQSxNQUFhcUQsS0FBSyxDQUFDQyxPQUFOLENBQWMxQixJQUFkLE1BQXVCLEtBQXBDO0VBQUFBLElBQUFBLElBQUEsR0FBTyxFQUFQOzs7RUFDQUEsRUFBQUEsSUFBQSxHQUFPQSxJQUFJLENBQUMyQixNQUFMLENBQVksVUFBQ0MsR0FBRDthQUNmLE9BQU9BLEdBQUcsQ0FBQ0MsRUFBWCxLQUFpQjtFQURkLEdBQUEsQ0FBUDtXQUdBN0I7R0FOSjs7RUFRQXVCLElBQUEsR0FBT0YsT0FBQSxFQUFQOztFQUVBLFdBQUEsR0FBdUJQO1FBQU5BOzs7RUFLYjtZQUFjak8sOEVBQVU7Ozs7WUFDcEJDLEtBQUE4QyxLQUFBN0M7OztFQUFBLFdBQUFELEdBQUEsT0FBQTs7RUFDSSxhQUFFQSxHQUFGLElBQVNELE9BQVEsQ0FBQUMsR0FBQSxDQUFSLElBQWdCQyxLQUF6Qjs7O0VBRUosV0FBQ3FCLFFBQUQsR0FDSTtFQUFBME4sUUFBQUEsT0FBQSxFQUFTLElBQVQ7RUFDQTFPLFFBQUFBLElBQUEsRUFBTSxJQUROO0VBRUEyTyxRQUFBQSxPQUFBLEVBQVM7RUFGVCxPQURKO0VBSUEsV0FBQ1osV0FBRCxHQUFlLEtBQWY7RUFFQUYsTUFBQUEsUUFBQTs7Ozs7O21DQUlTZTtjQUFNQyxpRkFBYTtjQUFJQyw4RUFBVTtjQUMxQ04sS0FBQTFMOztFQUFBLFlBQTZELE9BQU84TCxJQUFQLEtBQWlCLFFBQTlFO0VBQUEsZ0JBQU1oRSxLQUFHLENBQUN4TCxJQUFKLENBQVNHLEtBQVQsQ0FBZSxJQUFJdUcsS0FBSixDQUFVLHdCQUFWLENBQWYsQ0FBTjs7O0VBQ0EsWUFBYyxZQUFBLFFBQWQ7Ozs7RUFFQSxZQUFHOEUsS0FBRyxDQUFDdkIsTUFBSixDQUFXMkIsR0FBWCxDQUFlLFFBQWYsTUFBNEIsS0FBQytELE9BQWhDOztFQUVJLGdCQUFNbkUsS0FBRyxDQUFDeEwsSUFBSixDQUFTRyxLQUFULENBQWUsSUFBSXVHLEtBQUosQ0FBVSw4SUFBVixDQUFmLENBQU47OztFQUVKaEQsUUFBQUEsR0FBQSxHQUFNLElBQUk3QyxJQUFKLEdBQVdpRixPQUFYLEVBQU47RUFDQXNKLFFBQUFBLEdBQUEsR0FBTVEsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkosVUFBbEIsRUFBOEI7RUFDaEMsZ0JBQU1ELElBRDBCO0VBRWhDLGdCQUFNRSxPQUYwQjtFQUdoQyxnQkFBTWxFLEtBQUcsQ0FBQ3hMLElBQUosQ0FBU2MsSUFBVCxFQUgwQjtFQUloQyxnQkFBTUssSUFBSSxDQUFDbUMsS0FBTCxDQUFXLElBQUl6QyxJQUFKLEdBQVdpRixPQUFYLEtBQXVCLElBQWxDLENBSjBCO0VBS2hDLGdCQUFNLEtBQUM2SjtFQUx5QixTQUE5QixDQUFOOztFQVFBLFlBQWtDLGFBQUEsUUFBQSxRQUFsQztFQUFBUCxVQUFBQSxHQUFJLENBQUEsS0FBQSxDQUFKLEdBQWEsS0FBQ3hOLFFBQUQsQ0FBVTBOLE9BQXZCOzs7RUFDQSxZQUFnQyxhQUFBLEtBQUEsUUFBaEM7RUFBQUYsVUFBQUEsR0FBSSxDQUFBLE1BQUEsQ0FBSixHQUFjLEtBQUN4TixRQUFELENBQVVoQixJQUF4Qjs7O0VBQ0EsWUFBa0MsYUFBQSxRQUFBLFFBQWxDO0VBQUF3TyxVQUFBQSxHQUFJLENBQUEsS0FBQSxDQUFKLEdBQWEsS0FBQ3hOLFFBQUQsQ0FBVTJOLE9BQXZCOzs7RUFFQVIsUUFBQUEsSUFBSSxDQUFDM0osSUFBTCxDQUFVZ0ssR0FBVjs7aUJBQ21CTCxJQUFJLENBQUM1SixNQUFMLEdBQWMsS0FBQzJLO0VBQWxDZixVQUFBQSxJQUFJLENBQUNnQixLQUFMOzs7RUFFQXRCLFFBQUFBLFFBQUE7aUJBRUE7Ozs7O2NBRVU3TSwrRUFBVztjQUNyQnRCLEtBQUFDOztFQUFBLGFBQUFELEdBQUEsWUFBQTs7O0VBQ0ksY0FBRyxLQUFDc0IsUUFBRCxDQUFVb08sY0FBVixDQUF5QjFQLEdBQXpCLENBQUg7RUFDSSxpQkFBQ3NCLFFBQUQsQ0FBVXRCLEdBQVYsSUFBaUJDLEtBQWpCOzs7O2lCQUVSOzs7O29EQUUwQmtQLFlBQVlDO2lCQUN0QyxLQUFDTyxVQUFELENBQVksQ0FBWixFQUFlUixVQUFmLEVBQTJCQyxPQUEzQjs7Ozs2REFFbUNELFlBQVlDO2lCQUMvQyxLQUFDTyxVQUFELENBQVksQ0FBWixFQUFlUixVQUFmLEVBQTJCQyxPQUEzQjs7Ozt5Q0FFZUQsWUFBWUM7aUJBQzNCLEtBQUNPLFVBQUQsQ0FBWSxDQUFaLEVBQWVSLFVBQWYsRUFBMkJDLE9BQTNCOzs7O2lEQUV1QkQsWUFBWUM7aUJBQ25DLEtBQUNPLFVBQUQsQ0FBWSxDQUFaLEVBQWVSLFVBQWYsRUFBMkJDLE9BQTNCOzs7O3NDQUVZRCxZQUFZQztpQkFDeEIsS0FBQ08sVUFBRCxDQUFZLENBQVosRUFBZVIsVUFBZixFQUEyQkMsT0FBM0I7Ozs7O2NBR0E5SyxLQUFBc0w7OzRDQURpQkM7RUFBQUEsVUFBQUE7OztFQUNqQnZMLFFBQUFBLEdBQUEsR0FBTSxDQUFDNEcsS0FBRyxDQUFDNEUsTUFBSixDQUFXelUsRUFBWixFQUFnQjBVLE1BQWhCLENBQXVCRixLQUF2QixFQUE4QkcsSUFBOUIsQ0FBbUMsRUFBbkMsQ0FBTjtFQUNBSixRQUFBQSxTQUFBLEdBQVkxRSxLQUFHLENBQUN4TCxJQUFKLENBQVMyRSxJQUFULENBQWM0TCxNQUFNLENBQUNDLFlBQVAsQ0FBb0J0SyxLQUFwQixDQUEwQixJQUExQixFQUFpQzRJLEtBQUEsQ0FBSWxLLEdBQUosRUFBUztFQUFDNkwsVUFBQUEsT0FBQSxFQUFTO0VBQVYsU0FBVCxDQUFELENBQTRCQyxLQUE1QixDQUFrQyxDQUFsQyxFQUFvQyxDQUFwQyxDQUFoQyxDQUFkLENBQVo7aUJBRUFSOzs7Ozs7OztzQkF4RUpTLGlCQUNJO0VBQUFoQixJQUFBQSxPQUFBLEVBQVMsSUFBVDtFQUNBRyxJQUFBQSxTQUFBLEVBQVc7RUFEWDs7d0JBRlI7O0VBMkVBbkIsV0FBQSxHQUFjLEtBQWQ7RUFDQUQsYUFBQSxHQUFnQixHQUFoQjs7RUFFQU0sSUFBQSxHQUFPO1FBQUM0Qiw2RUFBUztRQUNiQztFQUFBQSxFQUFBQSxHQUFBLEdBQU1qQyxLQUFBLENBQU1wRCxLQUFHLENBQUN2QixNQUFKLENBQVcyQixHQUFYLENBQWUsZ0JBQWYsQ0FBTixFQUNGO0VBQUFrRixJQUFBQSxNQUFBLEVBQVEsTUFBUjtFQUNBOUQsSUFBQUEsT0FBQSxFQUFTLE9BQU8sRUFEaEI7RUFFQStELElBQUFBLE9BQUEsRUFDSTtFQUFBLHNCQUFnQjtFQUFoQixLQUhKO0VBSUFDLElBQUFBLElBQUEsRUFBTW5GLElBQUksQ0FBQ0UsU0FBTCxDQUFlO0VBQUE2RSxNQUFBQSxNQUFBLEVBQVFBO0VBQVIsS0FBZjtFQUpOLEdBREUsQ0FBTjtXQU9BQyxHQUFHLENBQUNJLElBQUosQ0FBUyxVQUFDM0QsUUFBRDthQUFjQSxRQUFRLENBQUM0RCxJQUFUO0VBQXZCLEdBQUE7R0FSSjs7RUFTQTNDLFNBQUEsR0FBWTtRQUNScUMsUUFBQU87O0VBQUEsTUFBVXhDLFdBQUEsS0FBZSxJQUFmLElBQXVCSSxJQUFJLENBQUM1SixNQUFMLEtBQWUsQ0FBaEQ7Ozs7RUFFQXlMLEVBQUFBLE1BQUEsR0FBUzdCLElBQUksQ0FBQzJCLEtBQUwsQ0FBVyxDQUFYLEVBQWNoQyxhQUFkLENBQVQ7RUFDQXlDLEVBQUFBLEtBQUEsR0FBUSxDQUFSO0VBQ0F4QyxFQUFBQSxXQUFBLEdBQWMsSUFBZDtFQUVBSyxFQUFBQSxJQUFBLENBQUs0QixNQUFMLENBQUEsQ0FDS0ssSUFETCxDQUNVLFVBQUMzRCxRQUFEO0VBQ0ZxQixJQUFBQSxXQUFBLEdBQWMsS0FBZDtFQUVBckIsSUFBQUEsUUFBUSxDQUFDc0QsTUFBVCxDQUFnQlEsT0FBaEIsQ0FBd0IsVUFBQ0MsUUFBRDtFQUNwQixVQUFHQSxRQUFRLENBQUNoRSxNQUFULEtBQW1CLGtCQUFuQixJQUF5Q2dFLFFBQVEsQ0FBQ2hFLE1BQVQsS0FBbUIsS0FBL0Q7RUFDSTBCLFFBQUFBLElBQUEsR0FBT0EsSUFBSSxDQUFDSSxNQUFMLENBQVksVUFBQ21DLFNBQUQ7bUJBQWVBLFNBQVMsQ0FBQ2pDLEVBQVYsS0FBa0JnQyxRQUFRLENBQUMxVjtFQUF0RCxTQUFBLENBQVA7RUFESixPQUFBLE1BRUssSUFBRyxNQUFIO0VBQ0R3VixRQUFBQSxLQUFBOztFQUpSLEtBQUE7O0VBU0EsUUFBY3BDLElBQUksQ0FBQzVKLE1BQUwsSUFBZXVKLGFBQWYsSUFBaUN5QyxLQUFBLEtBQVMsQ0FBeEQ7O0VBQUExQyxNQUFBQSxRQUFBOztFQWJSLEdBQUEsRUFnQks4QyxLQWhCTCxDQWdCVyxVQUFDblIsR0FBRDtFQUNIdU8sSUFBQUEsV0FBQSxHQUFjLEtBQWQ7RUFFQSxVQUFNdk8sR0FBTjtFQW5CUixHQUFBO0dBUEo7O0VBK0JBcU8sUUFBQSxHQUFXakQsS0FBRyxDQUFDeEwsSUFBSixDQUFTc0YsUUFBVCxDQUFrQmlKLFNBQWxCLEVBQTZCLElBQTdCLENBQVg7RUFFQUMsa0JBQWtCLENBQUN2RCxHQUFuQixDQUF1QixvQkFBdkIsRUFBNkMsRUFBN0M7O0VBRUE7RUFDSS9LLEVBQUFBLE1BQU0sQ0FBQ3NSLGdCQUFQLENBQXdCLGNBQXhCLEVBQXdDLFVBQUM3RCxDQUFEO0VBQ3BDb0IsSUFBQUEsSUFBQSxHQUFPQSxJQUFJLENBQUNzQixNQUFMLENBQVl4QixPQUFBLEVBQVosQ0FBUDtFQUVBTCxJQUFBQSxrQkFBa0IsQ0FBQ3ZELEdBQW5CLENBQXVCLG9CQUF2QixFQUE2QzhELElBQTdDO0VBSEosR0FBQSxFQU1FLEtBTkY7RUFESixDQUFBOztFQ3pJQSxJQUFBaEYsWUFBQSxFQUFBMEgsS0FBQTtBQUFBMUgsY0FBQSxHQUFhck8sVUFBYjs7RUFFTStWOzs7RUFDRjs7O0VBQ0ksU0FBQ0MsU0FBRCxHQUFhLEtBQWI7RUFDQSxTQUFDQyxVQUFELEdBQWMsS0FBQ0MsT0FBRCxFQUFkOzs7Ozs7O0VBS0EsV0FBQ0YsU0FBRCxHQUFhLElBQWI7RUFFQSxXQUFDQyxVQUFELENBQVlFLEtBQVo7ZUFFQTs7Ozs7WUFHQUY7RUFBQUEsTUFBQUEsVUFBQSxHQUFhLElBQUlHLFNBQUosQ0FBY3RHLEdBQUcsQ0FBQ3ZCLE1BQUosQ0FBVzJCLEdBQVgsQ0FBZSxnQkFBZixDQUFkLENBQWI7RUFFQStGLE1BQUFBLFVBQVUsQ0FBQ0ksTUFBWCxHQUFvQixLQUFDQyxNQUFELENBQVFDLElBQVIsQ0FBYSxJQUFiLENBQXBCO0VBQ0FOLE1BQUFBLFVBQVUsQ0FBQ08sU0FBWCxHQUF1QixLQUFDQyxTQUFELENBQVdGLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBdkI7RUFDQU4sTUFBQUEsVUFBVSxDQUFDbEwsT0FBWCxHQUFxQixLQUFDMkwsT0FBRCxDQUFTSCxJQUFULENBQWMsSUFBZCxDQUFyQjtFQUNBTixNQUFBQSxVQUFVLENBQUNVLE9BQVgsR0FBcUIsS0FBQ0MsT0FBRCxDQUFTTCxJQUFULENBQWMsSUFBZCxDQUFyQjtlQUVBTjs7Ozs7RUFHQSxXQUFDdkgsT0FBRCxDQUFTLE1BQVQ7Ozs7Z0NBSVF1RDs7RUFFSixhQUFDdkQsT0FBRCxDQUFTLE9BQVQsRUFBa0J5QixJQUFJLENBQUNDLEtBQUwsQ0FBVzZCLENBQUMsQ0FBQ0gsSUFBYixDQUFsQjtFQURKOzs7Ozs7Ozs7O0VBU0EsVUFBRyxLQUFDa0UsU0FBRCxLQUFjLEtBQWpCO0VBQ0l6TCxRQUFBQSxVQUFBLENBQVc7RUFDUCxVQUFBLEtBQUMsQ0FBQTBMLFVBQUQsR0FBYyxLQUFDLENBQUFDLE9BQUQsRUFBZDtFQURKLFNBQUEsRUFJRSxJQUpGLENBQUE7Ozs7OztLQXhDTjs7QUFnRE43SCxjQUFVLENBQUNPLEtBQVgsQ0FBaUJtSCxLQUFqQjtFQUVBLFNBQUEsR0FBaUJBLEtBQWpCOztFQ3BEQSxVQUFBLEdBQ0k7RUFBQW5ELEVBQUFBLE9BQUEsRUFBUzVTLE9BQVQ7RUFFQStWLEVBQUFBLEtBQUEsRUFBTzdWO0VBRlAsQ0FESjs7OztFQ0FBLElBQUE0UCxLQUFBLEVBQUFvRCxPQUFBLEVBQUEyRCxZQUFBLEVBQUFwSyxzQkFBQSxFQUFBcUssT0FBQTtBQUFBNUQsU0FBQSxHQUFRbFQsZUFBUjtBQUNBOFAsT0FBQSxHQUFNNVAsR0FBTjtFQUNDdU0seUJBQTBCbE0sT0FBMUJrTTs7RUFFRG9LLFlBQUEsR0FBZTtRQUFDRSw4RUFBVTtRQUN0QkM7RUFBQUEsRUFBQUEsYUFBQSxHQUFnQixFQUFoQjtFQUVBRCxFQUFBQSxPQUFPLENBQUNFLEdBQVIsQ0FBWSxVQUFDckcsTUFBRDtVQUNSaE0sS0FBQXNTLGNBQUF6QyxPQUFBNVA7RUFBQTRQLElBQUFBLEtBQUEsR0FBUTdELE1BQU0sQ0FBQ0MsS0FBUCxDQUFhLElBQWIsQ0FBUjtFQUNBcUcsSUFBQUEsWUFBQSxHQUFlekMsS0FBTSxDQUFBLENBQUEsQ0FBTixDQUFTNUQsS0FBVCxDQUFlLEdBQWYsQ0FBZjtFQUNBak0sSUFBQUEsR0FBQSxHQUFNc1MsWUFBYSxDQUFBLENBQUEsQ0FBbkI7RUFDQXJTLElBQUFBLEtBQUEsR0FBUXFTLFlBQWEsQ0FBQSxDQUFBLENBQXJCO0VBRUFGLElBQUFBLGFBQWMsQ0FBQXBTLEdBQUEsQ0FBZCxHQUFxQkMsS0FBckI7RUFOSixHQUFBO1dBVUFtUztHQWJKOztFQWVBRixPQUFBLEdBQVU7UUFBQ25TLDhFQUFVO1FBQUlnRztRQUNyQndNLFFBQUFDLFdBQUFDLHFCQUFBL0YsU0FBQXhMO0VBQUFBLEVBQUFBLEdBQUEsR0FBTWdLLEtBQUcsQ0FBQ3ZCLE1BQUosQ0FBVzJCLEdBQVgsQ0FBZSxVQUFmLENBQU47RUFDQW9CLEVBQUFBLE9BQUEsR0FBVSxPQUFPLEVBQWpCO0VBQ0E2RixFQUFBQSxNQUFBLEdBQVNySCxLQUFHLENBQUN2QixNQUFKLENBQVcyQixHQUFYLENBQWUsUUFBZixDQUFUO0VBQ0FrSCxFQUFBQSxTQUFBLEdBQVl0SCxLQUFHLENBQUN2QixNQUFKLENBQVcyQixHQUFYLENBQWUsV0FBZixDQUFaO0VBQ0FtSCxFQUFBQSxtQkFBQSxHQUFzQixvQkFBdEI7RUFDQTFTLEVBQUFBLE9BQUEsR0FDSTtFQUFBeVEsSUFBQUEsTUFBQSxFQUFRLE1BQVI7RUFDQTlELElBQUFBLE9BQUEsRUFBU0EsT0FEVDtFQUVBK0QsSUFBQUEsT0FBQSxFQUNJO0VBQUEsc0JBQWdCO0VBQWhCLEtBSEo7RUFJQUMsSUFBQUEsSUFBQSxFQUFNbkYsSUFBSSxDQUFDRSxTQUFMLENBQ0Y7RUFBQWlILE1BQUFBLEtBQUEsRUFBTzNTLE9BQU8sQ0FBQzJTLEtBQWY7RUFDQUMsTUFBQUEsYUFBQSxFQUFlNVMsT0FBTyxDQUFDNFMsYUFEdkI7RUFFQUMsTUFBQUEsU0FBQSxFQUFXN1MsT0FBTyxDQUFDNlM7RUFGbkIsS0FERTtFQUpOLEdBREo7O0VBV0EsTUFBRzFILEtBQUcsQ0FBQ3hMLElBQUosQ0FBU2xDLE1BQVQsdUJBQUg7RUFDSXVDLElBQUFBLE9BQU8sQ0FBQ29TLE9BQVIsR0FBa0IsQ0FDZDtFQUFBblMsTUFBQUEsR0FBQSxFQUFLeVMsbUJBQUw7RUFDQXhTLE1BQUFBLEtBQUEsRUFBT3VTLFNBRFA7RUFFQXRSLE1BQUFBLEdBQUEsRUFBS0E7RUFGTCxLQURjLENBQWxCO0VBREosR0FBQSxNQU1LLElBQUdnSyxLQUFHLENBQUN4TCxJQUFKLENBQVNDLFNBQVQsRUFBSDtFQUNESSxJQUFBQSxPQUFPLENBQUM4UyxXQUFSLEdBQXNCLFNBQXRCOzs7RUFFSnZFLEVBQUFBLE9BQUEsQ0FBTXBOLEdBQU4sRUFBV25CLE9BQVgsQ0FBQSxDQUNLNFEsSUFETCxDQUNVLFVBQUMzRCxRQUFEO2FBQ0ZBLFFBQVEsQ0FBQzRELElBQVQsR0FBZ0JELElBQWhCLENBQXFCLFVBQUNDLElBQUQ7WUFFakJrQyxZQUFBWCxTQUFBclA7O0VBQUEsVUFBR29JLEtBQUcsQ0FBQ3hMLElBQUosQ0FBU2xDLE1BQVQsRUFBSDtFQUNJMlUsUUFBQUEsT0FBQSxHQUFVRixZQUFBLHVDQUErQixDQUFBLFlBQUEsVUFBL0IsQ0FBVjtFQUNBYSxRQUFBQSxVQUFBLEdBQWFYLE9BQVEsQ0FBQU0sbUJBQUEsQ0FBckI7O0VBRUEsWUFBR3ZILEtBQUcsQ0FBQ3ZCLE1BQUosQ0FBVzJCLEdBQVgsQ0FBZSxXQUFmLE1BQWlDd0gsVUFBcEM7RUFDSTVILFVBQUFBLEtBQUcsQ0FBQ3ZCLE1BQUosQ0FBV2dCLEdBQVgsQ0FBZSxXQUFmLEVBQTRCbUksVUFBNUI7RUFMUjs7O0VBT0EsVUFBRzlGLFFBQVEsQ0FBQ0QsTUFBVCxLQUFxQixHQUF4QjtpQkFDSWhILFFBQUEsQ0FBU21GLEtBQUcsQ0FBQ3hMLElBQUosQ0FBU0csS0FBVCxDQUFlLElBQUl1RyxLQUFKLENBQVUsaUJBQVYsQ0FBZixFQUNMO0VBQUFqRyxVQUFBQSxJQUFBLEVBQU0sZUFBTjtFQUNBOE0sVUFBQUEsVUFBQSxFQUFZQyxJQUFJLENBQUNEO0VBRGpCLFNBREssQ0FBVDtFQURKLE9BQUEsTUFBQTtpQkFNSWxILFFBQUEsQ0FBUyxJQUFULEVBQWU2SyxJQUFmOztFQWZSLEtBQUE7RUFGUixHQUFBLEVBa0JLSyxLQWxCTCxDQWtCV2xMLFFBbEJYO0dBMUJKOztFQWdEQSxhQUFBLEdBQWlCOEIsc0JBQUEsQ0FBdUJxSyxPQUF2QixFQUFnQyxDQUFoQyxDQUFqQjs7RUNuRUEsU0FBQSxHQUNJO0VBQUFBLEVBQUFBLE9BQUEsRUFBUzlXO0VBQVQsQ0FESjs7O0VDQUE7Ozs7RUFJQSxjQUFjLEdBQUcsVUFBVSxHQUFHLEVBQUUsSUFBSSxFQUFFO0lBQ3BDLElBQUksRUFBRSxHQUFHLENBQUNELEtBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqRCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BCNEMsT0FBTyxDQUFDQSxPQUFPLENBQUMsQ0FBQyxHQUFHQSxPQUFPLENBQUMsQ0FBQyxHQUFHcUIsTUFBSyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0dBQy9FLENBQUM7O0VDVEY7Ozs7QUFJQWhFLFlBQXdCLENBQUMsTUFBTSxFQUFFLFlBQVk7SUFDM0MsT0FBTyxTQUFTLElBQUksQ0FBQyxFQUFFLEVBQUU7TUFDdkIsT0FBT3lELFdBQUssQ0FBQ1ksU0FBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDNUIsQ0FBQztHQUNILENBQUMsQ0FBQzs7Ozs7O0VDUkgsSUFBQXlMLEtBQUEsRUFBQW9ELE9BQUEsRUFBQXpHLHdCQUFBLEVBQUFxSyxRQUFBOztBQUFBNUQsU0FBQSxHQUFRbFQsZUFBUjtBQUNBOFAsT0FBQSxHQUFNNVAsR0FBTjtBQUNDdU0sNkJBQTBCbE0sT0FBMUJrTTs7RUFFRHFLLFFBQUEsR0FBVTtRQUFDblMsOEVBQVU7UUFBSWdHO1FBQVVnTjtFQUMvQjdILEVBQUFBLEtBQUcsQ0FBQzhILE9BQUosQ0FBWUMsT0FBWixDQUFvQkMsTUFBcEIsQ0FBMkIsVUFBQ3BULEdBQUQ7VUFDdkJxVCxXQUFBQyxZQUFBMUMsTUFBQTJDLEtBQUE1QyxTQUFBRyxNQUFBaEcsUUFBQTBJLElBQUF4USxLQUFBeVEsTUFBQUMsTUFBQWpELEtBQUFrRCxPQUFBdlM7O0VBQUEsUUFBd0JwQixXQUF4QjtlQUFPaUcsUUFBQSxDQUFTakcsR0FBVDs7O0VBRVBvQixJQUFBQSxHQUFBLEdBQU1nSyxLQUFHLENBQUN2QixNQUFKLENBQVcyQixHQUFYLENBQWUsU0FBZix5Q0FBMkMsRUFBM0MsQ0FBTjtFQUNBbUYsSUFBQUEsT0FBQSw2Q0FBNEIsRUFBNUI7RUFDQUcsSUFBQUEsSUFBQSxHQUFVLE9BQU83USxPQUFPLENBQUM2USxJQUFmLEtBQXVCLFNBQXZCLEdBQXNDN1EsT0FBTyxDQUFDNlEsSUFBOUMsR0FBd0QsSUFBbEU7RUFDQTZDLElBQUFBLEtBQUEsR0FBUXZJLEtBQUcsQ0FBQ3ZCLE1BQUosQ0FBVzJCLEdBQVgsQ0FBZSxrQkFBZixDQUFSO0VBQ0E4SCxJQUFBQSxVQUFBLEdBQWFsSSxLQUFHLENBQUN2QixNQUFKLENBQVcyQixHQUFYLENBQWUsWUFBZixDQUFiO0VBQ0E2SCxJQUFBQSxTQUFBLEdBQVlqSSxLQUFHLENBQUN2QixNQUFKLENBQVcyQixHQUFYLENBQWUsV0FBZixDQUFaO0VBQ0FWLElBQUFBLE1BQUEsR0FBU00sS0FBRyxDQUFDdkIsTUFBSixDQUFXMkIsR0FBWCxDQUFlLFFBQWYsQ0FBVDtFQUNBZ0ksSUFBQUEsRUFBQSx3Q0FBa0IsRUFBbEI7RUFDQUQsSUFBQUEsR0FBQSxHQUFNdFQsT0FBTyxDQUFDMlQsV0FBZDtFQUNBaEQsSUFBQUEsSUFBQSxHQUFPM1EsT0FBTyxDQUFDMlEsSUFBZjtFQUVBRCxJQUFBQSxPQUFRLENBQUEsU0FBQSxDQUFSLEdBQXFCZ0QsS0FBckI7O0VBQ0EsUUFBc0VOLGlCQUF0RTtFQUFBMUMsTUFBQUEsT0FBUSxDQUFBLGFBQUEsQ0FBUixHQUF5QnZGLEtBQUcsQ0FBQzhILE9BQUosQ0FBWUMsT0FBWixDQUFvQlUsSUFBcEIsQ0FBeUJSLFNBQXpCLEVBQW9DTSxLQUFwQyxDQUF6Qjs7O0VBRUEsUUFBRzdDLElBQUg7RUFDSUgsTUFBQUEsT0FBUSxDQUFBLGNBQUEsQ0FBUixHQUEwQixrQkFBMUI7RUFDQUEsTUFBQUEsT0FBUSxDQUFBLFFBQUEsQ0FBUixHQUFvQixrQkFBcEI7O0VBRUEsVUFBR0MsSUFBSDtFQUNJQSxRQUFBQSxJQUFBLEdBQU9uRixJQUFJLENBQUNFLFNBQUwsQ0FBZWlGLElBQWYsQ0FBUDtFQUxSOzs7RUFPQSxRQUF3QjlGLGNBQXhCO0VBQUEwSSxNQUFBQSxFQUFFLENBQUNNLFFBQUgsR0FBY2hKLE1BQWQ7OztFQUNBLFFBQTBCd0ksa0JBQTFCO0VBQUFFLE1BQUFBLEVBQUUsQ0FBQ08sTUFBSCxHQUFZVCxVQUFaOzs7RUFFQSxRQUFHQyxXQUFIO0VBQ0ksOEJBQTJCLG9CQUEzQjtFQUFBQyxRQUFBQSxFQUFFLENBQUNRLEtBQUgsR0FBV1QsR0FBRyxDQUFDVSxRQUFmOzs7RUFDQSwrQkFBNEIsb0JBQTVCO0VBQUFULFFBQUFBLEVBQUUsQ0FBQ1UsS0FBSCxHQUFXWCxHQUFHLENBQUNZLFNBQWY7OztFQUNBLDRCQUE0Qix1QkFBNUI7RUFBQVgsUUFBQUEsRUFBRSxDQUFDWSxRQUFILEdBQWNiLEdBQUcsQ0FBQ2MsTUFBbEI7OztFQUNBLDRCQUE0Qix1QkFBNUI7RUFBQWIsUUFBQUEsRUFBRSxDQUFDYyxRQUFILEdBQWNmLEdBQUcsQ0FBQ2dCLE1BQWxCO0VBSko7OztFQU1BLFFBQUcvRSxNQUFNLENBQUN6RixJQUFQLENBQVl5SixFQUFaLEVBQWdCek8sTUFBbkI7RUFDSTNELE1BQUFBLEdBQUEsSUFBTyxNQUFPb08sTUFBTSxDQUFDekYsSUFBUCxDQUFZeUosRUFBWixFQUFnQmpCLEdBQWhCLENBQW9CLFVBQUM1SyxDQUFEO0VBQzlCLFlBQUdrSCxLQUFLLENBQUNDLE9BQU4sQ0FBY25ILENBQWQsQ0FBSDttQkFDVzZMLEVBQUcsQ0FBQTdMLENBQUEsQ0FBSCxDQUFNNEssR0FBTixDQUFVLFVBQUNpQyxHQUFEOytCQUFZQyxrQkFBQSxDQUFtQjlNLENBQW5CLGlCQUEyQjhNLGtCQUFBLENBQW1CRCxHQUFuQjtFQUFqRCxXQUFBLEVBQTRFdEUsSUFBNUUsQ0FBaUYsR0FBakY7OzsyQkFFUnVFLGtCQUFBLENBQW1COU0sQ0FBbkIsZUFBeUI4TSxrQkFBQSxDQUFtQmpCLEVBQUcsQ0FBQTdMLENBQUEsQ0FBdEI7RUFKbEIsT0FBQSxDQUFELENBS1h1SSxJQUxXLENBS04sR0FMTSxDQUFiOzs7RUFPSk8sSUFBQUEsR0FBQSxHQUFNakMsT0FBQSxDQUFNcE4sR0FBTixFQUNGO0VBQUFzUCxNQUFBQSxNQUFBLEVBQVF6USxPQUFPLENBQUN5USxNQUFoQjtFQUNBRSxNQUFBQSxJQUFBLEVBQU1BLElBRE47RUFFQUQsTUFBQUEsT0FBQSxFQUFTQTtFQUZULEtBREUsQ0FBTjthQUtBRixHQUNJLENBQUNJLElBREwsQ0FDVSxVQUFDM0QsUUFBRDtlQUNGQSxRQUFRLENBQUM0RCxJQUFULEdBQWdCRCxJQUFoQixDQUFxQixVQUFDQyxJQUFEO2NBQ2pCNEQsTUFBQUM7RUFBQWhCLFFBQUFBLEtBQUEsR0FBUXZJLEtBQUcsQ0FBQ3ZCLE1BQUosQ0FBVzJCLEdBQVgsQ0FBZSxrQkFBZixDQUFSO0VBQ0FtSixRQUFBQSxhQUFBLEdBQWdCekgsUUFBUSxDQUFDeUQsT0FBVCxDQUFpQm5GLEdBQWpCLENBQXFCLFNBQXJCLENBQWhCOztFQUVBLFlBQStDbUosYUFBQSxJQUFrQmhCLEtBQUEsS0FBV2dCLGFBQTVFO0VBQUF2SixVQUFBQSxLQUFHLENBQUM4SCxPQUFKLENBQVlDLE9BQVosQ0FBb0J5QixTQUFwQixDQUE4QkQsYUFBOUI7OztFQUVBLFlBQUd6SCxRQUFRLENBQUNELE1BQVQsSUFBbUIsR0FBbkIsSUFBMkJDLFFBQVEsQ0FBQ0QsTUFBVCxHQUFrQixHQUE3QyxJQUFvREMsUUFBUSxDQUFDRCxNQUFULEtBQW1CLEdBQTFFO0VBQ0loSCxVQUFBQSxRQUFBLENBQVMsSUFBVCxFQUFlNkssSUFBZixDQUFBO0VBREosU0FBQSxNQUFBO0VBR0ksY0FBR21DLFVBQUEsS0FBZ0IsSUFBaEIsNEJBQXlCbkMsSUFBSSxDQUFFelEsbUJBQVMsUUFBZnFVLElBQUEsS0FBcUIsUUFBckJBLElBQUEsS0FBMkIsSUFBcEQsQ0FBSDtFQUNJdEosWUFBQUEsS0FBRyxDQUFDdkIsTUFBSixDQUFXZ0IsR0FBWCxDQUFlO0VBQUFnSyxjQUFBQSxnQkFBQSxFQUFrQjtFQUFsQixhQUFmOztFQUVBekMsWUFBQUEsUUFBQSxDQUFRblMsT0FBUixFQUFpQmdHLFFBQWpCLEVBQTJCLElBQTNCLENBQUE7RUFISixXQUFBLE1BQUE7RUFLSUEsWUFBQUEsUUFBQSxDQUFTbUYsS0FBRyxDQUFDeEwsSUFBSixDQUFTRyxLQUFULENBQWUsSUFBSXVHLEtBQUosQ0FBVSxnQkFBVixDQUFmLEVBQ0w7RUFBQWpHLGNBQUFBLElBQUEsRUFBTSxjQUFOO0VBQ0E4TSxjQUFBQSxVQUFBLEVBQVlELFFBQVEsQ0FBQ0Q7RUFEckIsYUFESyxDQUFULEVBR0c2RCxJQUhILENBQUE7RUFSUjs7RUFOSixPQUFBO0VBRlIsS0FBQSxFQXNCS0ssS0F0QkwsQ0FzQldsTCxRQXRCWDtFQTlDSixHQUFBO0dBREo7O0VBeUVBLGVBQUEsR0FBaUI4Qix3QkFBQSxDQUF1QnFLLFFBQXZCLEVBQWdDLENBQWhDLENBQWpCOzs7RUM3RUEsQ0FBQyxTQUFTLE9BQU8sRUFBRTtFQUNuQixhQUFZOztFQUVaLElBQUksVUFBVSxHQUFHO0lBQ2YsVUFBVSxFQUFFLFNBQVMsS0FBSyxFQUFFOzs7Ozs7Ozs7Ozs7OztNQWMxQixPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUM7S0FDNUI7SUFDRCxVQUFVLEVBQUUsU0FBUyxHQUFHLEVBQUU7TUFDeEIsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxrRUFBa0UsQ0FBQztNQUM3RyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQztNQUMvQyxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7S0FDbkU7SUFDRjs7Ozs7RUFLRCxTQUFTLGFBQWEsQ0FBQyxLQUFLLEVBQUU7SUFDNUIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztHQUM1RTs7RUFFRCxTQUFTLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFO0lBQzFCLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUUsT0FBTyxJQUFJO0lBQ2xDLE9BQU8sS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJO0dBQ3JEOzs7RUFHRCxJQUFJLFFBQWEsS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUNuRCxjQUFjLEdBQUcsV0FBVTtHQUM1QixNQUFNO0lBQ0wsT0FBTyxDQUFDLFVBQVUsR0FBRyxXQUFVO0dBQ2hDOztHQUVBLENBQUNoSSxjQUFJLENBQUM7Ozs7RUM5Q1AsQ0FBQyxTQUFTLE9BQU8sRUFBRTtFQUNuQixhQUFZOztFQUVaLElBQUksYUFBYSxHQUFHO0lBQ2xCLGFBQWEsRUFBRSxTQUFTLEtBQUssRUFBRTtNQUM3QixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7S0FDeEU7SUFDRCxhQUFhLEVBQUUsU0FBUyxHQUFHLEVBQUU7TUFDM0IsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQ2pFO0lBQ0Y7OztFQUdELGFBQWEsQ0FBQyxJQUFJLEdBQUc7S0FDbEIsYUFBYSxFQUFFLFNBQVMsS0FBSyxFQUFFO01BQzlCLE9BQU8sa0JBQWtCLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUN0RTtJQUNELGFBQWEsRUFBRSxTQUFTLEdBQUcsRUFBRTtLQUM1QixPQUFPLGFBQWEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDckU7SUFDRjs7RUFFRCxJQUFJLFFBQWEsS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUNuRCxjQUFjLEdBQUcsY0FBYTtHQUMvQixNQUFNO0lBQ0wsT0FBTyxDQUFDLGFBQWEsR0FBRyxjQUFhO0dBQ3RDOztHQUVBLENBQUNBLGNBQUksQ0FBQzs7OztFQzVCUCxDQUFDLFNBQVMsT0FBTyxFQUFFO0VBQ25CLGFBQVk7O0VBRVosSUFBSSxRQUFRLEdBQUcsR0FBRTs7RUFFakIsSUFBSSxRQUFhLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7SUFDbkQsUUFBUSxDQUFDLFVBQVUsR0FBRzlPLFVBQXNCLENBQUMsV0FBVTtJQUN2RCxRQUFRLENBQUMsYUFBYSxHQUFHRSxjQUF5QjtJQUNsRCxjQUFjLEdBQUcsT0FBTTtHQUN4QixNQUFNO0lBQ0wsUUFBUSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVU7SUFDbkQsUUFBUSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsY0FBYTtJQUM5QyxPQUFPLENBQUMsTUFBTSxHQUFHLE9BQU07R0FDeEI7Ozs7Ozs7Ozs7RUFVRCxJQUFJLENBQUMsR0FBRyxHQUFFOzs7RUFHVixDQUFDLFlBQVk7SUFDWCxTQUFTLE9BQU8sQ0FBQyxDQUFDLEVBQUU7TUFDbEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUN6QixLQUFLLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRSxNQUFNLElBQUksS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQzlDLElBQUksRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsT0FBTyxLQUFLO09BQ2hDOztNQUVELE9BQU8sSUFBSTtLQUNaOztJQUVELFNBQVMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFO01BQzVCLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksV0FBVyxJQUFJLENBQUM7S0FDekM7O0lBRUQsSUFBSSxDQUFDLEdBQUcsRUFBQztJQUNULElBQUksTUFBTSxHQUFHLEVBQUM7SUFDZCxPQUFPLE1BQU0sR0FBRyxFQUFFLEVBQUU7TUFDbEIsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDZCxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDO1FBQ2pELE1BQU0sR0FBRTtPQUNUOztNQUVELENBQUMsR0FBRTtLQUNKO0dBQ0YsR0FBRTs7RUFFSCxJQUFJLFlBQVksR0FBRyxVQUFVLEtBQUssRUFBRTtJQUNsQyxJQUFJLEtBQUssR0FBRyxHQUFFO0lBQ2QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO01BQ3BELEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFDO0tBQzVDO0lBQ0QsT0FBTyxLQUFLO0lBQ2I7O0VBRUQsSUFBSSxZQUFZLEdBQUcsVUFBVSxLQUFLLEVBQUU7SUFDbEMsSUFBSSxLQUFLLEdBQUcsR0FBRTtJQUNkLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO01BQzdDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksSUFBSSxFQUFDO0tBQ3REO0lBQ0QsT0FBTyxLQUFLO0lBQ2I7OztFQUdELElBQUksQ0FBQyxHQUFHLEdBQUU7O0VBRVYsSUFBSSxZQUFZLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRTs7SUFFekMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQztJQUMxQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDOzs7SUFHMUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtNQUMzQixJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDVixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFDO09BQ3pCLE1BQU07UUFDTCxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBQztRQUN2QixJQUFJLE1BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLEVBQUUsS0FBSyxPQUFPLEtBQUssQ0FBQyxDQUFDO3VCQUNqQyxDQUFDLE9BQU8sSUFBSSxFQUFFLEtBQUssT0FBTyxLQUFLLEVBQUUsQ0FBQyxDQUFDO3VCQUNuQyxPQUFPLEtBQUssQ0FBQyxFQUFDOztRQUU3QixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksTUFBTSxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksRUFBRSxLQUFLLE9BQU8sS0FBSyxFQUFFLENBQUM7dUJBQ2xDLENBQUMsT0FBTyxJQUFJLEVBQUUsS0FBSyxPQUFPLEtBQUssRUFBRSxDQUFDLENBQUM7dUJBQ25DLE9BQU8sS0FBSyxFQUFFLEVBQUM7O1FBRTlCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztPQUMvQzs7TUFFRCxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7TUFDN0IsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7O01BRXRDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO01BQzNGLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDOztNQUUzRixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsTUFBTSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ3ZDLElBQUksRUFBRSxHQUFHLE1BQU0sR0FBRyxHQUFHLENBQUM7O01BRXRCLENBQUMsR0FBRyxDQUFDLENBQUM7TUFDTixDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQ04sQ0FBQyxHQUFHLENBQUMsQ0FBQztNQUNOLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO01BQ2pCLENBQUMsR0FBRyxDQUFDLENBQUM7TUFDTixDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQ04sQ0FBQyxHQUFHLENBQUMsQ0FBQztNQUNOLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ25COzs7SUFHRCxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFD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QixFQUFFO1NBQ3ZDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQztVQUMvQixTQUFTLEVBQUUsQ0FBQztVQUNaLFNBQVMsRUFBRSxRQUFRLENBQUMsYUFBYTtTQUNsQyxDQUFDLENBQUMsQ0FBQztRQUNKLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQztVQUMvQixLQUFLLEVBQUUsV0FBVztVQUNsQixRQUFRLEVBQUUsQ0FBQztTQUNaLENBQUMsQ0FBQyxDQUFDO1FBQ0osSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUM7VUFDakMsSUFBSSxFQUFFLEdBQUc7U0FDVixDQUFDLENBQUMsQ0FBQztRQUNKLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElB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
